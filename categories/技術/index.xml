<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>技術 on Ko-Da-Wa-Ri</title><link>https://kodawari.info/categories/%E6%8A%80%E8%A1%93/</link><description>Recent content in 技術 on Ko-Da-Wa-Ri</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 29 Jul 2022 16:43:35 +0900</lastBuildDate><atom:link href="https://kodawari.info/categories/%E6%8A%80%E8%A1%93/index.xml" rel="self" type="application/rss+xml"/><item><title>Vite + Svelte + Tailwind CSS + daisyUI + TypeScript の環境設定</title><link>https://kodawari.info/posts/vite-+-svelte-+-tailwind-css-+-daisyui-+-typescript-%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</link><pubDate>Fri, 29 Jul 2022 16:43:35 +0900</pubDate><guid>https://kodawari.info/posts/vite-+-svelte-+-tailwind-css-+-daisyui-+-typescript-%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</guid><description>パパッとコマンドなどだけですが、こんな感じで。。。。。。 npm create vite@latest kodawari -- --template svelte-ts cd kodawari npm i -D tailwindcss npm i -D daisyui npm install npx tailwindcss init -p ./src/app.css に追加 @tailwind base; @tailwind components; @tailwind utilities; ./tailwind.config.cjs を更新 /** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */ module.exports</description><content:encoded><![CDATA[
              <p>パパッとコマンドなどだけですが、こんな感じで。。。。。。</p>
<pre tabindex="0"><code>npm create vite@latest kodawari -- --template svelte-ts
</code></pre><pre tabindex="0"><code>cd kodawari
</code></pre><pre tabindex="0"><code>npm i -D tailwindcss
npm i -D daisyui
</code></pre><pre tabindex="0"><code>npm install
</code></pre><pre tabindex="0"><code>npx tailwindcss init -p
</code></pre><p>./src/app.css に追加</p>
<pre tabindex="0"><code>@tailwind base;
@tailwind components;
@tailwind utilities;
</code></pre><p>./tailwind.config.cjs を更新</p>
<pre tabindex="0"><code>/** @type {import(&#39;tailwindcss&#39;).Config} */
module.exports = {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}
</code></pre><p>↓</p>
<pre tabindex="0"><code>/** @type {import(&#39;tailwindcss&#39;).Config} */
module.exports = {
  content: [&#39;./src/**/*.{svelte,js,ts}&#39;],
  theme: {
    extend: {},
  },
  plugins: [require(&#39;daisyui&#39;)],
}
</code></pre><p>./src/App.savelet を更新</p>
<pre tabindex="0"><code>&lt;script lang=&#34;ts&#34;&gt;
    import Counter from &#39;./lib/Counter.svelte&#39;
    import Collapse from &#39;./lib/Collapse.svelte&#39;
    import Modal from &#39;./lib/Modal.svelte&#39;
&lt;/script&gt;

&lt;main&gt;
    &lt;button class=&#34;btn btn-secondary&#34;&gt;Hello daisyui&lt;/button&gt;
    
    &lt;button class=&#34;btn btn-ghost&#34;&gt;Button&lt;/button&gt;
    &lt;button class=&#34;btn btn-link&#34;&gt;Button&lt;/button&gt;

    &lt;div class=&#34;mockup-code&#34;&gt;
        &lt;pre data-prefix=&#34;1&#34;&gt;&lt;code&gt;npm i daisyui&lt;/code&gt;&lt;/pre&gt;
        &lt;pre data-prefix=&#34;2&#34;&gt;&lt;code&gt;installing...&lt;/code&gt;&lt;/pre&gt;
        &lt;pre data-prefix=&#34;3&#34; class=&#34;bg-warning text-warning-content&#34;&gt;&lt;code&gt;Error!&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&#34;card&#34;&gt;
        &lt;Counter/&gt;
    &lt;/div&gt;
        &lt;Modal/&gt;
    &lt;Collapse/&gt;

&lt;/main&gt;
</code></pre><p>./lib/Collapse.svelte を追加</p>
<pre tabindex="0"><code>&lt;div class=&#34;collapse&#34;&gt;
    &lt;input type=&#34;checkbox&#34; /&gt;
    &lt;div class=&#34;collapse-title text-xl font-medium&#34;&gt;
        Click me to show/hide content
    &lt;/div&gt;
    &lt;div class=&#34;collapse-content&#34;&gt;
        &lt;p&gt;hello&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>./lib/Modal.svelte を追加</p>
<pre tabindex="0"><code>
&lt;!-- The button to open modal --&gt;
&lt;label for=&#34;my-modal&#34; class=&#34;btn modal-button&#34;&gt;open modal&lt;/label&gt;

&lt;!-- Put this part before &lt;/body&gt; tag --&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;my-modal&#34; class=&#34;modal-toggle&#34; /&gt;
&lt;div class=&#34;modal&#34;&gt;
    &lt;div class=&#34;modal-box&#34;&gt;
        &lt;h3 class=&#34;font-bold text-lg&#34;&gt;Congratulations random Internet user!&lt;/h3&gt;
        &lt;p class=&#34;py-4&#34;&gt;You&#39;ve been selected for a chance to get one year of subscription to use Wikipedia for free!&lt;/p&gt;
        &lt;div class=&#34;modal-action&#34;&gt;
            &lt;label for=&#34;my-modal&#34; class=&#34;btn&#34;&gt;Yay!&lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>これで、テストしてみる。</p>
<pre tabindex="0"><code>npm run dev
</code></pre><p>こんな感じで表示されます。(^O^)</p>
<p><img src="../img/ViteSvelteTSlocalhost.png" alt="画面"></p>
<p>参考：</p>
<p><a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>
<a href="https://daisyui.com/">https://daisyui.com/</a>
<a href="https://ja.vitejs.dev/guide/#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88">https://ja.vitejs.dev/guide/#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88</a></p>

              ]]></content:encoded></item><item><title>zshの初期設定</title><link>https://kodawari.info/posts/zsh%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</link><pubDate>Wed, 27 Jul 2022 10:47:45 +0900</pubDate><guid>https://kodawari.info/posts/zsh%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</guid><description>ちょっとしたashの設定です。 Homebrewからインストール brew install zsh シェル一覧リストを追加 sudo sh -c &amp;#34;echo &amp;#39;/usr/local/bin/zsh&amp;#39; &amp;gt;&amp;gt; /etc/shells&amp;#34; インストールしたzshに設定 chsh -s /usr/local/bin/zsh Changing</description><content:encoded><![CDATA[
              <p>ちょっとしたashの設定です。</p>
<h2 id="homebrewからインストール">Homebrewからインストール</h2>
<pre tabindex="0"><code>brew install zsh
</code></pre><p>シェル一覧リストを追加</p>
<pre tabindex="0"><code>sudo sh -c &#34;echo &#39;/usr/local/bin/zsh&#39; &gt;&gt; /etc/shells&#34;
</code></pre><p>インストールしたzshに設定</p>
<pre tabindex="0"><code>chsh -s /usr/local/bin/zsh
Changing shell for ruedap.
Password for ruedap: パスワードを入力する
</code></pre><h2 id="zsh-completionsのインストール">zsh-completionsのインストール</h2>
<p>補完機能の強化</p>
<pre tabindex="0"><code>brew install zsh-completions
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code># zsh-completions(補完機能)の設定
if type brew &amp;&gt;/dev/null; then
 FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

 autoload -Uz compinit
 compinit
fi
</code></pre><h2 id="zsh-syntax-highlighting-のインストール">zsh-syntax-highlighting のインストール</h2>
<p>コマンドにシンタックスハイライトをつける</p>
<pre tabindex="0"><code>brew install zsh-syntax-highlighting
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</code></pre><h2 id="zsh-autosuggestions-のインストール">zsh-autosuggestions のインストール</h2>
<p>ターミナルのコマンド履歴に基づいてコマンド候補を表示、入力補完もしてくれる。</p>
<pre tabindex="0"><code>brew install zsh-autosuggestions
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code> source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
</code></pre><h2 id="色を使用出来るようにする">色を使用出来るようにする</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>autoload -Uz colors &amp;&amp; colors
</code></pre><h2 id="日本語ファイル名を表示可能にする">日本語ファイル名を表示可能にする</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt print_eight_bit
</code></pre><h2 id="cd-なしでもディレクトリ移動">cd なしでもディレクトリ移動</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_cd
</code></pre><h2 id="ビープ音の停止">ビープ音の停止</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt no_beep
</code></pre><h2 id="ビープ音の停止補完時">ビープ音の停止(補完時)</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt nolistbeep
</code></pre><h2 id="cd-tab-で以前移動したディレクトリを表示">cd [TAB] で以前移動したディレクトリを表示</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_pushd
</code></pre><h2 id="ヒストリ-履歴-を保存数を増やす">ヒストリ (履歴) を保存、数を増やす</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
</code></pre><h2 id="同時に起動した-zsh-の間でヒストリを共有する">同時に起動した zsh の間でヒストリを共有する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt share_history
</code></pre><h2 id="直前と同じコマンドの場合はヒストリに追加しない">直前と同じコマンドの場合はヒストリに追加しない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_dups
</code></pre><h2 id="同じコマンドをヒストリに残さない">同じコマンドをヒストリに残さない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_all_dups
</code></pre><h2 id="スペースから始まるコマンド行はヒストリに残さない">スペースから始まるコマンド行はヒストリに残さない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_space
</code></pre><h2 id="ヒストリに保存するときに余分なスペースを削除する">ヒストリに保存するときに余分なスペースを削除する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_reduce_blanks
</code></pre><h2 id="補完で小文字でも大文字にマッチさせる">補完で小文字でも大文字にマッチさせる</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>zstyle &#39;:completion:*&#39; matcher-list &#39;m:{a-z}={A-Z}&#39;
</code></pre><h2 id="パス名の補完候補時パス名を選択">パス名の補完候補時パス名を選択</h2>
<p>[TAB] でパス名の補完候補を表示したあと、
続けて [TAB] を押すと候補からパス名を選択できるようになる
候補を選ぶには [TAB] か Ctrl-N,B,F,P</p>
<p>~./zshrc</p>
<pre tabindex="0"><code>zstyle &#39;:completion:*:default&#39; menu select=1
</code></pre><h2 id="コマンドのスペルを訂正する">コマンドのスペルを訂正する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt correct
</code></pre><h2 id="cd-した先のディレクトリをディレクトリスタックに追加する">cd した先のディレクトリをディレクトリスタックに追加する</h2>
<p>cd [TAB] でディレクトリのヒストリが表示されるので、選択して移動できる
※ ディレクトリスタック: 今までに行ったディレクトリのヒストリのこと</p>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_pushd
</code></pre><h1 id="pushd-したときディレクトリがすでにスタックに含まれていればスタックに追加しない">pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない</h1>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt pushd_ignore_dups
</code></pre><h2 id="拡張-glob-を有効にする">拡張 glob を有効にする</h2>
<p>拡張globを有効にする
拡張globを有効にすると # ~ ^ もパターンとして扱われる
glob: パス名にマッチするワイルドカードパターンのこと
※ たとえば mv hoge.* ~/dir というコマンドにおける * のこと
~./zshrc</p>
<pre tabindex="0"><code>setopt extended_glob
</code></pre><h2 id="単語の一部として扱われる文字のセットを指定する">単語の一部として扱われる文字のセットを指定する</h2>
<p>単語の一部として扱われる文字のセットを指定する
ここではデフォルトのセットから / を抜いたものにしている
※ たとえば Ctrl-W でカーソル前の1単語を削除したとき / までで削除が止まる
~./zshrc</p>
<pre tabindex="0"><code>WORDCHARS=&#39;*?_-.[]~=&amp;;!#$%^(){}&lt;&gt;&#39;
</code></pre><h2 id="コマンド実行結果のあとに空行を挿入する">コマンド実行結果のあとに空行を挿入する</h2>
<p>~/.zshrc</p>
<pre tabindex="0"><code>add_newline() {
  if [[ -z $PS1_NEWLINE_LOGIN ]]; then
    PS1_NEWLINE_LOGIN=true
  else
    printf &#39;\n&#39;
  fi
}
precmd() { add_newline }
</code></pre>
              ]]></content:encoded></item><item><title>PostgreSQLの自動採番をなおす</title><link>https://kodawari.info/posts/postgresql%E3%81%AE%E8%87%AA%E5%8B%95%E6%8E%A1%E7%95%AA%E3%82%92%E3%81%AA%E3%81%8A%E3%81%99/</link><pubDate>Fri, 22 Jul 2022 19:01:53 +0900</pubDate><guid>https://kodawari.info/posts/postgresql%E3%81%AE%E8%87%AA%E5%8B%95%E6%8E%A1%E7%95%AA%E3%82%92%E3%81%AA%E3%81%8A%E3%81%99/</guid><description>シーケンスオブジェクトの値の更新 SELECT MAX(id) FROM table; SELECT nextval(&amp;#39;table_id_seq&amp;#39;); SELECT setval(&amp;#39;table_id_seq&amp;#39;, (SELECT MAX(id) FROM table));</description><content:encoded><![CDATA[
              <h2 id="シーケンスオブジェクトの値の更新">シーケンスオブジェクトの値の更新</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-postgresql" data-lang="postgresql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> MAX(id) <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> nextval(<span style="color:#e6db74">&#39;table_id_seq&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> setval(<span style="color:#e6db74">&#39;table_id_seq&#39;</span>, (<span style="color:#66d9ef">SELECT</span> MAX(id) <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span>));
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>Nodebrewのインストールと使い方</title><link>https://kodawari.info/posts/nodebrew%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Fri, 22 Jul 2022 11:14:09 +0900</pubDate><guid>https://kodawari.info/posts/nodebrew%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>Nodebrewをインストールする インストール brew install nodebrew 確認 nodebrew -v バージョンが表示されればOK。 .zshrcなどに環境変数を追加 vi ~/.zshrc export PATH=$HOME/.nodebrew/current/bin:$PATH 初期化 nodebrew setup</description><content:encoded><![CDATA[
              <h2 id="nodebrewをインストールする">Nodebrewをインストールする</h2>
<p>インストール</p>
<pre tabindex="0"><code>brew install nodebrew
</code></pre><p>確認</p>
<pre tabindex="0"><code>nodebrew -v
</code></pre><p>バージョンが表示されればOK。</p>
<p>.zshrcなどに環境変数を追加
vi ~/.zshrc</p>
<pre tabindex="0"><code>export PATH=$HOME/.nodebrew/current/bin:$PATH
</code></pre><p>初期化</p>
<pre tabindex="0"><code>nodebrew setup
</code></pre><p>バージョン指定してnodeをインストールする
インストール可能なバージョンを確認</p>
<pre tabindex="0"><code>nodebrew ls-remote
</code></pre><h2 id="nodeのインストール">nodeのインストール</h2>
<pre tabindex="0"><code>nodebrew install-binary &lt;version&gt;
</code></pre><p>例：</p>
<pre tabindex="0"><code>nodebrew install-binary v18.6.0
</code></pre><h2 id="インストールしたバージョンを確認">インストールしたバージョンを確認</h2>
<pre tabindex="0"><code>nodebrew ls
</code></pre><h2 id="使いたいバージョンを指定">使いたいバージョンを指定</h2>
<pre tabindex="0"><code>nodebrew use v18.6.0
</code></pre><h2 id="アンインストール">アンインストール</h2>
<pre tabindex="0"><code>nodebrew uninstall &lt;version&gt;
</code></pre><p>例：</p>
<pre tabindex="0"><code>nodebrew uninstall v18.6.0
</code></pre><h2 id="最終確認">最終確認</h2>
<p>もう一度nodebrew lsを叩いて、currentが指定されてればOK。
最後に node -vでバージョンが表示されれば万事完了！</p>

              ]]></content:encoded></item><item><title>Wails v2の初期設定</title><link>https://kodawari.info/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</link><pubDate>Thu, 21 Jul 2022 22:43:00 +0900</pubDate><guid>https://kodawari.info/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</guid><description>wailsインストール go install github.com/wailsapp/wails/v2/cmd/wails@latest ツールのcheck wails doctor 初期設定 wails init -n [プロジェクトディレクトリ名] -t [テンプレート名または、url] wails init -n tamatan -t svelte-ts</description><content:encoded><![CDATA[
              <h2 id="wailsインストール">wailsインストール</h2>
<pre tabindex="0"><code>go install github.com/wailsapp/wails/v2/cmd/wails@latest
</code></pre><h2 id="ツールのcheck">ツールのcheck</h2>
<pre tabindex="0"><code>wails doctor 
</code></pre><h2 id="初期設定">初期設定</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails init -n <span style="color:#f92672">[</span>プロジェクトディレクトリ名<span style="color:#f92672">]</span> -t <span style="color:#f92672">[</span>テンプレート名または、url<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails init -n tamatan -t svelte-ts 
</span></span></code></pre></div><p>現在バグなのか、フロントエンドの初期化がうまく行かないので
yarnまたは、npm installを実行する。
(yarnの方がうまく行くような気がする。)</p>
<pre tabindex="0"><code>cd tamatan/frontend
yarn
</code></pre><p>テンプレートは、 リリースのv2.0.0-beta.35に書いてあった</p>
<table>
<thead>
<tr>
<th>TEMPLATE</th>
<th>SHORT NAME</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lit + Vite</td>
<td>lit</td>
<td>Lit + Vite development server</td>
</tr>
<tr>
<td>Lit + Vite (Typescript)</td>
<td>lit-ts</td>
<td>Lit + TS + Vite development server</td>
</tr>
<tr>
<td>Preact + Vite</td>
<td>preact</td>
<td>Preact + Vite development server</td>
</tr>
<tr>
<td>Preact + Vite (Typescript)</td>
<td>preact-ts</td>
<td>Preact + Vite development server</td>
</tr>
<tr>
<td>React + Vite</td>
<td>react</td>
<td>React + Vite development server</td>
</tr>
<tr>
<td>React + Vite (Typescript)</td>
<td>react-ts</td>
<td>React + Vite development server</td>
</tr>
<tr>
<td>Svelte + Vite</td>
<td>svelte</td>
<td>Svelte + Vite development server</td>
</tr>
<tr>
<td>Svelte + Vite (Typescript)</td>
<td>svelte-ts</td>
<td>Svelte + TS + Vite development server</td>
</tr>
<tr>
<td>Vanilla + Vite</td>
<td>vanilla</td>
<td>Vanilla + Vite development server</td>
</tr>
<tr>
<td>Vanilla + Vite (Typescript)</td>
<td>vanilla-ts</td>
<td>Vanilla + Vite development server</td>
</tr>
<tr>
<td>Vue + Vite</td>
<td>vue</td>
<td>Vue + Vite development server</td>
</tr>
<tr>
<td>Vue + Vite (Typescript)</td>
<td>vue-ts</td>
<td>Vue + Vite development server</td>
</tr>
</tbody>
</table>
<h3 id="vue">Vue</h3>
<table>
<thead>
<tr>
<th>SHORT NAME</th>
<th>TEMPLATE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>misitebao/wails-template-vue</td>
<td><a href="https://github.com/misitebao/wails-template-vue">https://github.com/misitebao/wails-template-vue</a></td>
<td>A template using Vite,Vue and Vue-Router(Support both JavaScript and TypeScript)</td>
</tr>
<tr>
<td>wails-vite-vue-ts</td>
<td><a href="https://github.com/codydbentley/wails-vite-vue-ts">https://github.com/codydbentley/wails-vite-vue-ts</a></td>
<td>Vue 3 TypeScript with Vite (and instructions to add features)</td>
</tr>
<tr>
<td>codydbentley/wails-vite-vue-the-works</td>
<td><a href="https://github.com/codydbentley/wails-vite-vue-the-works">https://github.com/codydbentley/wails-vite-vue-the-works</a></td>
<td>Vue 3 TypeScript with Vite, Vuex, Vue Router, Sass, and ESLint + Prettier</td>
</tr>
</tbody>
</table>
<h3 id="angular">Angular</h3>
<table>
<thead>
<tr>
<th>SHORT NAME</th>
<th>TEMPLATE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>TAINCER / wails-angular-template</td>
<td><a href="https://github.com/TAINCER/wails-angular-template">https://github.com/TAINCER/wails-angular-template</a></td>
<td>Angular with TypeScript, Sass, Hot-Reload, Code-Splitting and i18n</td>
</tr>
</tbody>
</table>
<h3 id="react">React</h3>
<table>
<thead>
<tr>
<th>SHORT NAME</th>
<th>TEMPLATE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>AlienRecall / wails-react-template</td>
<td><a href="https://github.com/AlienRecall/wails-react-template">https://github.com/AlienRecall/wails-react-template</a></td>
<td>A template using reactjs</td>
</tr>
<tr>
<td>flin7 / wails-react-template</td>
<td><a href="https://github.com/flin7/wails-react-template">https://github.com/flin7/wails-react-template</a></td>
<td>A minimal template for React that supports live development</td>
</tr>
<tr>
<td>LGiki / wails-template-nextjs</td>
<td><a href="https://github.com/LGiki/wails-template-nextjs">https://github.com/LGiki/wails-template-nextjs</a></td>
<td>A template using Next.js and TypeScript</td>
</tr>
</tbody>
</table>
<h3 id="svelte">Svelte</h3>
<table>
<thead>
<tr>
<th>SHORT NAME</th>
<th>TEMPLATE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>raitonoberu / wails-svelte-template</td>
<td><a href="https://github.com/raitonoberu/wails-svelte-template">https://github.com/raitonoberu/wails-svelte-template</a></td>
<td>Svelteを使用したテンプレート</td>
</tr>
<tr>
<td>BillBuilt / wails-vite-svelte-template</td>
<td><a href="https://github.com/BillBuilt/wails-vite-svelte-template">https://github.com/BillBuilt/wails-vite-svelte-template</a></td>
<td>A template using Svelte and Vite</td>
</tr>
<tr>
<td>BillBuilt / wails-vite-svelte-tailwind-template</td>
<td><a href="https://github.com/BillBuilt/wails-vite-svelte-tailwind-template">https://github.com/BillBuilt/wails-vite-svelte-tailwind-template</a></td>
<td>A template using Svelte and Vite with TailwindCSS v3</td>
</tr>
</tbody>
</table>
<h3 id="elm">Elm</h3>
<table>
<thead>
<tr>
<th>SHORT NAME</th>
<th>TEMPLATE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>benjamin-thomas / wails-elm-template</td>
<td><a href="https://github.com/benjamin-thomas/wails-elm-template">https://github.com/benjamin-thomas/wails-elm-template</a></td>
<td>Develop your GUI app with functional programming and a snappy hot-reload setup 🎉 🚀</td>
</tr>
</tbody>
</table>
<h2 id="テスト起動">テスト起動</h2>
<p>うまく行かないときは、
もう一度、yarn</p>
<pre tabindex="0"><code>wails dev
</code></pre><h2 id="ビルド">ビルド</h2>
<pre tabindex="0"><code>wails build 
</code></pre><pre tabindex="0"><code>wails build  -platform &lt;各プラットフォーム&gt;
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails build -platform darwin/universal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails build -platform windows
</span></span></code></pre></div><table>
<thead>
<tr>
<th>Platform</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>darwin</td>
<td>MacOS + architecture of build machine</td>
</tr>
<tr>
<td>darwin/amd64</td>
<td>MacOS 10.13+ AMD64</td>
</tr>
<tr>
<td>darwin/arm64</td>
<td>MacOS 11.0+ ARM64</td>
</tr>
<tr>
<td>darwin/universal</td>
<td>MacOS AMD64+ARM64 universal application</td>
</tr>
<tr>
<td>windows</td>
<td>Windows 10/11 + architecture of build machine</td>
</tr>
<tr>
<td>windows/amd64</td>
<td>Windows 10/11 AMD64</td>
</tr>
<tr>
<td>windows/arm64</td>
<td>Windows 10/11 ARM64</td>
</tr>
<tr>
<td>linux</td>
<td>Linux + architecture of build machine</td>
</tr>
<tr>
<td>linux/amd64</td>
<td>Linux AMD64</td>
</tr>
<tr>
<td>linux/arm64</td>
<td>Linux ARM64</td>
</tr>
</tbody>
</table>
<p>こんな感じかな。</p>

              ]]></content:encoded></item><item><title>iOS(obj-c)の画面遷移</title><link>https://kodawari.info/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</link><pubDate>Thu, 21 Jul 2022 22:16:58 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</guid><description>・コードでの遷移 ・StoryBoardのsegueを使った遷移 ・NavigationControllerを使った遷移 Present [self presentVie</description><content:encoded><![CDATA[
              <p>・コードでの遷移
・StoryBoardのsegueを使った遷移
・NavigationControllerを使った遷移</p>
<h2 id="present">Present</h2>
<pre tabindex="0"><code>[self presentViewController:移動先ViewController animated:YES completion:nil];
</code></pre><h2 id="segue">segue</h2>
<pre tabindex="0"><code>[self performSegueWithIdentifier:@&#34;セグエのID&#34; sender:self];
</code></pre><h2 id="push">Push</h2>
<pre tabindex="0"><code>[self.navigationController pushViewController:移動先ViewController animated:YES];
</code></pre><h2 id="pop">Pop</h2>
<h3 id="指定ビューコントローラーへ">指定ビューコントローラーへ</h3>
<pre tabindex="0"><code>[self.navigationController popToViewController:viewController animated:YES];
</code></pre><h3 id="前の画面に戻る">前の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popViewControllerAnimated:YES];
</code></pre><h3 id="navigationcontrollerの１番目の画面に戻る">NavigationControllerの１番目の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popToRootViewControllerAnimated:YES];
</code></pre><h2 id="storyboard">StoryBoard</h2>
<h4 id="storyboard-id">・StoryBoard ID</h4>
<p>※storyboardファイルで &lsquo;identify → StoryBoard ID&rsquo;の入力が必要</p>
<pre tabindex="0"><code>UIStoryBoard* storyBoard = [UIStoryboard storyboardWithName:@&#34;ストーリボードID&#34; bundle:nil];
UIViewController* viewController = [storyboard instantiateInitialViewController];
</code></pre><h4 id="storyboard-initial-viewcontroller">・StoryBoard initial ViewController</h4>
<p>※storyboardファイルで &lsquo;is initial View Controller&rsquo;のチェックが必要</p>
<pre tabindex="0"><code>UINavigationController* rootNavigationController = [storyboard instantiateInitialViewController];
UIViewController* viewController = [[rootNavigationController viewControllers] lastObject];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)のセグエの戻り(push)</title><link>https://kodawari.info/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</link><pubDate>Thu, 21 Jul 2022 22:14:45 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</guid><description>１つ前の画面に戻る [self.navigationController popViewControllerAnimated:YES]; ルート画面まで一気に戻る [self.navigationController popToRootViewControllerAnimated:YES]; 任意の画面（UIViewController）まで戻る [self.navigationController popToViewController:UIViewController animated:YES];</description><content:encoded><![CDATA[
              <h2 id="１つ前の画面に戻る">１つ前の画面に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[self.navigationController popViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="ルート画面まで一気に戻る">ルート画面まで一気に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToRootViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="任意の画面uiviewcontrollerまで戻る">任意の画面（UIViewController）まで戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToViewController:UIViewController animated:YES];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>iOS(obj-c)で文字列結合</title><link>https://kodawari.info/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</link><pubDate>Thu, 21 Jul 2022 22:12:09 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</guid><description>NSString *urlString =[NSString stringWithFormat:@&amp;#34;%@/test.php&amp;#34;,dns];</description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-ca" data-lang="ca">    NSString *urlString =[NSString stringWithFormat:@&#34;%@/test.php&#34;,dns];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)でgetとPOST</title><link>https://kodawari.info/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</link><pubDate>Thu, 21 Jul 2022 22:09:00 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</guid><description>GET NSString *urlString = [NSString stringWithFormat:@&amp;#34;https://xxxxx.co.jp/test?key1=%@&amp;#34;,key1]; DLog(@&amp;#34;urlString:%@&amp;#34;, urlString) NSURLSession *urlSession; NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration]; sessionConfig.timeoutIntervalForRequest = 5; sessionConfig.timeoutIntervalForResource = 20; // 処理を単純化させるためにdelegateは使用しませんでした。 // UI関連の処理を想定していないた</description><content:encoded><![CDATA[
              <h2 id="get">GET</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxxx.co.jp/test?key1=%@&#34;</span>,key1];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    DLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;YKTHttpClient&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;GET&#34;</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                DLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> CFStringConvertIANACharSetNameToEncoding((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:CFStringConvertEncodingToNSStringEncoding(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                dispatch_async(
</span></span><span style="display:flex;"><span>                                        dispatch_get_main_queue(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                            self.textView.text <span style="color:#f92672">=</span> restoreString;
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div><h2 id="post">POST</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxx.co.jp/test&#34;</span>;
</span></span><span style="display:flex;"><span>    NSDictionary <span style="color:#f92672">*</span>params <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> name,
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;uuid&#34;</span><span style="color:#f92672">:</span> uuid,
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    DLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 連想配列として与えられたパラメータをクエリ文字列に変換する
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSData <span style="color:#f92672">*</span>query <span style="color:#f92672">=</span> [self buildQueryWithDictionary: params];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestUseProtocolCachePolicy];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;iOS&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;POST&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;application/x-www-form-urlencoded&#34;</span>  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Type&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: [NSString stringWithFormat: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%lu&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)[query length]]  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Length&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPBody: query];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                DLog(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> CFStringConvertIANACharSetNameToEncoding((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:CFStringConvertEncodingToNSStringEncoding(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                dispatch_async(
</span></span><span style="display:flex;"><span>                                        dispatch_get_main_queue(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>AndroidでgetとPOST</title><link>https://kodawari.info/posts/android%E3%81%A7get%E3%81%A8post/</link><pubDate>Thu, 21 Jul 2022 22:04:39 +0900</pubDate><guid>https://kodawari.info/posts/android%E3%81%A7get%E3%81%A8post/</guid><description>こんな感じ GET public String getHistoryData(String key1) { HttpURLConnection urlConnection = null; InputStream inputStream = null; String result = &amp;#34;&amp;#34;; String str = &amp;#34;&amp;#34;; try { URL url = new URL(&amp;#34;https://xxxxx.co.jp/test?key1=&amp;#34; + key1); // 接続先URLへのコネクションを開く．まだ接続されていない urlConnection = (HttpURLConnection) url.openConnection(); //</description><content:encoded><![CDATA[
              <p>こんな感じ</p>
<h2 id="get">GET</h2>
<pre tabindex="0"><code class="language-aidl" data-lang="aidl"> public String getHistoryData(String key1) {
        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        String result = &#34;&#34;;
        String str = &#34;&#34;;
        try {
            URL url = new URL(&#34;https://xxxxx.co.jp/test?key1=&#34; + key1);
            // 接続先URLへのコネクションを開く．まだ接続されていない
            urlConnection = (HttpURLConnection) url.openConnection();
            // 接続タイムアウトを設定
            urlConnection.setConnectTimeout(10000);
            // レスポンスデータの読み取りタイムアウトを設定
            urlConnection.setReadTimeout(10000);
            // ヘッダーにUser-Agentを設定
            urlConnection.addRequestProperty(&#34;User-Agent&#34;, &#34;Android&#34;);
            // ヘッダーにAccept-Languageを設定
            urlConnection.addRequestProperty(&#34;Accept-Language&#34;, Locale.getDefault().toString());
            // HTTPメソッドを指定
            urlConnection.setRequestMethod(&#34;GET&#34;);
            //リクエストボディの送信を許可しない
            urlConnection.setDoOutput(false);
            //レスポンスボディの受信を許可する
            urlConnection.setDoInput(true);
            // 通信開始
            urlConnection.connect();
            // レスポンスコードを取得
            int statusCode = urlConnection.getResponseCode();
            // レスポンスコード200は通信に成功したことを表す
            if (statusCode == 200) {
                inputStream = urlConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, &#34;utf-8&#34;));
                // 1行ずつレスポンス結果を取得しstrに追記
                result = bufferedReader.readLine();
                while (result != null) {
                    str += result;
                    result = bufferedReader.readLine();
                }
                bufferedReader.close();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // レスポンス結果のJSONをString型で返す
        return str;
    }
</code></pre><h2 id="post">POST</h2>
<pre tabindex="0"><code class="language-aidl" data-lang="aidl">public String PostUserName(String key1, String key2) {
        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        String result = &#34;&#34;;
        String str = &#34;&#34;;

        try {
            URL url = new URL(&#34;http://hpph;e.cp.jp&#34;&#34;);
            // 接続先URLへのコネクションを開く．まだ接続されていない
            urlConnection = (HttpURLConnection) url.openConnection();
            // 接続タイムアウトを設定
            urlConnection.setConnectTimeout(10000);
            // レスポンスデータの読み取りタイムアウトを設定
            urlConnection.setReadTimeout(10000);
            // ヘッダーにUser-Agentを設定
            urlConnection.addRequestProperty(&#34;User-Agent&#34;, &#34;Android&#34;);
            // ヘッダーにAccept-Languageを設定
            urlConnection.addRequestProperty(&#34;Accept-Language&#34;, Locale.getDefault().toString());
            //ヘッダーにContent-Typeを設定する
            urlConnection.addRequestProperty(&#34;Content-Type&#34;, &#34;application/x-www-form-urlencoded&#34;);
            // HTTPメソッドを指定
            urlConnection.setRequestMethod(&#34;POST&#34;);

            urlConnection.setUseCaches(false);
            //リクエストボディの送信を許可しない
            urlConnection.setDoOutput(true);
            //レスポンスボディの受信を許可する
            urlConnection.setDoInput(true);
            // 通信開始
            urlConnection.connect();


            //ステップ5:リクエストボディの書き出しを行う。
            OutputStream outputStream = urlConnection.getOutputStream();
            Map&lt;String, String&gt; keyValues = new HashMap&lt;&gt;();

            keyValues.put(&#34;key1&#34;, key1);
            keyValues.put(&#34;key2&#34;, key2);


            if (keyValues.size() &gt; 0) {
                Uri.Builder builder = new Uri.Builder();
                //HashMapを[key=value]形式の文字列に変換する
                for (String key : keyValues.keySet()) {
                    //[key=value]形式の文字列に変換する。
                    builder.appendQueryParameter(key, keyValues.get(key));
                }
                //[key=value&amp;key=value…]形式の文字列に変換する。
                String join = builder.build().getEncodedQuery();
                PrintStream ps = new PrintStream(outputStream);
                ps.print(join);
                ps.close();
            }
            outputStream.close();

            // レスポンスコードを取得
            int statusCode = urlConnection.getResponseCode();
            // レスポンスコード200は通信に成功したことを表す
            if (statusCode == 200) {
                inputStream = urlConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
                // 1行ずつレスポンス結果を取得しstrに追記
                result = bufferedReader.readLine();
                while (result != null) {
                    str += result;
                    result = bufferedReader.readLine();
                }
                bufferedReader.close();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // レスポンス結果のJSONをString型で返す
        return str;
    }
</code></pre>
              ]]></content:encoded></item><item><title>Wails v2のテンプレート</title><link>https://kodawari.info/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</link><pubDate>Thu, 21 Jul 2022 22:00:39 +0900</pubDate><guid>https://kodawari.info/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</guid><description>テンプレートの一覧どこにあるんやと思ったら ここにあった（；^ω^） https://wails.io/docs/community/templates/</description><content:encoded><![CDATA[
              <p>テンプレートの一覧どこにあるんやと思ったら</p>
<p>ここにあった（；^ω^）</p>
<p><a href="https://wails.io/docs/community/templates/">https://wails.io/docs/community/templates/</a></p>

              ]]></content:encoded></item><item><title>pemファイルに含まれる証明書の確認方法</title><link>https://kodawari.info/posts/pem%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 12 Jul 2022 14:07:34 +0900</pubDate><guid>https://kodawari.info/posts/pem%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95/</guid><description>以下で、内容が見られます。 openssl x509 -text -fingerprint -noout -in &amp;#34;ファイル名.pem&amp;#34; 実際には、こんな感じです。 $ openssl x509 -text -fingerprint -noout -in &amp;#39;*.xxxxxxxx.xxx.cer&amp;#39; Certificate: Data: Version: 3 (0x2) Serial Number: 26:8c:4f:db:b0:ba:d7:43:45:1b:43:f2:5d:84:9b:85 Signature Algorithm: sha384WithRSAEncryption</description><content:encoded><![CDATA[
              <p>以下で、内容が見られます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>openssl x509 -text -fingerprint -noout -in <span style="color:#e6db74">&#34;ファイル名.pem&#34;</span>
</span></span></code></pre></div><p>実際には、こんな感じです。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ openssl x509 -text -fingerprint -noout -in  <span style="color:#e6db74">&#39;*.xxxxxxxx.xxx.cer&#39;</span>
</span></span><span style="display:flex;"><span>Certificate:
</span></span><span style="display:flex;"><span>    Data:
</span></span><span style="display:flex;"><span>        Version: <span style="color:#ae81ff">3</span> <span style="color:#f92672">(</span>0x2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        Serial Number:
</span></span><span style="display:flex;"><span>            26:8c:4f:db:b0:ba:d7:43:45:1b:43:f2:5d:84:9b:85
</span></span><span style="display:flex;"><span>        Signature Algorithm: sha384WithRSAEncryption
</span></span><span style="display:flex;"><span>        Issuer: C <span style="color:#f92672">=</span> AT, O <span style="color:#f92672">=</span> ZeroSSL, CN <span style="color:#f92672">=</span> ZeroSSL RSA Domain Secure Site CA
</span></span><span style="display:flex;"><span>        Validity
</span></span><span style="display:flex;"><span>            Not Before: May  <span style="color:#ae81ff">5</span> 00:00:00 <span style="color:#ae81ff">2022</span> GMT
</span></span><span style="display:flex;"><span>            Not After : Aug  <span style="color:#ae81ff">3</span> 23:59:59 <span style="color:#ae81ff">2022</span> GMT
</span></span><span style="display:flex;"><span>        Subject: CN <span style="color:#f92672">=</span> *.tama-tan.com
</span></span><span style="display:flex;"><span>        Subject Public Key Info:
</span></span><span style="display:flex;"><span>            Public Key Algorithm: rsaEncryption
</span></span><span style="display:flex;"><span>                RSA Public-Key: <span style="color:#f92672">(</span><span style="color:#ae81ff">2048</span> bit<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                Modulus:
</span></span><span style="display:flex;"><span>                    00:c5:bb:31:b4:41:96:66:e6:ed:47:9e:74:2f:58:
</span></span><span style="display:flex;"><span>                    7a:af:fe:a0:d8:09:06:25:36:99:4f:69:79:71:55:
</span></span><span style="display:flex;"><span>                    --- 省略 ----
</span></span></code></pre></div><p>上記で、Validityの覧を見ると有効期限がわかります。</p>

              ]]></content:encoded></item><item><title>Golangでホットリロードする方法</title><link>https://kodawari.info/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 05 Jul 2022 13:00:04 +0900</pubDate><guid>https://kodawari.info/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>※ 過去に書いた記事を載せています。今動作するかは不明。。。。 今回、Go言語で開発を行うことがありました。 go言語は、PHPやRubyなどの言</description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>今回、Go言語で開発を行うことがありました。</p>
<p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。</p>
<p>そのため、開発中は、毎回ソース変更してはコンパイルをして起動。。。。。。</p>
<p>Vue.JSやDjangoようにホットリロードに対応していません。
めんどくさいですよね。</p>
<p>でも、goには、それを解消してくれるツールがあります。</p>
<p>それが、<a href="https://github.com/cosmtrek/air">Air</a> です。</p>
<p>今回は、標準ライブラリでWebを起動しJsonを返す簡単なサンプルを用意しました。</p>
<h2 id="環境用意">環境用意</h2>
<p>Macで作成しているのでWindowsでするときは、Bashは、適当に置き換えてください。</p>
<p>用意するもの、</p>
<ul>
<li>エディタ</li>
<li>Dockerデスクトップ</li>
</ul>
<p>これだけで動作します。</p>
<h2 id="作成手順">作成手順</h2>
<h3 id="1-フォルダを作成">1) フォルダを作成</h3>
<pre tabindex="0"><code>mkdir -p air_sample &amp;&amp; cd air_sample
</code></pre><h3 id="2--goのファイルを作成">2)  goのファイルを作成</h3>
<p>go.mod</p>
<pre tabindex="0"><code>module air_sample

go 1.17
</code></pre><p>main.go</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;log&#34;
	&#34;net/http&#34;
)

type Response struct {
	Status      int       `json:&#34;status&#34;`
	Message   string    `json:&#34;message&#34;`
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	var buf bytes.Buffer

	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}

	enc := json.NewEncoder(&amp;buf)
	if err := enc.Encode(&amp;response); err != nil {
		log.Fatal(err)
	}
	fmt.Println(buf.String())

	_, err := fmt.Fprint(w, buf.String())
	if err != nil {
		return
	}
}

func main() {
	http.HandleFunc(&#34;/&#34;, rootHandler)
	log.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))
}
</code></pre><h3 id="3--airの設定ファイルの取得">3)  airの設定ファイルの取得</h3>
<pre tabindex="0"><code>wget https://raw.githubusercontent.com/cosmtrek/air/master/air_example.toml
mv air_example.toml .air.toml
</code></pre><h3 id="4--docker関連のファイル作成">4)  Docker関連のファイル作成</h3>
<p>Dockerfile</p>
<pre tabindex="0"><code>FROM golang:1.17-buster

# Time zone
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

RUN apt-get update
RUN apt-get -y install libonig-dev

COPY . /go/src

# Move to project root
WORKDIR /go/src

RUN go mod download

# Install Air (For binary execution)
RUN go get -u github.com/cosmtrek/air

# Start golang app with livereload
CMD [&#34;air&#34;, &#34;-c&#34;, &#34;.air.toml&#34;]

EXPOSE 8080
</code></pre><p>docker-compose.yml</p>
<pre tabindex="0"><code>version: &#34;3&#34;

services:
# ---------------------------------------------------
# gin
# ---------------------------------------------------
  web:
    build:
      context: .
    container_name: web
    volumes:
      - .:/go/src
    ports:
      - 8080:8080
    tty: true
    environment:
      TZ: Asia/Tokyo
</code></pre><h3 id="5--起動用のバッチファイル作成">5)  起動用のバッチファイル作成</h3>
<p>start.sh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>docker-compose stop
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    docker-compose down
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><h2 id="実行">実行</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sh start.sh
</span></span></code></pre></div><p>以下のようになります。</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.06.56.png" alt="スクリーンショット 2021-12-13 午後4.06.56.png"></p>
<h2 id="テスト">テスト</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p>これで実行できます。</p>
<p>実行結果</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.07.28.png" alt="スクリーンショット 2021-12-13 午後4.07.28.png"></p>
<p>ちゃんと動いてます。
そして、以下のように表示されてます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JSON" data-lang="JSON"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;こんにちわ、世界&#34;</span>}
</span></span></code></pre></div><p>ようやくここから本題。</p>
<p>今回用意したファイルは、ややこしいことしてますが、フォルダ内の「main.go」をDockerComposeで見るように工夫しています。
ですので、「main.go」を書き換えると勝手に再コンパイルがされ実行環境に反映されます。</p>
<p>例えば、JSONの戻り値を</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}
</code></pre><p>から</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界,Hallo&#34;,
	}
</code></pre><p>と書き込んでみます。そうすると！！</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.25.png" alt="スクリーンショット 2021-12-13 午後4.08.25.png"></p>
<p>となり再コンパイルされてます。</p>
<p>本当に再コンパイルされているかどうか見て見ましょう。</p>
<p>もう一度curlで実行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.40.png" alt="スクリーンショット 2021-12-13 午後4.08.40.png"></p>
<p>戻り値が変わってますね。
本番環境では、Wireは使うとダメですが、開発環境では重宝しそうです。
Goを使用することがあれば一度やってみませんか</p>
<p>明日は @ya-yamamoto さん、よろしくお願いします！！</p>

              ]]></content:encoded></item><item><title>APIの死活監視をRocketChatに送信する</title><link>https://kodawari.info/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link><pubDate>Tue, 05 Jul 2022 12:15:06 +0900</pubDate><guid>https://kodawari.info/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid><description>※ 過去に書いた記事を載せています。今動作するかは不明。。。。 サーバ監視ツールを作成しようというお話をします。 サーバが本当に動いているかどうか</description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>サーバ監視ツールを作成しようというお話をします。</p>
<p>サーバが本当に動いているかどうかを少し前までは、メールで送信が多かったのですが、
最近は、Slack等のチャットに連絡するような方法が多くなってきているようです。</p>
<p>そこで、RocketChatを使ってサーバが死んでいるときにメッセージを送るツールをGo言語で作ってみようと思います。</p>
<p>Go言語には、サードパーティー製のパッケージ（Golangがあらかじめ用意していないソースのこと）などを
使用せずともある程度組めるようにはなっております。
ですので、1ファイルでコンパイルできプラットフォーム依存のないソースを作成します。
今回もそういう感じで作ったので、WindowsでもMacでもLinuxでも動作すると思います。
(すみません、プロクシは設定しておりません。。。。)</p>
<p>基礎知識は、英語ですが、<a href="https://golang.org/">本家</a>を見て頂くか
<a href="https://go-tour-jp.appspot.com/welcome/1">A Tour of Go</a>や<a href="https://qiita.com/tenntenn/items/0e33a4959250d1a55045">Go言語の初心者が見ると幸せになれる場所</a>を見ていくとわかりやすいです。</p>
<p>※ 時間の関係上細かいところまで説明しておりませんご了承ください。</p>
<h2 id="前準備サーバーの仕様">前準備（サーバーの仕様）</h2>
<p>サーバは簡易的にGo言語で用意します。（解説は面倒なので抜き）</p>
<p>HTTPステータスが正常(200)、異常(500)と、
Jsonのステータスが正常(0),異常(1)を返すものを4種類のAPIを作成しておき、
それによってどう動作するかを確認します。</p>
<p>以下の仕様です</p>
<ul>
<li>http://localhost:3000</li>
<li>引数なしのPOST</li>
<li>response
JSONで以下のように返す</li>
</ul>
<pre tabindex="0"><code>{
  &#34;comment&#34;: コメント,
  &#34;status&#34;: ステータス(0 or -1)
}
</code></pre><ul>
<li>URLは、以下を用意</li>
</ul>
<table>
<thead>
<tr>
<th>URI</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>/test_status_ok_json_status_ok</td>
<td>HTTPステータス 正常・Jsonステータス正常</td>
</tr>
<tr>
<td>/test_status_ok_json_status_ng</td>
<td>HTTPステータス 正常・Jsonステータス異常</td>
</tr>
<tr>
<td>/test_status_ng_json_status_ng</td>
<td>HTTPステータス 異常・Jsonステータス正常</td>
</tr>
<tr>
<td>/test_status_ok_json_status_ok_long_time</td>
<td>HTTPステータス 正常・Jsonステータス正常（responseが遅い）</td>
</tr>
</tbody>
</table>
<p>以下がサンプルソースです。</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;io&#34;
	&#34;log&#34;
	&#34;net/http&#34;
	&#34;time&#34;
)

type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

const rotationTime = 10 * time.Second

const urlTestStatusOkJsonStatusOk = &#34;/test_status_ok_json_status_ok&#34;
const testStatusOkJsonStatusNg = &#34;/test_status_ok_json_status_ng&#34;
const testStatusNgJsonStatusNg = &#34;/test_status_ng_json_status_ng&#34;
const urlTestStatusOkJsonStatusOkLongTime = &#34;/test_status_ok_json_status_ok_long_time&#34;

func commonHandler(w http.ResponseWriter, r *http.Request, resJSON ResponseJSON) {
	body := r.Body
	defer body.Close()

	buf := new(bytes.Buffer)
	io.Copy(buf, body)

	// jsonエンコード
	outputJson, err := json.Marshal(resJSON)

	if err != nil {
		panic(err)
	}

	// jsonヘッダーを出力
	w.Header().Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	// jsonデータを出力
	_, _ = fmt.Fprint(w, string(outputJson))
}

func urlTestStatusOkJsonStatusOkLongTimeHandler(w http.ResponseWriter, r *http.Request) {
	time.Sleep(20 * time.Second)
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok LongTime&#34;,
		Status:  0,
	}
	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusOkHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok&#34;,
		Status:  0,
	}

	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus NG&#34;,
		Status:  -1,
	}

	commonHandler(w, r, resJSON)

}

func testStatusNgJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusInternalServerError)
	resJSON := ResponseJSON{
		Comment: &#34;Status NG JsonStatus NG&#34;,
		Status:  -1,
	}
	commonHandler(w, r, resJSON)
}

func serverSample() {
	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(urlTestStatusOkJsonStatusOk, testStatusOkJsonStatusOkHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ng
	http.HandleFunc(testStatusOkJsonStatusNg, testStatusOkJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(testStatusNgJsonStatusNg, testStatusNgJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ok_long_time
	http.HandleFunc(urlTestStatusOkJsonStatusOkLongTime, urlTestStatusOkJsonStatusOkLongTimeHandler)

	go func() {
		log.Fatal(http.ListenAndServe(&#34;:3000&#34;, nil))
	}()

}

func main() {
	// サンプルサーバー
	serverSample()

	for range time.Tick(rotationTime) {
	}

}
</code></pre><h2 id="ステータス監視">ステータス監視</h2>
<p>前準備で、サーバーを用意しました。
死活監視として何を見るかというと</p>
<ol>
<li>HTTPステータス異常ではないか</li>
<li>レスポンスが異常ではないか</li>
<li>レスポンス応答が遅くないか
この3つを監視します。</li>
</ol>
<h3 id="httpステータスとレスポンスの取得">HTTPステータスとレスポンスの取得</h3>
<p>今回はメッチャ簡単に「http」パッケージを用いて、HTTPステータスとレスポンスを取得します
HTTPステータスが200以外の場合は、エラーを返します。
また、通信で異常があった場合もエラーを返します。
正常の場合のみ、レスポンスを返すようにします。</p>
<p>レスポンス(JSON)の中身は、DataStoreとして構造体に入れてわかりやすく中身を管理します。
「encoding/json」パッケージで簡単に構造体に入れてくれます。</p>
<pre tabindex="0"><code>type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

func validationAPI(urlAddress string, res *ResponseJSON) (int, error) {

	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress,
		nil,
	)

	if err != nil {
		return -1, err
	}

	client := &amp;http.Client{}
	resp, err := client.Do(req)

	// ネットワークエラー
	if err != nil {
		return -1, err
	}

	statusCode := resp.StatusCode

	// httpステータスが正常でなければエラーとする
	if statusCode != 200 {
		return statusCode, errors.New(&#34;ステータスエラー&#34;)
	}

	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)
	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return statusCode, nil
}
</code></pre><h3 id="各ステータスとレスポンス時間を取得">各ステータスとレスポンス時間を取得</h3>
<p>上記で作成した「validationAPI」メソッドは、ステータスやサーバ異常は、エラーと返しますが、
レスポンス中身は、確認していません。また、レスポンス時間なども確認してません。
そういったものを確認するためのルーチンを以下で制御し、エラーであった場合RocketChatに投げます。</p>
<pre tabindex="0"><code>// ステータスチェック
func statusCheck(urlAddress string) {

	responseJSONData := new(ResponseJSON)
    
	// 通信開始時刻取得
	_now := time.Now()
	// 通信開始
	statusCode, err := validationAPI(urlAddress, responseJSONData)
	// 通信終了

	// 開始時刻からの時間を取得
	_duration := (time.Now()).Sub(_now)
		・・・ 省略・・・ 
	_second := _millisecond / 1000

	var message string
	message = urlAddress + &#34;\n&#34;

	if err != nil {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if _second &gt; responseTime {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if responseJSONData.Status !=0 {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else {
		message = message + &#34;--- 問題なし ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
	}
}
</code></pre><p>ここまでをポーリングでまわせば死活監視できます。
さて、エラーをRocketChatに送信する方法です。</p>
<h2 id="rocketchatの送信">RocketChatの送信</h2>
<p>ターゲットのチャットルーム（プライベートユーザー）送信するにはどうしたらいいのか
RocketChatは、APIがきっちり用意されていてすごく簡単です。</p>
<p>メッセージを送信するAPIの仕様 <a href="https://rocket.chat/docs/developer-guides/rest-api/chat/postmessage/">Post a chat message</a>
を見ると
最初の行に「URL」「Requires Auth」「HTTP Method」が表にのっています。
「URL」把握背するところとわかり、「HTTP Method」は、POSTで送信しろと書いており、
「Requires Auth」が必要というようなことが書いております。
つまり、ログインしてる情報をひっつけてこのURLでPOSTすればいいことがわかります。</p>
<p>どうやってポストをするのか。パラメータがいっぱい書いてますけど良くわかりませんよね？（；^ω^）
こういうときはサンプルがどっかに書いてあることが多いです。
「Example Call」と「Example Result」を見ます。
前者は、POSTの仕方が書いてあり、後者はそのresponseですね。
前者の「Example Call」を見ると、
curlでのコマンドが書いてあり、「-H」と「-d」とURLが引数となっています。
「-H」は、送信するヘッダのことで、「X-Auth-Token」と「X-User-Id」と、「Content-type:application/json」と言うのがあります。
「Content-type:application/json」は、送信方法をJSONで送ると言う意味で、
残りの、「X-Auth-Token」と「X-User-Id」は、たぶん、名前の通りで行くと認証の文字列でしょう。
おそらく、どこかで取得したものをここに設定するのだと思います。</p>
<p>っということは、もしかしたらログインの時にこのデータを作成しているのではないかなと推測します。
なので、REST APIで、認証で、ログインで入れるAPIの仕様を見てみましょう。
「<a href="https://rocket.chat/docs/developer-guides/rest-api/authentication/login/">rest-api/authentication/login/</a>」をこれを見ると「Result」の項目を見ると！！
「authToken」というのと「userId」てのがありますね。そう、これが、先ほどの「X-Auth-Token」と「X-User-Id」に入ります。</p>
<p>細かいことは端折りますが、</p>
<ol>
<li>ログインで、「ユーザー」「パスワード」を入れて、POSTする。</li>
<li>レスポンスで、「authToken」と「userId」を取得</li>
<li>Post a chat messageで先ほどの「authToken」と「userId」をヘッダに、書き込むチャンネルと文言を一緒に送信する</li>
<li>メッセージが書き込まれる。</li>
</ol>
<p>てな具合です。簡単でしょ？</p>
<p>「HTTPステータスとレスポンスの取得」で作成した「validationAPI」に、
パラメータとヘッダーの設定し、送信するれば良いだけです。</p>
<p>これで、大体の作り方がわかったはずです。</p>
<pre tabindex="0"><code>
/*
	RocketChatログイン
*/
func RocketChatLogin(urlAddress string, userName string, password string, res *RocketChatLoginResponse) error {
	jsonParam := RocketChatLoginParam{
		User:     userName,
		Password: password,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/login&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)

	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return nil
}

/*
	RocketChatログイン
*/
func RocketChatPostMessage(urlAddress string, authToken string, userId string, chatRoom string, message string) error {
	jsonParam := RocketChatPostMessageParam{
		Channel: chatRoom,
		Message: message,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/chat.postMessage&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	req.Header.Set(&#34;X-User-Id&#34;, userId)
	req.Header.Set(&#34;X-Auth-Token&#34;, authToken)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}
</code></pre><h2 id="最後に">最後に</h2>
<p>なんか説明してなく、ソースをあげているだけのような気がしていてしょうがないですが、(;￣ー￣A アセアセ・・・
よしとしてください。。。。
あと、Go言語好きな人集まりが出来たら良いなぁって最近は思ってます。。。。。</p>
<p>※ 端折って書いたりしておりますので実際のサンプルサーバと監視ツールを合体したソースを<a href="https://gist.github.com/tama-jp/175aa45d0d129568329168504a9e228f">Gist</a>にあげておきます。</p>

              ]]></content:encoded></item><item><title>GORMでtime型をするときの注意</title><link>https://kodawari.info/posts/gorm%E3%81%A7time%E5%9E%8B%E3%82%92%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Thu, 30 Jun 2022 19:41:20 +0900</pubDate><guid>https://kodawari.info/posts/gorm%E3%81%A7time%E5%9E%8B%E3%82%92%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>GORMでtime型をするときの注意 GORMで構造体をマイグレーションしたときに 以下のようにしてもtime型にはならなかった、、、 type test struct { BreakTime</description><content:encoded><![CDATA[
              <h1 id="gormでtime型をするときの注意">GORMでtime型をするときの注意</h1>
<p>GORMで構造体をマイグレーションしたときに
以下のようにしてもtime型にはならなかった、、、</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">test</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">BreakTime</span>                  <span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>               <span style="color:#e6db74">`gorm:&#34;type:time;comment:休憩時間&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>↓ マイグレすると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> test
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    break_time                   <span style="color:#66d9ef">timestamp</span> <span style="color:#66d9ef">with</span> time <span style="color:#66d9ef">zone</span>,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>となった、</p>
<p>どうも、「time」のあとにスペースを入れれば解決するみたい。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">test</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">BreakTime</span>                  <span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>               <span style="color:#e6db74">`gorm:&#34;type:time ;comment:休憩時間&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>↓ マイグレすると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> test
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    break_time                   time,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>時間がかかったけどこんな事があるのだと。。。。。</p>

              ]]></content:encoded></item><item><title>時間の取り扱い方</title><link>https://kodawari.info/posts/%E6%99%82%E9%96%93%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E6%96%B9/</link><pubDate>Thu, 30 Jun 2022 11:56:12 +0900</pubDate><guid>https://kodawari.info/posts/%E6%99%82%E9%96%93%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E6%96%B9/</guid><description>time型を取得する time.Time型の変数を取得する方法。 現在時刻から取得する fmt.Println(time.Now()) // Output: // 2009-11-10 23:00:00 +0000 UTC 日付から取得する fmt.Println(time.Date(2014, time.December, 31, 12, 13, 24, 0, time.UTC)) // Output: // 2014-12-31 12:13:24</description><content:encoded><![CDATA[
              <h1 id="time型を取得する">time型を取得する</h1>
<p><code>time.Time型</code>の変数を取得する方法。</p>
<h2 id="現在時刻から取得する">現在時刻から取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output: 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2009-11-10 23:00:00 +0000 UTC
</span></span></span></code></pre></div><h2 id="日付から取得する">日付から取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">December</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">UTC</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-31 12:13:24 +0000 UTC
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-31 08:04:18 +0900 JST
</span></span></span></code></pre></div><h2 id="文字列から取得する">文字列から取得する</h2>
<pre tabindex="0"><code>t, _ := time.Parse(&#34;2006-01-02&#34;, &#34;2014-12-31&#34;)
fmt.Println(t)
// Output:
// 2014-12-31 00:00:00 +0000 UTC
</code></pre><pre tabindex="0"><code>t, _ := time.Parse(&#34;2006-01-02 15:04:05 MST&#34;, &#34;2014-12-31 12:31:24 JST&#34;)
fmt.Println(t)
// Output:
// 2014-12-31 12:31:24 +0900 JST
</code></pre><h2 id="unix-timestampから変換">Unix TimeStampから変換</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Unix</span>(<span style="color:#ae81ff">1419933529</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-30 09:58:49 +0000 UTC
</span></span></span></code></pre></div><p>第2引数でナノ秒を指定できる。</p>
<h1 id="時刻の編集">時刻の編集</h1>
<p>時刻の操作や差分を確認する場合、Duration型を取り扱うことになる。中身はint64。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Duration</span> <span style="color:#66d9ef">int64</span>
</span></span></code></pre></div><p>明示的にDuration型を使うことによって、時刻操作していることをわかりやすくできる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span>))               <span style="color:#75715e">// int
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)) <span style="color:#75715e">// time.Duration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>))   <span style="color:#75715e">// time.Duration
</span></span></span></code></pre></div><h2 id="後の時刻を取得する">○○後の時刻を取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>) <span style="color:#75715e">// 1分後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)              <span style="color:#75715e">// 2014-12-20 00:01:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1時間後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)            <span style="color:#75715e">// 2014-12-20 01:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1日後 (time.Dayは標準には無い)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)             <span style="color:#75715e">// 2014-12-21 00:00:00 +0900 JST
</span></span></span></code></pre></div><p>1日後の場合は<code>time.AddDate()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>) <span style="color:#75715e">// 1日後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)          <span style="color:#75715e">// 2014-12-21 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1ヶ月後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)          <span style="color:#75715e">// 2015-01-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1年後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)          <span style="color:#75715e">// 2015-12-20 00:00:00 +0900 JST
</span></span></span></code></pre></div><h2 id="前の時刻を取得する">○○前の時刻を取得する</h2>
<p><code>time.Add()</code>に-を入れられる</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>) <span style="color:#75715e">// 1分前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)           <span style="color:#75715e">// 2014-12-19 23:59:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1時間前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)         <span style="color:#75715e">// 2014-12-19 23:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1日前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)              <span style="color:#75715e">// 2014-12-19 00:00:00 +0900 JST
</span></span></span></code></pre></div><p><code>time.AddDate()</code>でマイナスを入れれば過去になる</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#75715e">// 1日前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)           <span style="color:#75715e">// 2014-12-19 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1ヶ月前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)           <span style="color:#75715e">// 2014-11-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1年前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)           <span style="color:#75715e">// 2013-12-20 00:00:00 +0900 JST
</span></span></span></code></pre></div><h2 id="2つの時刻を比較する">2つの時刻を比較する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">t1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t1</span>) <span style="color:#75715e">// 2014-12-20 12:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t1</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">t2</span>)) <span style="color:#75715e">// 12h0m0s
</span></span></span></code></pre></div><h2 id="現在時刻からどれだけ前か調べる">現在時刻からどれだけ前か調べる</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2009</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">d</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">t1</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">d</span>) <span style="color:#75715e">// 72h0m0s (Go Playgroundで実行した場合)
</span></span></span></code></pre></div><p><code>time.Since(t)</code>は<code>time.Now().Sub(t)</code>の省略形。</p>

              ]]></content:encoded></item><item><title>UIButtonの文字の設定</title><link>https://kodawari.info/posts/uibutton%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E8%A8%AD%E5%AE%9A/</link><pubDate>Thu, 30 Jun 2022 09:54:44 +0900</pubDate><guid>https://kodawari.info/posts/uibutton%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E8%A8%AD%E5%AE%9A/</guid><description>UIButtonの文字の設定 ボタンの設定 UIButton をコード上で使用することで、ボタンを追加することができます。 追加する時に、各状態になった場合のボタ</description><content:encoded><![CDATA[
              <h1 id="uibuttonの文字の設定">UIButtonの文字の設定</h1>
<h2 id="ボタンの設定">ボタンの設定</h2>
<p>UIButton をコード上で使用することで、ボタンを追加することができます。
追加する時に、各状態になった場合のボタンのタイトル、色などを指定することができます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//ボタンの宣言
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>UIButton <span style="color:#f92672">*</span>button <span style="color:#f92672">=</span> [[UIButton alloc]init];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　通常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;ボタン&#34;</span> forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　押下中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;押下中&#34;</span> forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　選択中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;選択中&#34;</span> forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　無効中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;無効&#34;</span> forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//フォントサイズ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.titleLabel setFont:[UIFont systemFontOfSize:<span style="color:#ae81ff">30</span>]];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//背景色
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setBackgroundColor:[UIColor redColor]];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//画面に追加
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[self.view addSubview:button];
</span></span></code></pre></div><h2 id="枠線の設定">枠線の設定</h2>
<p>枠線の色は setBorderColor 、枠線の太さは setBorderWidth 、角丸の丸みは setCornerRadius 、
で指定するができます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//枠線の色
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setBorderColor:[UIColor blackColor].CGColor];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//枠線の太さ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setBorderWidth:<span style="color:#ae81ff">2.0</span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//角丸の指定
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setCornerRadius:<span style="color:#ae81ff">5.0</span>];
</span></span></code></pre></div><h2 id="押下時の動作">押下時の動作</h2>
<p>ボタンを選択した時の動作を追加する場合、 -(void)関数名:(UIButton *)button で動作を指定して、
ボタン追加時に addTarget で関数を指定する必要あります。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//押下時の動作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button addTarget:self action:<span style="color:#960050;background-color:#1e0010">@</span>selector(button_select:) forControlEvents:UIControlEventTouchUpInside];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span>(<span style="color:#66d9ef">void</span>)button_select:(UIButton <span style="color:#f92672">*</span>)button {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//ボタンを選択中に変更する。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    button.selected <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//ボタンを無効中に変更する
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    button.enabled <span style="color:#f92672">=</span> false;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="大きさなどの変更">大きさなどの変更</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>    CGRect frame2 <span style="color:#f92672">=</span> CGRectMake(_overlayView.frame.size.width <span style="color:#f92672">-</span> <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">40</span>);
</span></span><span style="display:flex;"><span>    self.closeButton.frame <span style="color:#f92672">=</span> frame2;
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>goプロジェクトを自動でUML図に出力するツール</title><link>https://kodawari.info/posts/go%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7uml%E5%9B%B3%E3%81%AB%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB/</link><pubDate>Tue, 21 Jun 2022 18:20:23 +0900</pubDate><guid>https://kodawari.info/posts/go%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7uml%E5%9B%B3%E3%81%AB%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB/</guid><description>go言語のプロジェクトを可視化したいと思いPlantUMLで自動で出来たらなと。 2つ見つけました。 goplantumlとgoumlです。 前者</description><content:encoded><![CDATA[
              <p>go言語のプロジェクトを可視化したいと思いPlantUMLで自動で出来たらなと。</p>
<p>2つ見つけました。</p>
<p><a href="https://github.com/jfeliu007/goplantuml">goplantuml</a>と<a href="https://github.com/kazukousen/gouml">gouml</a>です。</p>
<p>前者の<a href="https://github.com/jfeliu007/goplantuml">goplantuml</a>は、
結構有名でよく紹介されており、メンテが数ヶ月前にされているようです。</p>
<p>後者の<a href="https://github.com/kazukousen/gouml">gouml</a>と言うものですが、数年前から開発がとまっていて、</p>
<p>goのver1.18でコンパイルして実行してみると表示が出来ない部分があったので、</p>
<p>それで、最新のモジュールに差し替えて、みました。
<a href="https://github.com/tama-jp/gouml">こちら</a>にあります。</p>
<p>Macなら以下で動くと思います。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://github.com/tama-jp/gouml.git
</span></span><span style="display:flex;"><span>cd gouml/cmd/gouml
</span></span><span style="display:flex;"><span>go build -o /usr/local/bin/gouml main.go
</span></span><span style="display:flex;"><span>gouml --version 
</span></span></code></pre></div><p>このふたつのツールを<a href="https://github.com/sue445/plant_erd">plant_erd</a>という、データベースをplantumlでER図を生成するソースを試しにしてみました。</p>
<p>goplantuml
<img src="../img/2022-06-21-sample.png" alt="2022-06-21-sample.png"></p>
<p>gouml
<img src="../img/2022-06-21-file.png" alt="2022-06-21-file.png"></p>
<p>でかたが違う。。。。(´ヘ｀;)　う〜ん・・・。どちらがいいのかがわかりません。</p>
<p>ただ、goumlは、戻り値にメソッドが使われたときの軌跡はわかるので、個人的にはこっちがいいと感じますが。。。。</p>
<p>皆さんどうしてるんだろ。。。。．</p>

              ]]></content:encoded></item><item><title>時刻ではまった</title><link>https://kodawari.info/posts/2022-06-07-00-19-49-time/</link><pubDate>Tue, 07 Jun 2022 00:19:50 +0000</pubDate><guid>https://kodawari.info/posts/2022-06-07-00-19-49-time/</guid><description>時刻ではまった。。。。 文字列をtime型にしてからunixtimeに入れようとしたら、 timeStr := &amp;#34;2022-06-07 09:00:00&amp;#34; layout := &amp;#34;2006-01-02 15:04:05&amp;#34; timeData, _ = time.Parse(layout, timeStr) fmt.Println(timeData.Unix()) # =&amp;gt; 1654592400 タイムゾーンが、日本</description><content:encoded><![CDATA[
              <p>時刻ではまった。。。。
文字列をtime型にしてからunixtimeに入れようとしたら、</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#a6e22e">timeStr</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2022-06-07 09:00:00&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">layout</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2006-01-02 15:04:05&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeData</span>, <span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">layout</span>, <span style="color:#a6e22e">timeStr</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">timeData</span>.<span style="color:#a6e22e">Unix</span>()) <span style="color:#960050;background-color:#1e0010">#</span> =&gt; <span style="color:#ae81ff">1654592400</span>
</span></span></code></pre></div><p>タイムゾーンが、日本に設定してないので、UTCになっているみたい。
time.Parseを使用せずに、locationを設定できるtime.ParseInLocationを使用するとうまく行く。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#a6e22e">timeStr</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2022-06-07 09:00:00&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">layout</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2006-01-02 15:04:05&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tz</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeData</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">ParseInLocation</span>(<span style="color:#a6e22e">layout</span>, <span style="color:#a6e22e">str</span>, <span style="color:#a6e22e">tz</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">timeData</span>.<span style="color:#a6e22e">Unix</span>()) <span style="color:#960050;background-color:#1e0010">#</span> =&gt; <span style="color:#ae81ff">1654562457</span>
</span></span></code></pre></div><p>適当に作った関数のおかげで悩んでもうた。。。。。(・∀・)</p>

              ]]></content:encoded></item><item><title>HUGO便利スクリプト</title><link>https://kodawari.info/posts/hugo%E4%BE%BF%E5%88%A9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Mon, 06 Jun 2022 14:28:28 +0900</pubDate><guid>https://kodawari.info/posts/hugo%E4%BE%BF%E5%88%A9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>HUGOの使い方がようやくわかってきて、今必死ですw コンテントを作成する時 hugo new post/なんたらー.md って、書かなきゃならなく、中身もちょ</description><content:encoded><![CDATA[
              <p>HUGOの使い方がようやくわかってきて、今必死ですw</p>
<p>コンテントを作成する時</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo new post/なんたらー.md
</span></span></code></pre></div><p>って、書かなきゃならなく、中身もちょびちょび書き直さなければならない。
これって面倒ですね。</p>
<p>っで、下のサイトの方がスクリプトを書いてました。便利便利♪</p>
<p><a href="https://techblog.sgr-ksmt.dev/2016/02/05/hugo_new_post/">https://techblog.sgr-ksmt.dev/2016/02/05/hugo_new_post/</a></p>
<ul>
<li>
<p>毎回post/と付けるのを省きたい</p>
</li>
<li>
<p>markdownファイル名の前に日付を付けたい</p>
</li>
</ul>
<p>ホント助かりました。</p>
<p>ただ、記事が古いのか「設定」などが「=」で書かれていてうまく動かなかったので、
直して使ってます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>set -u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>usage<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;Usage : </span>$0<span style="color:#e6db74"> [-w] [title_name]&#34;</span> 1&gt;&amp;<span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>main <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  cd <span style="color:#66d9ef">$(</span>cd <span style="color:#66d9ef">$(</span>dirname $0<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> pwd<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>  OPEN_EDITOR<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ARG; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$ARG<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>      -*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> getopts w OPT <span style="color:#e6db74">&#34;</span>$ARG<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$OPT<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>          w<span style="color:#f92672">)</span> OPEN_EDITOR<span style="color:#f92672">=</span>1;;
</span></span><span style="display:flex;"><span>          *<span style="color:#f92672">)</span> usage; exit 1;;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>      ;;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  shift <span style="color:#66d9ef">$(</span>expr $OPTIND - 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span> $# -ne <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> usage <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  slug<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  file_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;posts/</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%Y-%m-%d-%H-%M-%S&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">-</span><span style="color:#e6db74">${</span>slug<span style="color:#e6db74">}</span><span style="color:#e6db74">.md&#34;</span>
</span></span><span style="display:flex;"><span>  file_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content/</span>$file_name<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -e <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    hugo new <span style="color:#e6db74">&#34;</span>$file_name<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    sed -i <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#e6db74">&#34;s/title: \&#34;.*\&#34;/title: \&#34;</span>$slug<span style="color:#e6db74">\&#34;/g&#34;</span> <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    sed -i <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#e6db74">&#34;s/slug: \&#34;.*\&#34;/slug: \&#34;</span>$slug<span style="color:#e6db74">\&#34;/g&#34;</span> <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$file_name<span style="color:#e6db74"> already exists.&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span> $OPEN_EDITOR -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> atom <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>main <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>HUGOのインストール</title><link>https://kodawari.info/posts/hugo%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link><pubDate>Mon, 06 Jun 2022 14:28:23 +0900</pubDate><guid>https://kodawari.info/posts/hugo%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid><description>ほぼここを見ればすぐできます。 これに、私は、テーマをMainroadにしました。</description><content:encoded><![CDATA[
              <p>ほぼ<a href="https://gohugo.io/getting-started/quick-start/">ここ</a>を見ればすぐできます。</p>
<p>これに、私は、テーマを<a href="https://github.com/Vimux/Mainroad">Mainroad</a>にしました。</p>

              ]]></content:encoded></item></channel></rss>