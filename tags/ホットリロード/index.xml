<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ホットリロード on Ko-Da-Wa-Ri</title><link>https://example.org/tags/%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89/</link><description>Recent content in ホットリロード on Ko-Da-Wa-Ri</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 05 Jul 2022 13:00:04 +0900</lastBuildDate><atom:link href="https://example.org/tags/%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89/index.xml" rel="self" type="application/rss+xml"/><item><title>Golangでホットリロードする方法</title><link>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 05 Jul 2022 13:00:04 +0900</pubDate><guid>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>今回、Go言語で開発を行うことがありました。&lt;/p>
&lt;p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>今回、Go言語で開発を行うことがありました。</p>
<p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。</p>
<p>そのため、開発中は、毎回ソース変更してはコンパイルをして起動。。。。。。</p>
<p>Vue.JSやDjangoようにホットリロードに対応していません。
めんどくさいですよね。</p>
<p>でも、goには、それを解消してくれるツールがあります。</p>
<p>それが、<a href="https://github.com/cosmtrek/air">Air</a> です。</p>
<p>今回は、標準ライブラリでWebを起動しJsonを返す簡単なサンプルを用意しました。</p>
<h2 id="環境用意">環境用意</h2>
<p>Macで作成しているのでWindowsでするときは、Bashは、適当に置き換えてください。</p>
<p>用意するもの、</p>
<ul>
<li>エディタ</li>
<li>Dockerデスクトップ</li>
</ul>
<p>これだけで動作します。</p>
<h2 id="作成手順">作成手順</h2>
<h3 id="1-フォルダを作成">1) フォルダを作成</h3>
<pre tabindex="0"><code>mkdir -p air_sample &amp;&amp; cd air_sample
</code></pre><h3 id="2--goのファイルを作成">2)  goのファイルを作成</h3>
<p>go.mod</p>
<pre tabindex="0"><code>module air_sample

go 1.17
</code></pre><p>main.go</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;log&#34;
	&#34;net/http&#34;
)

type Response struct {
	Status      int       `json:&#34;status&#34;`
	Message   string    `json:&#34;message&#34;`
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	var buf bytes.Buffer

	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}

	enc := json.NewEncoder(&amp;buf)
	if err := enc.Encode(&amp;response); err != nil {
		log.Fatal(err)
	}
	fmt.Println(buf.String())

	_, err := fmt.Fprint(w, buf.String())
	if err != nil {
		return
	}
}

func main() {
	http.HandleFunc(&#34;/&#34;, rootHandler)
	log.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))
}
</code></pre><h3 id="3--airの設定ファイルの取得">3)  airの設定ファイルの取得</h3>
<pre tabindex="0"><code>wget https://raw.githubusercontent.com/cosmtrek/air/master/air_example.toml
mv air_example.toml .air.toml
</code></pre><h3 id="4--docker関連のファイル作成">4)  Docker関連のファイル作成</h3>
<p>Dockerfile</p>
<pre tabindex="0"><code>FROM golang:1.17-buster

# Time zone
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

RUN apt-get update
RUN apt-get -y install libonig-dev

COPY . /go/src

# Move to project root
WORKDIR /go/src

RUN go mod download

# Install Air (For binary execution)
RUN go get -u github.com/cosmtrek/air

# Start golang app with livereload
CMD [&#34;air&#34;, &#34;-c&#34;, &#34;.air.toml&#34;]

EXPOSE 8080
</code></pre><p>docker-compose.yml</p>
<pre tabindex="0"><code>version: &#34;3&#34;

services:
# ---------------------------------------------------
# gin
# ---------------------------------------------------
  web:
    build:
      context: .
    container_name: web
    volumes:
      - .:/go/src
    ports:
      - 8080:8080
    tty: true
    environment:
      TZ: Asia/Tokyo
</code></pre><h3 id="5--起動用のバッチファイル作成">5)  起動用のバッチファイル作成</h3>
<p>start.sh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>docker-compose stop
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    docker-compose down
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><h2 id="実行">実行</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sh start.sh
</span></span></code></pre></div><p>以下のようになります。</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.06.56.png" alt="スクリーンショット 2021-12-13 午後4.06.56.png"></p>
<h2 id="テスト">テスト</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p>これで実行できます。</p>
<p>実行結果</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.07.28.png" alt="スクリーンショット 2021-12-13 午後4.07.28.png"></p>
<p>ちゃんと動いてます。
そして、以下のように表示されてます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JSON" data-lang="JSON"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;こんにちわ、世界&#34;</span>}
</span></span></code></pre></div><p>ようやくここから本題。</p>
<p>今回用意したファイルは、ややこしいことしてますが、フォルダ内の「main.go」をDockerComposeで見るように工夫しています。
ですので、「main.go」を書き換えると勝手に再コンパイルがされ実行環境に反映されます。</p>
<p>例えば、JSONの戻り値を</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}
</code></pre><p>から</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界,Hallo&#34;,
	}
</code></pre><p>と書き込んでみます。そうすると！！</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.25.png" alt="スクリーンショット 2021-12-13 午後4.08.25.png"></p>
<p>となり再コンパイルされてます。</p>
<p>本当に再コンパイルされているかどうか見て見ましょう。</p>
<p>もう一度curlで実行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.40.png" alt="スクリーンショット 2021-12-13 午後4.08.40.png"></p>
<p>戻り値が変わってますね。
本番環境では、Wireは使うとダメですが、開発環境では重宝しそうです。
Goを使用することがあれば一度やってみませんか</p>
<p>明日は @ya-yamamoto さん、よろしくお願いします！！</p>

              ]]></content:encoded></item></channel></rss>