<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Objective-C on Ko-Da-Wa-Ri</title><link>https://kodawari.info/tags/objective-c/</link><description>Recent content in Objective-C on Ko-Da-Wa-Ri</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 16 May 2024 08:15:34 +0900</lastBuildDate><atom:link href="https://kodawari.info/tags/objective-c/index.xml" rel="self" type="application/rss+xml"/><item><title>2024 05 16 08 15 33 Dispatch</title><link>https://kodawari.info/posts/2024-05-16-08-15-33-dispatch/</link><pubDate>Thu, 16 May 2024 08:15:34 +0900</pubDate><guid>https://kodawari.info/posts/2024-05-16-08-15-33-dispatch/</guid><description>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ // バックグランドでAPIなどを実行 }); dispatch_async(dispatch_get_main_queue(), ^{ // メインスレッドで処理をしたい内容、UIを変更など。 }); dispatch_sync(dispatch_queue_create(&amp;#34;test_sample&amp;#34;, DISPATCH_QUEUE_SERIAL), ^{ // 同期処理 });</description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-objective_c" data-lang="objective_c">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // バックグランドでAPIなどを実行
});

dispatch_async(dispatch_get_main_queue(), ^{
    // メインスレッドで処理をしたい内容、UIを変更など。
});


dispatch_sync(dispatch_queue_create(&#34;test_sample&#34;, DISPATCH_QUEUE_SERIAL), ^{
    // 同期処理
});
</code></pre>
              ]]></content:encoded></item><item><title>2024 05 16 07 55 58 遅延処理</title><link>https://kodawari.info/posts/2024-05-16-07-55-58-%E9%81%85%E5%BB%B6%E5%87%A6%E7%90%86/</link><pubDate>Thu, 16 May 2024 07:55:58 +0900</pubDate><guid>https://kodawari.info/posts/2024-05-16-07-55-58-%E9%81%85%E5%BB%B6%E5%87%A6%E7%90%86/</guid><description>dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1.0 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{ // 処理内容 }); - (void)doAfterDelay{ // 処理内容 } [self performSelector:@selector(doAfterDelay) withObject:nil afterDelay:1];</description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-objective_c" data-lang="objective_c">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1.0 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
    // 処理内容
});
</code></pre><pre tabindex="0"><code class="language-objective_c" data-lang="objective_c"> - (void)doAfterDelay{
   // 処理内容
 }
 [self performSelector:@selector(doAfterDelay) withObject:nil afterDelay:1];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)の画面遷移</title><link>https://kodawari.info/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</link><pubDate>Thu, 21 Jul 2022 22:16:58 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</guid><description>・コードでの遷移 ・StoryBoardのsegueを使った遷移 ・NavigationControllerを使った遷移 Present [self presentVie</description><content:encoded><![CDATA[
              <p>・コードでの遷移
・StoryBoardのsegueを使った遷移
・NavigationControllerを使った遷移</p>
<h2 id="present">Present</h2>
<pre tabindex="0"><code>[self presentViewController:移動先ViewController animated:YES completion:nil];
</code></pre><h2 id="segue">segue</h2>
<pre tabindex="0"><code>[self performSegueWithIdentifier:@&#34;セグエのID&#34; sender:self];
</code></pre><h2 id="push">Push</h2>
<pre tabindex="0"><code>[self.navigationController pushViewController:移動先ViewController animated:YES];
</code></pre><h2 id="pop">Pop</h2>
<h3 id="指定ビューコントローラーへ">指定ビューコントローラーへ</h3>
<pre tabindex="0"><code>[self.navigationController popToViewController:viewController animated:YES];
</code></pre><h3 id="前の画面に戻る">前の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popViewControllerAnimated:YES];
</code></pre><h3 id="navigationcontrollerの１番目の画面に戻る">NavigationControllerの１番目の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popToRootViewControllerAnimated:YES];
</code></pre><h2 id="storyboard">StoryBoard</h2>
<h4 id="storyboard-id">・StoryBoard ID</h4>
<p>※storyboardファイルで &lsquo;identify → StoryBoard ID&rsquo;の入力が必要</p>
<pre tabindex="0"><code>UIStoryBoard* storyBoard = [UIStoryboard storyboardWithName:@&#34;ストーリボードID&#34; bundle:nil];
UIViewController* viewController = [storyboard instantiateInitialViewController];
</code></pre><h4 id="storyboard-initial-viewcontroller">・StoryBoard initial ViewController</h4>
<p>※storyboardファイルで &lsquo;is initial View Controller&rsquo;のチェックが必要</p>
<pre tabindex="0"><code>UINavigationController* rootNavigationController = [storyboard instantiateInitialViewController];
UIViewController* viewController = [[rootNavigationController viewControllers] lastObject];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)のセグエの戻り(push)</title><link>https://kodawari.info/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</link><pubDate>Thu, 21 Jul 2022 22:14:45 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</guid><description>１つ前の画面に戻る [self.navigationController popViewControllerAnimated:YES]; ルート画面まで一気に戻る [self.navigationController popToRootViewControllerAnimated:YES]; 任意の画面（UIViewController）まで戻る [self.navigationController popToViewController:UIViewController animated:YES];</description><content:encoded><![CDATA[
              <h2 id="１つ前の画面に戻る">１つ前の画面に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[self.navigationController popViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="ルート画面まで一気に戻る">ルート画面まで一気に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToRootViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="任意の画面uiviewcontrollerまで戻る">任意の画面（UIViewController）まで戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToViewController:UIViewController animated:YES];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>iOS(obj-c)で文字列結合</title><link>https://kodawari.info/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</link><pubDate>Thu, 21 Jul 2022 22:12:09 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</guid><description>NSString *urlString =[NSString stringWithFormat:@&amp;#34;%@/test.php&amp;#34;,dns];</description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-ca" data-lang="ca">    NSString *urlString =[NSString stringWithFormat:@&#34;%@/test.php&#34;,dns];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)でgetとPOST</title><link>https://kodawari.info/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</link><pubDate>Thu, 21 Jul 2022 22:09:00 +0900</pubDate><guid>https://kodawari.info/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</guid><description>GET NSString *urlString = [NSString stringWithFormat:@&amp;#34;https://xxxxx.co.jp/test?key1=%@&amp;#34;,key1]; DLog(@&amp;#34;urlString:%@&amp;#34;, urlString) NSURLSession *urlSession; NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration]; sessionConfig.timeoutIntervalForRequest = 5; sessionConfig.timeoutIntervalForResource = 20; // 処理を単純化させるためにdelegateは使用しませんでした。 // UI関連の処理を想定していないた</description><content:encoded><![CDATA[
              <h2 id="get">GET</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxxx.co.jp/test?key1=%@&#34;</span>,key1];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NSLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;YKTHttpClient&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;GET&#34;</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> <span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding</span>((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:<span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding</span>(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">dispatch_async</span>(
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">dispatch_get_main_queue</span>(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                            self.textView.text <span style="color:#f92672">=</span> restoreString;
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div><h2 id="post">POST</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxx.co.jp/test&#34;</span>;
</span></span><span style="display:flex;"><span>    NSDictionary <span style="color:#f92672">*</span>params <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> name,
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;uuid&#34;</span><span style="color:#f92672">:</span> uuid,
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 連想配列として与えられたパラメータをクエリ文字列に変換する
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSData <span style="color:#f92672">*</span>query <span style="color:#f92672">=</span> [self buildQueryWithDictionary: params];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NSLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestUseProtocolCachePolicy];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;iOS&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;POST&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;application/x-www-form-urlencoded&#34;</span>  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Type&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: [NSString stringWithFormat: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%lu&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)[query length]]  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Length&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPBody: query];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> <span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding</span>((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:<span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding</span>(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">dispatch_async</span>(
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">dispatch_get_main_queue</span>(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>UIButtonの文字の設定</title><link>https://kodawari.info/posts/uibutton%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E8%A8%AD%E5%AE%9A/</link><pubDate>Thu, 30 Jun 2022 09:54:44 +0900</pubDate><guid>https://kodawari.info/posts/uibutton%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E8%A8%AD%E5%AE%9A/</guid><description>UIButtonの文字の設定 ボタンの設定 UIButton をコード上で使用することで、ボタンを追加することができます。 追加する時に、各状態になった場合のボタ</description><content:encoded><![CDATA[
              <h1 id="uibuttonの文字の設定">UIButtonの文字の設定</h1>
<h2 id="ボタンの設定">ボタンの設定</h2>
<p>UIButton をコード上で使用することで、ボタンを追加することができます。
追加する時に、各状態になった場合のボタンのタイトル、色などを指定することができます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//ボタンの宣言
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>UIButton <span style="color:#f92672">*</span>button <span style="color:#f92672">=</span> [[UIButton alloc]init];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　通常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;ボタン&#34;</span> forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateNormal];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　押下中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;押下中&#34;</span> forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateHighlighted];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　選択中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;選択中&#34;</span> forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateSelected];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//タイトル・テキスト色・画像　無効中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setTitle:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;無効&#34;</span> forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>[button setTitleColor:[UIColor blackColor] forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>[button setImage:[UIImage imageNamed:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;image&#34;</span>] forState:UIControlStateDisabled];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//フォントサイズ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.titleLabel setFont:[UIFont systemFontOfSize:<span style="color:#ae81ff">30</span>]];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//背景色
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button setBackgroundColor:[UIColor redColor]];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//画面に追加
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[self.view addSubview:button];
</span></span></code></pre></div><h2 id="枠線の設定">枠線の設定</h2>
<p>枠線の色は setBorderColor 、枠線の太さは setBorderWidth 、角丸の丸みは setCornerRadius 、
で指定するができます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//枠線の色
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setBorderColor:[UIColor blackColor].CGColor];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//枠線の太さ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setBorderWidth:<span style="color:#ae81ff">2.0</span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">//角丸の指定
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button.layer setCornerRadius:<span style="color:#ae81ff">5.0</span>];
</span></span></code></pre></div><h2 id="押下時の動作">押下時の動作</h2>
<p>ボタンを選択した時の動作を追加する場合、 -(void)関数名:(UIButton *)button で動作を指定して、
ボタン追加時に addTarget で関数を指定する必要あります。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">//押下時の動作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>[button addTarget:self action:<span style="color:#960050;background-color:#1e0010">@</span>selector(button_select:) forControlEvents:UIControlEventTouchUpInside];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span>(<span style="color:#66d9ef">void</span>)button_select:(UIButton <span style="color:#f92672">*</span>)button {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//ボタンを選択中に変更する。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    button.selected <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//ボタンを無効中に変更する
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    button.enabled <span style="color:#f92672">=</span> false;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="大きさなどの変更">大きさなどの変更</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>    CGRect frame2 <span style="color:#f92672">=</span> CGRectMake(_overlayView.frame.size.width <span style="color:#f92672">-</span> <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">40</span>);
</span></span><span style="display:flex;"><span>    self.closeButton.frame <span style="color:#f92672">=</span> frame2;
</span></span></code></pre></div>
              ]]></content:encoded></item></channel></rss>