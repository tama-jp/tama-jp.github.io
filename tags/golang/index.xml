<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Golang on Ko-Da-Wa-Ri</title><link>https://example.org/tags/golang/</link><description>Recent content in Golang on Ko-Da-Wa-Ri</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 21 Jul 2022 22:43:00 +0900</lastBuildDate><atom:link href="https://example.org/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Wails v2の初期設定</title><link>https://example.org/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</link><pubDate>Thu, 21 Jul 2022 22:43:00 +0900</pubDate><guid>https://example.org/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</guid><description>&lt;h2 id="wailsインストール">wailsインストール&lt;/h2>
&lt;pre tabindex="0">&lt;code>go install github.com/wailsapp/wails/v2/cmd/wails@latest
&lt;/code>&lt;/pre>&lt;h2 id="ツールのcheck">ツールのcheck&lt;/h2>
&lt;pre tabindex="0">&lt;code>wails doctor
&lt;/code>&lt;/pre>&lt;h2 id="初期設定">初期設定&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>wails init -n &lt;span style="color:#f92672">[&lt;/span>プロジェクトディレクトリ名&lt;span style="color:#f92672">]&lt;/span> -t &lt;span style="color:#f92672">[&lt;/span>テンプレート名または、url&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wails init -n tamatan -t svelte-ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在バグなのか、フロントエンドの初期化がうまく行かないので
yarnまたは、npm installを実行する。
(yarnの方がうまく行くような気がする。)&lt;/p></description><content:encoded><![CDATA[
              <h2 id="wailsインストール">wailsインストール</h2>
<pre tabindex="0"><code>go install github.com/wailsapp/wails/v2/cmd/wails@latest
</code></pre><h2 id="ツールのcheck">ツールのcheck</h2>
<pre tabindex="0"><code>wails doctor 
</code></pre><h2 id="初期設定">初期設定</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails init -n <span style="color:#f92672">[</span>プロジェクトディレクトリ名<span style="color:#f92672">]</span> -t <span style="color:#f92672">[</span>テンプレート名または、url<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails init -n tamatan -t svelte-ts 
</span></span></code></pre></div><p>現在バグなのか、フロントエンドの初期化がうまく行かないので
yarnまたは、npm installを実行する。
(yarnの方がうまく行くような気がする。)</p>
<pre tabindex="0"><code>cd tamatan/frontend
yarn
</code></pre><p>テンプレートは、 リリースのv2.0.0-beta.35に書いてあった</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Lit + Vite</td>
          <td style="text-align: left">lit</td>
          <td style="text-align: left">Lit + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Lit + Vite (Typescript)</td>
          <td style="text-align: left">lit-ts</td>
          <td style="text-align: left">Lit + TS + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Preact + Vite</td>
          <td style="text-align: left">preact</td>
          <td style="text-align: left">Preact + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Preact + Vite (Typescript)</td>
          <td style="text-align: left">preact-ts</td>
          <td style="text-align: left">Preact + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">React + Vite</td>
          <td style="text-align: left">react</td>
          <td style="text-align: left">React + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">React + Vite (Typescript)</td>
          <td style="text-align: left">react-ts</td>
          <td style="text-align: left">React + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Svelte + Vite</td>
          <td style="text-align: left">svelte</td>
          <td style="text-align: left">Svelte + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Svelte + Vite (Typescript)</td>
          <td style="text-align: left">svelte-ts</td>
          <td style="text-align: left">Svelte + TS + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vanilla + Vite</td>
          <td style="text-align: left">vanilla</td>
          <td style="text-align: left">Vanilla + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vanilla + Vite (Typescript)</td>
          <td style="text-align: left">vanilla-ts</td>
          <td style="text-align: left">Vanilla + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vue + Vite</td>
          <td style="text-align: left">vue</td>
          <td style="text-align: left">Vue + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vue + Vite (Typescript)</td>
          <td style="text-align: left">vue-ts</td>
          <td style="text-align: left">Vue + Vite development server</td>
      </tr>
  </tbody>
</table>
<h3 id="vue">Vue</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">misitebao/wails-template-vue</td>
          <td style="text-align: left"><a href="https://github.com/misitebao/wails-template-vue">https://github.com/misitebao/wails-template-vue</a></td>
          <td style="text-align: left">A template using Vite,Vue and Vue-Router(Support both JavaScript and TypeScript)</td>
      </tr>
      <tr>
          <td style="text-align: left">wails-vite-vue-ts</td>
          <td style="text-align: left"><a href="https://github.com/codydbentley/wails-vite-vue-ts">https://github.com/codydbentley/wails-vite-vue-ts</a></td>
          <td style="text-align: left">Vue 3 TypeScript with Vite (and instructions to add features)</td>
      </tr>
      <tr>
          <td style="text-align: left">codydbentley/wails-vite-vue-the-works</td>
          <td style="text-align: left"><a href="https://github.com/codydbentley/wails-vite-vue-the-works">https://github.com/codydbentley/wails-vite-vue-the-works</a></td>
          <td style="text-align: left">Vue 3 TypeScript with Vite, Vuex, Vue Router, Sass, and ESLint + Prettier</td>
      </tr>
  </tbody>
</table>
<h3 id="angular">Angular</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">TAINCER / wails-angular-template</td>
          <td style="text-align: left"><a href="https://github.com/TAINCER/wails-angular-template">https://github.com/TAINCER/wails-angular-template</a></td>
          <td style="text-align: left">Angular with TypeScript, Sass, Hot-Reload, Code-Splitting and i18n</td>
      </tr>
  </tbody>
</table>
<h3 id="react">React</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">AlienRecall / wails-react-template</td>
          <td style="text-align: left"><a href="https://github.com/AlienRecall/wails-react-template">https://github.com/AlienRecall/wails-react-template</a></td>
          <td style="text-align: left">A template using reactjs</td>
      </tr>
      <tr>
          <td style="text-align: left">flin7 / wails-react-template</td>
          <td style="text-align: left"><a href="https://github.com/flin7/wails-react-template">https://github.com/flin7/wails-react-template</a></td>
          <td style="text-align: left">A minimal template for React that supports live development</td>
      </tr>
      <tr>
          <td style="text-align: left">LGiki / wails-template-nextjs</td>
          <td style="text-align: left"><a href="https://github.com/LGiki/wails-template-nextjs">https://github.com/LGiki/wails-template-nextjs</a></td>
          <td style="text-align: left">A template using Next.js and TypeScript</td>
      </tr>
  </tbody>
</table>
<h3 id="svelte">Svelte</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">raitonoberu / wails-svelte-template</td>
          <td style="text-align: left"><a href="https://github.com/raitonoberu/wails-svelte-template">https://github.com/raitonoberu/wails-svelte-template</a></td>
          <td style="text-align: left">Svelteを使用したテンプレート</td>
      </tr>
      <tr>
          <td style="text-align: left">BillBuilt / wails-vite-svelte-template</td>
          <td style="text-align: left"><a href="https://github.com/BillBuilt/wails-vite-svelte-template">https://github.com/BillBuilt/wails-vite-svelte-template</a></td>
          <td style="text-align: left">A template using Svelte and Vite</td>
      </tr>
      <tr>
          <td style="text-align: left">BillBuilt / wails-vite-svelte-tailwind-template</td>
          <td style="text-align: left"><a href="https://github.com/BillBuilt/wails-vite-svelte-tailwind-template">https://github.com/BillBuilt/wails-vite-svelte-tailwind-template</a></td>
          <td style="text-align: left">A template using Svelte and Vite with TailwindCSS v3</td>
      </tr>
  </tbody>
</table>
<h3 id="elm">Elm</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">benjamin-thomas / wails-elm-template</td>
          <td style="text-align: left"><a href="https://github.com/benjamin-thomas/wails-elm-template">https://github.com/benjamin-thomas/wails-elm-template</a></td>
          <td style="text-align: left">Develop your GUI app with functional programming and a snappy hot-reload setup 🎉 🚀</td>
      </tr>
  </tbody>
</table>
<h2 id="テスト起動">テスト起動</h2>
<p>うまく行かないときは、
もう一度、yarn</p>
<pre tabindex="0"><code>wails dev
</code></pre><h2 id="ビルド">ビルド</h2>
<pre tabindex="0"><code>wails build 
</code></pre><pre tabindex="0"><code>wails build  -platform &lt;各プラットフォーム&gt;
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails build -platform darwin/universal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails build -platform windows
</span></span></code></pre></div><table>
  <thead>
      <tr>
          <th style="text-align: left">Platform</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">darwin</td>
          <td style="text-align: left">MacOS + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/amd64</td>
          <td style="text-align: left">MacOS 10.13+ AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/arm64</td>
          <td style="text-align: left">MacOS 11.0+ ARM64</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/universal</td>
          <td style="text-align: left">MacOS AMD64+ARM64 universal application</td>
      </tr>
      <tr>
          <td style="text-align: left">windows</td>
          <td style="text-align: left">Windows 10/11 + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">windows/amd64</td>
          <td style="text-align: left">Windows 10/11 AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">windows/arm64</td>
          <td style="text-align: left">Windows 10/11 ARM64</td>
      </tr>
      <tr>
          <td style="text-align: left">linux</td>
          <td style="text-align: left">Linux + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">linux/amd64</td>
          <td style="text-align: left">Linux AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">linux/arm64</td>
          <td style="text-align: left">Linux ARM64</td>
      </tr>
  </tbody>
</table>
<p>こんな感じかな。</p>

              ]]></content:encoded></item><item><title>Wails v2のテンプレート</title><link>https://example.org/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</link><pubDate>Thu, 21 Jul 2022 22:00:39 +0900</pubDate><guid>https://example.org/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</guid><description>&lt;p>テンプレートの一覧どこにあるんやと思ったら&lt;/p>
&lt;p>ここにあった（；^ω^）&lt;/p>
&lt;p>&lt;a href="https://wails.io/docs/community/templates/">https://wails.io/docs/community/templates/&lt;/a>&lt;/p></description><content:encoded><![CDATA[
              <p>テンプレートの一覧どこにあるんやと思ったら</p>
<p>ここにあった（；^ω^）</p>
<p><a href="https://wails.io/docs/community/templates/">https://wails.io/docs/community/templates/</a></p>

              ]]></content:encoded></item><item><title>Golangでホットリロードする方法</title><link>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 05 Jul 2022 13:00:04 +0900</pubDate><guid>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>今回、Go言語で開発を行うことがありました。&lt;/p>
&lt;p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>今回、Go言語で開発を行うことがありました。</p>
<p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。</p>
<p>そのため、開発中は、毎回ソース変更してはコンパイルをして起動。。。。。。</p>
<p>Vue.JSやDjangoようにホットリロードに対応していません。
めんどくさいですよね。</p>
<p>でも、goには、それを解消してくれるツールがあります。</p>
<p>それが、<a href="https://github.com/cosmtrek/air">Air</a> です。</p>
<p>今回は、標準ライブラリでWebを起動しJsonを返す簡単なサンプルを用意しました。</p>
<h2 id="環境用意">環境用意</h2>
<p>Macで作成しているのでWindowsでするときは、Bashは、適当に置き換えてください。</p>
<p>用意するもの、</p>
<ul>
<li>エディタ</li>
<li>Dockerデスクトップ</li>
</ul>
<p>これだけで動作します。</p>
<h2 id="作成手順">作成手順</h2>
<h3 id="1-フォルダを作成">1) フォルダを作成</h3>
<pre tabindex="0"><code>mkdir -p air_sample &amp;&amp; cd air_sample
</code></pre><h3 id="2--goのファイルを作成">2)  goのファイルを作成</h3>
<p>go.mod</p>
<pre tabindex="0"><code>module air_sample

go 1.17
</code></pre><p>main.go</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;log&#34;
	&#34;net/http&#34;
)

type Response struct {
	Status      int       `json:&#34;status&#34;`
	Message   string    `json:&#34;message&#34;`
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	var buf bytes.Buffer

	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}

	enc := json.NewEncoder(&amp;buf)
	if err := enc.Encode(&amp;response); err != nil {
		log.Fatal(err)
	}
	fmt.Println(buf.String())

	_, err := fmt.Fprint(w, buf.String())
	if err != nil {
		return
	}
}

func main() {
	http.HandleFunc(&#34;/&#34;, rootHandler)
	log.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))
}
</code></pre><h3 id="3--airの設定ファイルの取得">3)  airの設定ファイルの取得</h3>
<pre tabindex="0"><code>wget https://raw.githubusercontent.com/cosmtrek/air/master/air_example.toml
mv air_example.toml .air.toml
</code></pre><h3 id="4--docker関連のファイル作成">4)  Docker関連のファイル作成</h3>
<p>Dockerfile</p>
<pre tabindex="0"><code>FROM golang:1.17-buster

# Time zone
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

RUN apt-get update
RUN apt-get -y install libonig-dev

COPY . /go/src

# Move to project root
WORKDIR /go/src

RUN go mod download

# Install Air (For binary execution)
RUN go get -u github.com/cosmtrek/air

# Start golang app with livereload
CMD [&#34;air&#34;, &#34;-c&#34;, &#34;.air.toml&#34;]

EXPOSE 8080
</code></pre><p>docker-compose.yml</p>
<pre tabindex="0"><code>version: &#34;3&#34;

services:
# ---------------------------------------------------
# gin
# ---------------------------------------------------
  web:
    build:
      context: .
    container_name: web
    volumes:
      - .:/go/src
    ports:
      - 8080:8080
    tty: true
    environment:
      TZ: Asia/Tokyo
</code></pre><h3 id="5--起動用のバッチファイル作成">5)  起動用のバッチファイル作成</h3>
<p>start.sh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>docker-compose stop
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    docker-compose down
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><h2 id="実行">実行</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sh start.sh
</span></span></code></pre></div><p>以下のようになります。</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.06.56.png" alt="スクリーンショット 2021-12-13 午後4.06.56.png"></p>
<h2 id="テスト">テスト</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p>これで実行できます。</p>
<p>実行結果</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.07.28.png" alt="スクリーンショット 2021-12-13 午後4.07.28.png"></p>
<p>ちゃんと動いてます。
そして、以下のように表示されてます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JSON" data-lang="JSON"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;こんにちわ、世界&#34;</span>}
</span></span></code></pre></div><p>ようやくここから本題。</p>
<p>今回用意したファイルは、ややこしいことしてますが、フォルダ内の「main.go」をDockerComposeで見るように工夫しています。
ですので、「main.go」を書き換えると勝手に再コンパイルがされ実行環境に反映されます。</p>
<p>例えば、JSONの戻り値を</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}
</code></pre><p>から</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界,Hallo&#34;,
	}
</code></pre><p>と書き込んでみます。そうすると！！</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.25.png" alt="スクリーンショット 2021-12-13 午後4.08.25.png"></p>
<p>となり再コンパイルされてます。</p>
<p>本当に再コンパイルされているかどうか見て見ましょう。</p>
<p>もう一度curlで実行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.40.png" alt="スクリーンショット 2021-12-13 午後4.08.40.png"></p>
<p>戻り値が変わってますね。
本番環境では、Wireは使うとダメですが、開発環境では重宝しそうです。
Goを使用することがあれば一度やってみませんか</p>
<p>明日は @ya-yamamoto さん、よろしくお願いします！！</p>

              ]]></content:encoded></item><item><title>APIの死活監視をRocketChatに送信する</title><link>https://example.org/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link><pubDate>Tue, 05 Jul 2022 12:15:06 +0900</pubDate><guid>https://example.org/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>サーバ監視ツールを作成しようというお話をします。&lt;/p>
&lt;p>サーバが本当に動いているかどうかを少し前までは、メールで送信が多かったのですが、
最近は、Slack等のチャットに連絡するような方法が多くなってきているようです。&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>サーバ監視ツールを作成しようというお話をします。</p>
<p>サーバが本当に動いているかどうかを少し前までは、メールで送信が多かったのですが、
最近は、Slack等のチャットに連絡するような方法が多くなってきているようです。</p>
<p>そこで、RocketChatを使ってサーバが死んでいるときにメッセージを送るツールをGo言語で作ってみようと思います。</p>
<p>Go言語には、サードパーティー製のパッケージ（Golangがあらかじめ用意していないソースのこと）などを
使用せずともある程度組めるようにはなっております。
ですので、1ファイルでコンパイルできプラットフォーム依存のないソースを作成します。
今回もそういう感じで作ったので、WindowsでもMacでもLinuxでも動作すると思います。
(すみません、プロクシは設定しておりません。。。。)</p>
<p>基礎知識は、英語ですが、<a href="https://golang.org/">本家</a>を見て頂くか
<a href="https://go-tour-jp.appspot.com/welcome/1">A Tour of Go</a>や<a href="https://qiita.com/tenntenn/items/0e33a4959250d1a55045">Go言語の初心者が見ると幸せになれる場所</a>を見ていくとわかりやすいです。</p>
<p>※ 時間の関係上細かいところまで説明しておりませんご了承ください。</p>
<h2 id="前準備サーバーの仕様">前準備（サーバーの仕様）</h2>
<p>サーバは簡易的にGo言語で用意します。（解説は面倒なので抜き）</p>
<p>HTTPステータスが正常(200)、異常(500)と、
Jsonのステータスが正常(0),異常(1)を返すものを4種類のAPIを作成しておき、
それによってどう動作するかを確認します。</p>
<p>以下の仕様です</p>
<ul>
<li>http://localhost:3000</li>
<li>引数なしのPOST</li>
<li>response
JSONで以下のように返す</li>
</ul>
<pre tabindex="0"><code>{
  &#34;comment&#34;: コメント,
  &#34;status&#34;: ステータス(0 or -1)
}
</code></pre><ul>
<li>URLは、以下を用意</li>
</ul>
<table>
  <thead>
      <tr>
          <th style="text-align: left">URI</th>
          <th style="text-align: left">内容</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ok</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス正常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ng</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス異常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ng_json_status_ng</td>
          <td style="text-align: left">HTTPステータス 異常・Jsonステータス正常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ok_long_time</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス正常（responseが遅い）</td>
      </tr>
  </tbody>
</table>
<p>以下がサンプルソースです。</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;io&#34;
	&#34;log&#34;
	&#34;net/http&#34;
	&#34;time&#34;
)

type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

const rotationTime = 10 * time.Second

const urlTestStatusOkJsonStatusOk = &#34;/test_status_ok_json_status_ok&#34;
const testStatusOkJsonStatusNg = &#34;/test_status_ok_json_status_ng&#34;
const testStatusNgJsonStatusNg = &#34;/test_status_ng_json_status_ng&#34;
const urlTestStatusOkJsonStatusOkLongTime = &#34;/test_status_ok_json_status_ok_long_time&#34;

func commonHandler(w http.ResponseWriter, r *http.Request, resJSON ResponseJSON) {
	body := r.Body
	defer body.Close()

	buf := new(bytes.Buffer)
	io.Copy(buf, body)

	// jsonエンコード
	outputJson, err := json.Marshal(resJSON)

	if err != nil {
		panic(err)
	}

	// jsonヘッダーを出力
	w.Header().Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	// jsonデータを出力
	_, _ = fmt.Fprint(w, string(outputJson))
}

func urlTestStatusOkJsonStatusOkLongTimeHandler(w http.ResponseWriter, r *http.Request) {
	time.Sleep(20 * time.Second)
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok LongTime&#34;,
		Status:  0,
	}
	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusOkHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok&#34;,
		Status:  0,
	}

	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus NG&#34;,
		Status:  -1,
	}

	commonHandler(w, r, resJSON)

}

func testStatusNgJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusInternalServerError)
	resJSON := ResponseJSON{
		Comment: &#34;Status NG JsonStatus NG&#34;,
		Status:  -1,
	}
	commonHandler(w, r, resJSON)
}

func serverSample() {
	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(urlTestStatusOkJsonStatusOk, testStatusOkJsonStatusOkHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ng
	http.HandleFunc(testStatusOkJsonStatusNg, testStatusOkJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(testStatusNgJsonStatusNg, testStatusNgJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ok_long_time
	http.HandleFunc(urlTestStatusOkJsonStatusOkLongTime, urlTestStatusOkJsonStatusOkLongTimeHandler)

	go func() {
		log.Fatal(http.ListenAndServe(&#34;:3000&#34;, nil))
	}()

}

func main() {
	// サンプルサーバー
	serverSample()

	for range time.Tick(rotationTime) {
	}

}
</code></pre><h2 id="ステータス監視">ステータス監視</h2>
<p>前準備で、サーバーを用意しました。
死活監視として何を見るかというと</p>
<ol>
<li>HTTPステータス異常ではないか</li>
<li>レスポンスが異常ではないか</li>
<li>レスポンス応答が遅くないか
この3つを監視します。</li>
</ol>
<h3 id="httpステータスとレスポンスの取得">HTTPステータスとレスポンスの取得</h3>
<p>今回はメッチャ簡単に「http」パッケージを用いて、HTTPステータスとレスポンスを取得します
HTTPステータスが200以外の場合は、エラーを返します。
また、通信で異常があった場合もエラーを返します。
正常の場合のみ、レスポンスを返すようにします。</p>
<p>レスポンス(JSON)の中身は、DataStoreとして構造体に入れてわかりやすく中身を管理します。
「encoding/json」パッケージで簡単に構造体に入れてくれます。</p>
<pre tabindex="0"><code>type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

func validationAPI(urlAddress string, res *ResponseJSON) (int, error) {

	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress,
		nil,
	)

	if err != nil {
		return -1, err
	}

	client := &amp;http.Client{}
	resp, err := client.Do(req)

	// ネットワークエラー
	if err != nil {
		return -1, err
	}

	statusCode := resp.StatusCode

	// httpステータスが正常でなければエラーとする
	if statusCode != 200 {
		return statusCode, errors.New(&#34;ステータスエラー&#34;)
	}

	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)
	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return statusCode, nil
}
</code></pre><h3 id="各ステータスとレスポンス時間を取得">各ステータスとレスポンス時間を取得</h3>
<p>上記で作成した「validationAPI」メソッドは、ステータスやサーバ異常は、エラーと返しますが、
レスポンス中身は、確認していません。また、レスポンス時間なども確認してません。
そういったものを確認するためのルーチンを以下で制御し、エラーであった場合RocketChatに投げます。</p>
<pre tabindex="0"><code>// ステータスチェック
func statusCheck(urlAddress string) {

	responseJSONData := new(ResponseJSON)
    
	// 通信開始時刻取得
	_now := time.Now()
	// 通信開始
	statusCode, err := validationAPI(urlAddress, responseJSONData)
	// 通信終了

	// 開始時刻からの時間を取得
	_duration := (time.Now()).Sub(_now)
		・・・ 省略・・・ 
	_second := _millisecond / 1000

	var message string
	message = urlAddress + &#34;\n&#34;

	if err != nil {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if _second &gt; responseTime {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if responseJSONData.Status !=0 {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else {
		message = message + &#34;--- 問題なし ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
	}
}
</code></pre><p>ここまでをポーリングでまわせば死活監視できます。
さて、エラーをRocketChatに送信する方法です。</p>
<h2 id="rocketchatの送信">RocketChatの送信</h2>
<p>ターゲットのチャットルーム（プライベートユーザー）送信するにはどうしたらいいのか
RocketChatは、APIがきっちり用意されていてすごく簡単です。</p>
<p>メッセージを送信するAPIの仕様 <a href="https://rocket.chat/docs/developer-guides/rest-api/chat/postmessage/">Post a chat message</a>
を見ると
最初の行に「URL」「Requires Auth」「HTTP Method」が表にのっています。
「URL」把握背するところとわかり、「HTTP Method」は、POSTで送信しろと書いており、
「Requires Auth」が必要というようなことが書いております。
つまり、ログインしてる情報をひっつけてこのURLでPOSTすればいいことがわかります。</p>
<p>どうやってポストをするのか。パラメータがいっぱい書いてますけど良くわかりませんよね？（；^ω^）
こういうときはサンプルがどっかに書いてあることが多いです。
「Example Call」と「Example Result」を見ます。
前者は、POSTの仕方が書いてあり、後者はそのresponseですね。
前者の「Example Call」を見ると、
curlでのコマンドが書いてあり、「-H」と「-d」とURLが引数となっています。
「-H」は、送信するヘッダのことで、「X-Auth-Token」と「X-User-Id」と、「Content-type:application/json」と言うのがあります。
「Content-type:application/json」は、送信方法をJSONで送ると言う意味で、
残りの、「X-Auth-Token」と「X-User-Id」は、たぶん、名前の通りで行くと認証の文字列でしょう。
おそらく、どこかで取得したものをここに設定するのだと思います。</p>
<p>っということは、もしかしたらログインの時にこのデータを作成しているのではないかなと推測します。
なので、REST APIで、認証で、ログインで入れるAPIの仕様を見てみましょう。
「<a href="https://rocket.chat/docs/developer-guides/rest-api/authentication/login/">rest-api/authentication/login/</a>」をこれを見ると「Result」の項目を見ると！！
「authToken」というのと「userId」てのがありますね。そう、これが、先ほどの「X-Auth-Token」と「X-User-Id」に入ります。</p>
<p>細かいことは端折りますが、</p>
<ol>
<li>ログインで、「ユーザー」「パスワード」を入れて、POSTする。</li>
<li>レスポンスで、「authToken」と「userId」を取得</li>
<li>Post a chat messageで先ほどの「authToken」と「userId」をヘッダに、書き込むチャンネルと文言を一緒に送信する</li>
<li>メッセージが書き込まれる。</li>
</ol>
<p>てな具合です。簡単でしょ？</p>
<p>「HTTPステータスとレスポンスの取得」で作成した「validationAPI」に、
パラメータとヘッダーの設定し、送信するれば良いだけです。</p>
<p>これで、大体の作り方がわかったはずです。</p>
<pre tabindex="0"><code>
/*
	RocketChatログイン
*/
func RocketChatLogin(urlAddress string, userName string, password string, res *RocketChatLoginResponse) error {
	jsonParam := RocketChatLoginParam{
		User:     userName,
		Password: password,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/login&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)

	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return nil
}

/*
	RocketChatログイン
*/
func RocketChatPostMessage(urlAddress string, authToken string, userId string, chatRoom string, message string) error {
	jsonParam := RocketChatPostMessageParam{
		Channel: chatRoom,
		Message: message,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/chat.postMessage&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	req.Header.Set(&#34;X-User-Id&#34;, userId)
	req.Header.Set(&#34;X-Auth-Token&#34;, authToken)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}
</code></pre><h2 id="最後に">最後に</h2>
<p>なんか説明してなく、ソースをあげているだけのような気がしていてしょうがないですが、(;￣ー￣A アセアセ・・・
よしとしてください。。。。
あと、Go言語好きな人集まりが出来たら良いなぁって最近は思ってます。。。。。</p>
<p>※ 端折って書いたりしておりますので実際のサンプルサーバと監視ツールを合体したソースを<a href="https://gist.github.com/tama-jp/175aa45d0d129568329168504a9e228f">Gist</a>にあげておきます。</p>

              ]]></content:encoded></item><item><title>GORMでtime型をするときの注意</title><link>https://example.org/posts/gorm%E3%81%A7time%E5%9E%8B%E3%82%92%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</link><pubDate>Thu, 30 Jun 2022 19:41:20 +0900</pubDate><guid>https://example.org/posts/gorm%E3%81%A7time%E5%9E%8B%E3%82%92%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F/</guid><description>&lt;h1 id="gormでtime型をするときの注意">GORMでtime型をするときの注意&lt;/h1>
&lt;p>GORMで構造体をマイグレーションしたときに
以下のようにしてもtime型にはならなかった、、、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">BreakTime&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> &lt;span style="color:#e6db74">`gorm:&amp;#34;type:time;comment:休憩時間&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>↓ マイグレすると&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span> test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> break_time &lt;span style="color:#66d9ef">timestamp&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> time &lt;span style="color:#66d9ef">zone&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>となった、&lt;/p>
&lt;p>どうも、「time」のあとにスペースを入れれば解決するみたい。&lt;/p></description><content:encoded><![CDATA[
              <h1 id="gormでtime型をするときの注意">GORMでtime型をするときの注意</h1>
<p>GORMで構造体をマイグレーションしたときに
以下のようにしてもtime型にはならなかった、、、</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">test</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">BreakTime</span>                  <span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>               <span style="color:#e6db74">`gorm:&#34;type:time;comment:休憩時間&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>↓ マイグレすると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> test
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    break_time                   <span style="color:#66d9ef">timestamp</span> <span style="color:#66d9ef">with</span> time <span style="color:#66d9ef">zone</span>,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>となった、</p>
<p>どうも、「time」のあとにスペースを入れれば解決するみたい。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">test</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">BreakTime</span>                  <span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>               <span style="color:#e6db74">`gorm:&#34;type:time ;comment:休憩時間&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>↓ マイグレすると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> test
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    break_time                   time,
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>時間がかかったけどこんな事があるのだと。。。。。</p>

              ]]></content:encoded></item><item><title>時間の取り扱い方</title><link>https://example.org/posts/%E6%99%82%E9%96%93%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E6%96%B9/</link><pubDate>Thu, 30 Jun 2022 11:56:12 +0900</pubDate><guid>https://example.org/posts/%E6%99%82%E9%96%93%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E6%96%B9/</guid><description>&lt;h1 id="time型を取得する">time型を取得する&lt;/h1>
&lt;p>&lt;code>time.Time型&lt;/code>の変数を取得する方法。&lt;/p>
&lt;h2 id="現在時刻から取得する">現在時刻から取得する&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2009-11-10 23:00:00 +0000 UTC
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="日付から取得する">日付から取得する&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Date&lt;/span>(&lt;span style="color:#ae81ff">2014&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">December&lt;/span>, &lt;span style="color:#ae81ff">31&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">13&lt;/span>, &lt;span style="color:#ae81ff">24&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">UTC&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2014-12-31 12:13:24 +0000 UTC
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">loc&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">LoadLocation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Asia/Tokyo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Date&lt;/span>(&lt;span style="color:#ae81ff">2014&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">31&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">18&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">loc&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2014-12-31 08:04:18 +0900 JST
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文字列から取得する">文字列から取得する&lt;/h2>
&lt;pre tabindex="0">&lt;code>t, _ := time.Parse(&amp;#34;2006-01-02&amp;#34;, &amp;#34;2014-12-31&amp;#34;)
fmt.Println(t)
// Output:
// 2014-12-31 00:00:00 +0000 UTC
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>t, _ := time.Parse(&amp;#34;2006-01-02 15:04:05 MST&amp;#34;, &amp;#34;2014-12-31 12:31:24 JST&amp;#34;)
fmt.Println(t)
// Output:
// 2014-12-31 12:31:24 +0900 JST
&lt;/code>&lt;/pre>&lt;h2 id="unix-timestampから変換">Unix TimeStampから変換&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#ae81ff">1419933529&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Output:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2014-12-30 09:58:49 +0000 UTC
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第2引数でナノ秒を指定できる。&lt;/p></description><content:encoded><![CDATA[
              <h1 id="time型を取得する">time型を取得する</h1>
<p><code>time.Time型</code>の変数を取得する方法。</p>
<h2 id="現在時刻から取得する">現在時刻から取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output: 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2009-11-10 23:00:00 +0000 UTC
</span></span></span></code></pre></div><h2 id="日付から取得する">日付から取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">December</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">24</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">UTC</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-31 12:13:24 +0000 UTC
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-31 08:04:18 +0900 JST
</span></span></span></code></pre></div><h2 id="文字列から取得する">文字列から取得する</h2>
<pre tabindex="0"><code>t, _ := time.Parse(&#34;2006-01-02&#34;, &#34;2014-12-31&#34;)
fmt.Println(t)
// Output:
// 2014-12-31 00:00:00 +0000 UTC
</code></pre><pre tabindex="0"><code>t, _ := time.Parse(&#34;2006-01-02 15:04:05 MST&#34;, &#34;2014-12-31 12:31:24 JST&#34;)
fmt.Println(t)
// Output:
// 2014-12-31 12:31:24 +0900 JST
</code></pre><h2 id="unix-timestampから変換">Unix TimeStampから変換</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Unix</span>(<span style="color:#ae81ff">1419933529</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 2014-12-30 09:58:49 +0000 UTC
</span></span></span></code></pre></div><p>第2引数でナノ秒を指定できる。</p>
<h1 id="時刻の編集">時刻の編集</h1>
<p>時刻の操作や差分を確認する場合、Duration型を取り扱うことになる。中身はint64。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Duration</span> <span style="color:#66d9ef">int64</span>
</span></span></code></pre></div><p>明示的にDuration型を使うことによって、時刻操作していることをわかりやすくできる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span>))               <span style="color:#75715e">// int
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)) <span style="color:#75715e">// time.Duration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>))   <span style="color:#75715e">// time.Duration
</span></span></span></code></pre></div><h2 id="後の時刻を取得する">○○後の時刻を取得する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>) <span style="color:#75715e">// 1分後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)              <span style="color:#75715e">// 2014-12-20 00:01:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1時間後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)            <span style="color:#75715e">// 2014-12-20 01:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1日後 (time.Dayは標準には無い)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)             <span style="color:#75715e">// 2014-12-21 00:00:00 +0900 JST
</span></span></span></code></pre></div><p>1日後の場合は<code>time.AddDate()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>) <span style="color:#75715e">// 1日後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)          <span style="color:#75715e">// 2014-12-21 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1ヶ月後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)          <span style="color:#75715e">// 2015-01-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1年後
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)          <span style="color:#75715e">// 2015-12-20 00:00:00 +0900 JST
</span></span></span></code></pre></div><h2 id="前の時刻を取得する">○○前の時刻を取得する</h2>
<p><code>time.Add()</code>に-を入れられる</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>) <span style="color:#75715e">// 1分前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)           <span style="color:#75715e">// 2014-12-19 23:59:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1時間前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)         <span style="color:#75715e">// 2014-12-19 23:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Hour</span>) <span style="color:#75715e">// 1日前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)              <span style="color:#75715e">// 2014-12-19 00:00:00 +0900 JST
</span></span></span></code></pre></div><p><code>time.AddDate()</code>でマイナスを入れれば過去になる</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#75715e">// 1日前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>)           <span style="color:#75715e">// 2014-12-19 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1ヶ月前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t3</span>)           <span style="color:#75715e">// 2014-11-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">AddDate</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#75715e">// 1年前
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t4</span>)           <span style="color:#75715e">// 2013-12-20 00:00:00 +0900 JST
</span></span></span></code></pre></div><h2 id="2つの時刻を比較する">2つの時刻を比較する</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">t1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t1</span>) <span style="color:#75715e">// 2014-12-20 12:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2014</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t2</span>) <span style="color:#75715e">// 2014-12-20 00:00:00 +0900 JST
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">t1</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">t2</span>)) <span style="color:#75715e">// 12h0m0s
</span></span></span></code></pre></div><h2 id="現在時刻からどれだけ前か調べる">現在時刻からどれだけ前か調べる</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">loc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">t1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Date</span>(<span style="color:#ae81ff">2009</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">loc</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">d</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">t1</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">d</span>) <span style="color:#75715e">// 72h0m0s (Go Playgroundで実行した場合)
</span></span></span></code></pre></div><p><code>time.Since(t)</code>は<code>time.Now().Sub(t)</code>の省略形。</p>

              ]]></content:encoded></item><item><title>goプロジェクトを自動でUML図に出力するツール</title><link>https://example.org/posts/go%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7uml%E5%9B%B3%E3%81%AB%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB/</link><pubDate>Tue, 21 Jun 2022 18:20:23 +0900</pubDate><guid>https://example.org/posts/go%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%87%AA%E5%8B%95%E3%81%A7uml%E5%9B%B3%E3%81%AB%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB/</guid><description>&lt;p>go言語のプロジェクトを可視化したいと思いPlantUMLで自動で出来たらなと。&lt;/p>
&lt;p>2つ見つけました。&lt;/p>
&lt;p>&lt;a href="https://github.com/jfeliu007/goplantuml">goplantuml&lt;/a>と&lt;a href="https://github.com/kazukousen/gouml">gouml&lt;/a>です。&lt;/p>
&lt;p>前者の&lt;a href="https://github.com/jfeliu007/goplantuml">goplantuml&lt;/a>は、
結構有名でよく紹介されており、メンテが数ヶ月前にされているようです。&lt;/p></description><content:encoded><![CDATA[
              <p>go言語のプロジェクトを可視化したいと思いPlantUMLで自動で出来たらなと。</p>
<p>2つ見つけました。</p>
<p><a href="https://github.com/jfeliu007/goplantuml">goplantuml</a>と<a href="https://github.com/kazukousen/gouml">gouml</a>です。</p>
<p>前者の<a href="https://github.com/jfeliu007/goplantuml">goplantuml</a>は、
結構有名でよく紹介されており、メンテが数ヶ月前にされているようです。</p>
<p>後者の<a href="https://github.com/kazukousen/gouml">gouml</a>と言うものですが、数年前から開発がとまっていて、</p>
<p>goのver1.18でコンパイルして実行してみると表示が出来ない部分があったので、</p>
<p>それで、最新のモジュールに差し替えて、みました。
<a href="https://github.com/tama-jp/gouml">こちら</a>にあります。</p>
<p>Macなら以下で動くと思います。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://github.com/tama-jp/gouml.git
</span></span><span style="display:flex;"><span>cd gouml/cmd/gouml
</span></span><span style="display:flex;"><span>go build -o /usr/local/bin/gouml main.go
</span></span><span style="display:flex;"><span>gouml --version 
</span></span></code></pre></div><p>このふたつのツールを<a href="https://github.com/sue445/plant_erd">plant_erd</a>という、データベースをplantumlでER図を生成するソースを試しにしてみました。</p>
<p>goplantuml
<img src="../img/2022-06-21-sample.png" alt="2022-06-21-sample.png"></p>
<p>gouml
<img src="../img/2022-06-21-file.png" alt="2022-06-21-file.png"></p>
<p>でかたが違う。。。。(´ヘ｀;)　う〜ん・・・。どちらがいいのかがわかりません。</p>
<p>ただ、goumlは、戻り値にメソッドが使われたときの軌跡はわかるので、個人的にはこっちがいいと感じますが。。。。</p>
<p>皆さんどうしてるんだろ。。。。．</p>

              ]]></content:encoded></item><item><title>時刻ではまった</title><link>https://example.org/posts/2022-06-07-00-19-49-time/</link><pubDate>Tue, 07 Jun 2022 00:19:50 +0000</pubDate><guid>https://example.org/posts/2022-06-07-00-19-49-time/</guid><description>&lt;p>時刻ではまった。。。。
文字列をtime型にしてからunixtimeに入れようとしたら、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">timeStr&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2022-06-07 09:00:00&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">layout&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">timeData&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">layout&lt;/span>, &lt;span style="color:#a6e22e">timeStr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">timeData&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>()) &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> =&amp;gt; &lt;span style="color:#ae81ff">1654592400&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>タイムゾーンが、日本に設定してないので、UTCになっているみたい。
time.Parseを使用せずに、locationを設定できるtime.ParseInLocationを使用するとうまく行く。&lt;/p></description><content:encoded><![CDATA[
              <p>時刻ではまった。。。。
文字列をtime型にしてからunixtimeに入れようとしたら、</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#a6e22e">timeStr</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2022-06-07 09:00:00&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">layout</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2006-01-02 15:04:05&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeData</span>, <span style="color:#a6e22e">_</span> = <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">layout</span>, <span style="color:#a6e22e">timeStr</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">timeData</span>.<span style="color:#a6e22e">Unix</span>()) <span style="color:#960050;background-color:#1e0010">#</span> =&gt; <span style="color:#ae81ff">1654592400</span>
</span></span></code></pre></div><p>タイムゾーンが、日本に設定してないので、UTCになっているみたい。
time.Parseを使用せずに、locationを設定できるtime.ParseInLocationを使用するとうまく行く。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#a6e22e">timeStr</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2022-06-07 09:00:00&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">layout</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;2006-01-02 15:04:05&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tz</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">LoadLocation</span>(<span style="color:#e6db74">&#34;Asia/Tokyo&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">timeData</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">ParseInLocation</span>(<span style="color:#a6e22e">layout</span>, <span style="color:#a6e22e">str</span>, <span style="color:#a6e22e">tz</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">timeData</span>.<span style="color:#a6e22e">Unix</span>()) <span style="color:#960050;background-color:#1e0010">#</span> =&gt; <span style="color:#ae81ff">1654562457</span>
</span></span></code></pre></div><p>適当に作った関数のおかげで悩んでもうた。。。。。(・∀・)</p>

              ]]></content:encoded></item><item><title>HUGO便利スクリプト</title><link>https://example.org/posts/hugo%E4%BE%BF%E5%88%A9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Mon, 06 Jun 2022 14:28:28 +0900</pubDate><guid>https://example.org/posts/hugo%E4%BE%BF%E5%88%A9%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>&lt;p>HUGOの使い方がようやくわかってきて、今必死ですw&lt;/p>
&lt;p>コンテントを作成する時&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new post/なんたらー.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>って、書かなきゃならなく、中身もちょびちょび書き直さなければならない。
これって面倒ですね。&lt;/p></description><content:encoded><![CDATA[
              <p>HUGOの使い方がようやくわかってきて、今必死ですw</p>
<p>コンテントを作成する時</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>hugo new post/なんたらー.md
</span></span></code></pre></div><p>って、書かなきゃならなく、中身もちょびちょび書き直さなければならない。
これって面倒ですね。</p>
<p>っで、下のサイトの方がスクリプトを書いてました。便利便利♪</p>
<p><a href="https://techblog.sgr-ksmt.dev/2016/02/05/hugo_new_post/">https://techblog.sgr-ksmt.dev/2016/02/05/hugo_new_post/</a></p>
<ul>
<li>
<p>毎回post/と付けるのを省きたい</p>
</li>
<li>
<p>markdownファイル名の前に日付を付けたい</p>
</li>
</ul>
<p>ホント助かりました。</p>
<p>ただ、記事が古いのか「設定」などが「=」で書かれていてうまく動かなかったので、
直して使ってます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>set -u
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>usage<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;Usage : </span>$0<span style="color:#e6db74"> [-w] [title_name]&#34;</span> 1&gt;&amp;<span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>main <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  cd <span style="color:#66d9ef">$(</span>cd <span style="color:#66d9ef">$(</span>dirname $0<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> pwd<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>  OPEN_EDITOR<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ARG; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$ARG<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>      -*<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> getopts w OPT <span style="color:#e6db74">&#34;</span>$ARG<span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$OPT<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>          w<span style="color:#f92672">)</span> OPEN_EDITOR<span style="color:#f92672">=</span>1;;
</span></span><span style="display:flex;"><span>          *<span style="color:#f92672">)</span> usage; exit 1;;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>      ;;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  shift <span style="color:#66d9ef">$(</span>expr $OPTIND - 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span> $# -ne <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> usage <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  slug<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  file_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;posts/</span><span style="color:#66d9ef">$(</span>date +<span style="color:#e6db74">&#34;%Y-%m-%d-%H-%M-%S&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">-</span><span style="color:#e6db74">${</span>slug<span style="color:#e6db74">}</span><span style="color:#e6db74">.md&#34;</span>
</span></span><span style="display:flex;"><span>  file_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content/</span>$file_name<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! -e <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    hugo new <span style="color:#e6db74">&#34;</span>$file_name<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    sed -i <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#e6db74">&#34;s/title: \&#34;.*\&#34;/title: \&#34;</span>$slug<span style="color:#e6db74">\&#34;/g&#34;</span> <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    sed -i <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#e6db74">&#34;s/slug: \&#34;.*\&#34;/slug: \&#34;</span>$slug<span style="color:#e6db74">\&#34;/g&#34;</span> <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$file_name<span style="color:#e6db74"> already exists.&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">[</span> $OPEN_EDITOR -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> atom <span style="color:#e6db74">&#34;</span>$file_path<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>main <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>HUGOのインストール</title><link>https://example.org/posts/hugo%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link><pubDate>Mon, 06 Jun 2022 14:28:23 +0900</pubDate><guid>https://example.org/posts/hugo%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid><description>&lt;p>ほぼ&lt;a href="https://gohugo.io/getting-started/quick-start/">ここ&lt;/a>を見ればすぐできます。&lt;/p>
&lt;p>これに、私は、テーマを&lt;a href="https://github.com/Vimux/Mainroad">Mainroad&lt;/a>にしました。&lt;/p></description><content:encoded><![CDATA[
              <p>ほぼ<a href="https://gohugo.io/getting-started/quick-start/">ここ</a>を見ればすぐできます。</p>
<p>これに、私は、テーマを<a href="https://github.com/Vimux/Mainroad">Mainroad</a>にしました。</p>

              ]]></content:encoded></item></channel></rss>