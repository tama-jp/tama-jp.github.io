<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Ko-Da-Wa-Ri</title><link>https://example.org/posts/</link><description>Recent content in Posts on Ko-Da-Wa-Ri</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 26 Sep 2024 19:38:11 +0900</lastBuildDate><atom:link href="https://example.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>ITerm2で起動時にTip of the Dayを出さない</title><link>https://example.org/posts/2024-09-26-19-38-11-iterm2%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%ABtip-of-the-day%E3%82%92%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84/</link><pubDate>Thu, 26 Sep 2024 19:38:11 +0900</pubDate><guid>https://example.org/posts/2024-09-26-19-38-11-iterm2%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%ABtip-of-the-day%E3%82%92%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84/</guid><description>&lt;p>iTerm2で起動時に左上に表示される「Tip of the Day（今日のTip）」を非表示にする方法&lt;/p>
&lt;p>Term2の環境設定の［Advanced］タブ内に「Tip of the Day」セクションがあるので、
「Disable the Tip of the Day?」項目がデフォルトだと「No」になっているので「Yes」に変更する。&lt;/p></description><content:encoded>
              &lt;p>iTerm2で起動時に左上に表示される「Tip of the Day（今日のTip）」を非表示にする方法&lt;/p>
&lt;p>Term2の環境設定の［Advanced］タブ内に「Tip of the Day」セクションがあるので、
「Disable the Tip of the Day?」項目がデフォルトだと「No」になっているので「Yes」に変更する。&lt;/p>

              </content:encoded></item><item><title>iPhone等のアイコンを作る</title><link>https://example.org/posts/2024-05-21-00-08-05-iphone%E7%AD%89%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B/</link><pubDate>Tue, 21 May 2024 00:08:05 +0900</pubDate><guid>https://example.org/posts/2024-05-21-00-08-05-iphone%E7%AD%89%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B/</guid><description>&lt;p>1024x1024 の画像をもとに、iPhone等のiconを作るるのに、ImageMgicを使います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 20x20 Icon-20@1x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 40x40 Icon-20@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 60x60 Icon-20@3x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 29x29 Icon-29@1x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 58x58 Icon-29@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 87x87 Icon-29@3x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 40x40 Icon-40@1x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 80x80 Icon-40@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 120x120 Icon-40@3x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 120x120 Icon-60@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 180x180 Icon-60@3x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 76x76 Icon-76@1x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 152x152 Icon--76@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 167x167 Icon-83.5@2x.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 512x512 iTunesArtwork.png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert $1 -geometry 1024x1024 iTunesArtwork@2x.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[
              <p>1024x1024 の画像をもとに、iPhone等のiconを作るるのに、ImageMgicを使います。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>!/usr/bin/env bash
</span></span><span style="display:flex;"><span>convert $1 -geometry 20x20 Icon-20@1x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 40x40 Icon-20@2x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 60x60 Icon-20@3x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 29x29 Icon-29@1x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 58x58 Icon-29@2x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 87x87 Icon-29@3x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 40x40 Icon-40@1x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 80x80 Icon-40@2x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 120x120 Icon-40@3x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 120x120 Icon-60@2x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 180x180 Icon-60@3x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 76x76 Icon-76@1x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 152x152 Icon--76@2x.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 167x167 Icon-83.5@2x.png
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>convert $1 -geometry 512x512 iTunesArtwork.png
</span></span><span style="display:flex;"><span>convert $1 -geometry 1024x1024 iTunesArtwork@2x.png
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>Dispatch</title><link>https://example.org/posts/2024-05-16-08-15-33-dispatch/</link><pubDate>Thu, 16 May 2024 08:15:34 +0900</pubDate><guid>https://example.org/posts/2024-05-16-08-15-33-dispatch/</guid><description>&lt;pre tabindex="0">&lt;code class="language-objective_c" data-lang="objective_c">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
// バックグランドでAPIなどを実行
});
dispatch_async(dispatch_get_main_queue(), ^{
// メインスレッドで処理をしたい内容、UIを変更など。
});
dispatch_sync(dispatch_queue_create(&amp;#34;test_sample&amp;#34;, DISPATCH_QUEUE_SERIAL), ^{
// 同期処理
});
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-objective_c" data-lang="objective_c">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // バックグランドでAPIなどを実行
});

dispatch_async(dispatch_get_main_queue(), ^{
    // メインスレッドで処理をしたい内容、UIを変更など。
});


dispatch_sync(dispatch_queue_create(&#34;test_sample&#34;, DISPATCH_QUEUE_SERIAL), ^{
    // 同期処理
});
</code></pre>
              ]]></content:encoded></item><item><title>遅延処理</title><link>https://example.org/posts/2024-05-16-07-55-58-%E9%81%85%E5%BB%B6%E5%87%A6%E7%90%86/</link><pubDate>Thu, 16 May 2024 07:55:58 +0900</pubDate><guid>https://example.org/posts/2024-05-16-07-55-58-%E9%81%85%E5%BB%B6%E5%87%A6%E7%90%86/</guid><description>&lt;pre tabindex="0">&lt;code class="language-objective_c" data-lang="objective_c">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1.0 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
// 処理内容
});
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-objective_c" data-lang="objective_c"> - (void)doAfterDelay{
// 処理内容
}
[self performSelector:@selector(doAfterDelay) withObject:nil afterDelay:1];
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-objective_c" data-lang="objective_c">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1.0 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
    // 処理内容
});
</code></pre><pre tabindex="0"><code class="language-objective_c" data-lang="objective_c"> - (void)doAfterDelay{
   // 処理内容
 }
 [self performSelector:@selector(doAfterDelay) withObject:nil afterDelay:1];
</code></pre>
              ]]></content:encoded></item><item><title>Docker Composeで「project Name Must Not Be Empty」がでた</title><link>https://example.org/posts/2024-04-25-23-37-23-docker-compose%E3%81%A7project-name-must-not-be-empty%E3%81%8C%E3%81%A7%E3%81%9F/</link><pubDate>Thu, 25 Apr 2024 23:37:23 +0900</pubDate><guid>https://example.org/posts/2024-04-25-23-37-23-docker-compose%E3%81%A7project-name-must-not-be-empty%E3%81%8C%E3%81%A7%E3%81%9F/</guid><description>&lt;p>Macでdocker composeファイルを起動したら&lt;/p>
&lt;pre tabindex="0">&lt;code>project name must not be empty
&lt;/code>&lt;/pre>&lt;p>とでた。&lt;/p>
&lt;p>文法も間違えてないのになんだろうと思ったら、&lt;/p>
&lt;p>ルートのディレクトリが日本語を使用していただけでエラーが出た。&lt;/p></description><content:encoded><![CDATA[
              <p>Macでdocker composeファイルを起動したら</p>
<pre tabindex="0"><code>project name must not be empty
</code></pre><p>とでた。</p>
<p>文法も間違えてないのになんだろうと思ったら、</p>
<p>ルートのディレクトリが日本語を使用していただけでエラーが出た。</p>
<p>どうも、フルパスを確認してるようだ。</p>
<p>だたし、Dockerfilesは、日本語のパスが入っていてても問題なく動作する。</p>

              ]]></content:encoded></item><item><title>CentOS6でのリポジトリを取得する方法</title><link>https://example.org/posts/2024-04-23-15-35-49-centos6%E3%81%A7%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 23 Apr 2024 15:35:49 +0900</pubDate><guid>https://example.org/posts/2024-04-23-15-35-49-centos6%E3%81%A7%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>&lt;p>基本的には、&lt;/p>
&lt;p>&lt;a href="http://mirrorlist.centos.org/">http://mirrorlist.centos.org/&lt;/a>&lt;/p>
&lt;p>を&lt;/p>
&lt;p>&lt;a href="https://archive.kernel.org/">https://archive.kernel.org/&lt;/a>&lt;/p>
&lt;p>に接続先を変えます、&lt;/p>
&lt;p>どうするかというと、&lt;/p>
&lt;p>mirrorlist定数をコメントアウトして、&lt;/p>
&lt;pre tabindex="0">&lt;code>baseurl=https://archive.kernel.org/centos-vault/[OSのバージョン]/xxxx/$basearch/
&lt;/code>&lt;/pre>&lt;p>に置き換え。xxxは、各自のディレクトリにあわせます。&lt;/p></description><content:encoded><![CDATA[
              <p>基本的には、</p>
<p><a href="http://mirrorlist.centos.org/">http://mirrorlist.centos.org/</a></p>
<p>を</p>
<p><a href="https://archive.kernel.org/">https://archive.kernel.org/</a></p>
<p>に接続先を変えます、</p>
<p>どうするかというと、</p>
<p>mirrorlist定数をコメントアウトして、</p>
<pre tabindex="0"><code>baseurl=https://archive.kernel.org/centos-vault/[OSのバージョン]/xxxx/$basearch/
</code></pre><p>に置き換え。xxxは、各自のディレクトリにあわせます。</p>
<p>DockerのCentOS6.9では、以下のようになります。</p>
<pre tabindex="0"><code>[base]
name=CentOS-$releasever - Base
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
baseurl=https://archive.kernel.org/centos-vault/6.9/os/$basearch/

gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#released updates 
[updates]
name=CentOS-$releasever - Updates
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/
baseurl=https://archive.kernel.org/centos-vault/6.9/updates/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#additional packages that may be useful
[extras]
name=CentOS-$releasever - Extras
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/
baseurl=https://archive.kernel.org/centos-vault/6.9/extras/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$releasever - Plus
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/
baseurl=https://archive.kernel.org/centos-vault/6.9/centosplus/$basearch/
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

#contrib - packages by Centos Users
[contrib]
name=CentOS-$releasever - Contrib
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib&amp;infra=$infra
#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/
baseurl=https://archive.kernel.org/centos-vault/6.9/contrib/$basearch/
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</code></pre><p>早く、別OSにしなければならないけど、とりあえずならこれで延命処置が出来て助かります。ε-(´∀｀*)ﾎｯ</p>

              ]]></content:encoded></item><item><title>ハード作成の面白いサイト</title><link>https://example.org/posts/2024-04-21-08-47-15-%E3%83%8F%E3%83%BC%E3%83%89%E4%BD%9C%E6%88%90%E3%81%AE%E9%9D%A2%E7%99%BD%E3%81%84%E3%82%B5%E3%82%A4%E3%83%88/</link><pubDate>Sun, 21 Apr 2024 08:47:15 +0900</pubDate><guid>https://example.org/posts/2024-04-21-08-47-15-%E3%83%8F%E3%83%BC%E3%83%89%E4%BD%9C%E6%88%90%E3%81%AE%E9%9D%A2%E7%99%BD%E3%81%84%E3%82%B5%E3%82%A4%E3%83%88/</guid><description>&lt;p>４歳の息子がよく見ている段ボールで作る何ちゃらがあるんですけど。
今回ドリンクバーでして、これの装置だけでもあったら楽しいなぁ
って思いました。&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=qMYM1qFy8eA">https://www.youtube.com/watch?v=qMYM1qFy8eA&lt;/a>&lt;/p></description><content:encoded><![CDATA[
              <p>４歳の息子がよく見ている段ボールで作る何ちゃらがあるんですけど。
今回ドリンクバーでして、これの装置だけでもあったら楽しいなぁ
って思いました。</p>
<p><a href="https://www.youtube.com/watch?v=qMYM1qFy8eA">https://www.youtube.com/watch?v=qMYM1qFy8eA</a></p>
<p>どんな材料いるのかなと思ったら、このサイトに書いてました。
こう言う、「マイクロ真空ポンプ」ってのがあると知りました。</p>
<p>そこで紹介されていたサイトが、結構素人でも作れそうな紹介だったんです。</p>
<p>それがここ。</p>
<p><a href="https://elchika.com/">https://elchika.com/</a></p>
<p>難しいのや高いものはあるんですけど、これをヒントに何か作れたらなぁと。</p>

              ]]></content:encoded></item><item><title>AwscliでEC2の強制再起動</title><link>https://example.org/posts/2024-04-19-22-05-17-awscli%E3%81%A7ec2%E3%81%AE%E5%BC%B7%E5%88%B6%E5%86%8D%E8%B5%B7%E5%8B%95/</link><pubDate>Fri, 19 Apr 2024 22:05:17 +0900</pubDate><guid>https://example.org/posts/2024-04-19-22-05-17-awscli%E3%81%A7ec2%E3%81%AE%E5%BC%B7%E5%88%B6%E5%86%8D%E8%B5%B7%E5%8B%95/</guid><description>&lt;h1 id="強制停止---起動">強制停止 -&amp;gt; 起動&lt;/h1>
&lt;p>最近しょっちゅう、CPUが上がりすぎて再起動しなけりゃならないのが
頻繁にあったので、こんな感じでASW CLIでコマンドをたたいてます。
こんなコマンドたたかなくても、ちゃんと動けばいいのだが。。。。&lt;/p></description><content:encoded><![CDATA[
              <h1 id="強制停止---起動">強制停止 -&gt; 起動</h1>
<p>最近しょっちゅう、CPUが上がりすぎて再起動しなけりゃならないのが
頻繁にあったので、こんな感じでASW CLIでコマンドをたたいてます。
こんなコマンドたたかなくても、ちゃんと動けばいいのだが。。。。</p>
<pre tabindex="0"><code>instance=[インスタンスID]
aws ec2 stop-instances --instance-ids ${instance} --force &amp;&amp; aws ec2 wait instance-stopped --instance-ids ${instance} &amp;&amp; \
aws ec2 start-instances --instance-ids ${instance}  &amp;&amp; aws ec2 wait instance-running --instance-ids ${instance} 
</code></pre>
              ]]></content:encoded></item><item><title>最近更新できてないなぁ。。。。</title><link>https://example.org/posts/2024-04-19-17-43-50-%E6%9C%80%E8%BF%91/</link><pubDate>Fri, 19 Apr 2024 17:43:50 +0900</pubDate><guid>https://example.org/posts/2024-04-19-17-43-50-%E6%9C%80%E8%BF%91/</guid><description>&lt;p>最近全然ブログが更新できていない。（；^ω^）&lt;/p>
&lt;p>hugo + git hub でブログをかけるようにしたら、便利かと思ったら、 最初にブログを追加するのが面倒、
gitに上げるのもPCでしかできないから面倒、で全然更新がおろそかになってる。&lt;/p></description><content:encoded><![CDATA[
              <p>最近全然ブログが更新できていない。（；^ω^）</p>
<p>hugo + git hub でブログをかけるようにしたら、便利かと思ったら、 最初にブログを追加するのが面倒、
gitに上げるのもPCでしかできないから面倒、で全然更新がおろそかになってる。</p>
<p>まぁ、それだけじゃないのかもしれないけど。</p>
<p>そこで、code-serverを入れて、Web上のエディタでどこでも書けるようにして、それをgitであげようと考えました。(⌒〜⌒)ニンマリ</p>
<p>さぁ、うまく行くのやら。。。。</p>
<p>これからなんとかいろいろなものを書くぞー</p>

              ]]></content:encoded></item><item><title>MacでDockerデスクトップをインストールしないで使う方法。(lima)</title><link>https://example.org/posts/mac%E3%81%A7docker%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%84%E3%81%A7%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95lima/</link><pubDate>Thu, 16 Feb 2023 00:40:43 +0900</pubDate><guid>https://example.org/posts/mac%E3%81%A7docker%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%84%E3%81%A7%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95lima/</guid><description>&lt;p>Docker Desktopを使用してもいいけど、
Limaっていうのを使用してDockerを使おうかなと思ったので、めも。
ただ、limaは、dockerやdocker-compose のコマンドがすべて使えるわけではないので、コマンドライン版のDockerもインストールする。&lt;/p></description><content:encoded><![CDATA[
              <p>Docker Desktopを使用してもいいけど、
Limaっていうのを使用してDockerを使おうかなと思ったので、めも。
ただ、limaは、dockerやdocker-compose のコマンドがすべて使えるわけではないので、コマンドライン版のDockerもインストールする。</p>
<p>github<a href="https://github.com/lima-vm/lima">lima-vm/lima</a></p>
<h2 id="インストール">インストール</h2>
<p>HomeBrewでインストールします。</p>
<p>limaだけでなく、Dockerコマンドを使用したいので、Dockerおよびdocker-composeもインストール。</p>
<pre tabindex="0"><code>brew install lima
</code></pre><pre tabindex="0"><code>brew install docker
</code></pre><pre tabindex="0"><code>brew install docker-compose
</code></pre><h2 id="docker用のイメージを構築">Docker用のイメージを構築</h2>
<p>limaのサイトからdocker.yamlを取得する</p>
<blockquote>
<p>github /lima-vm/lima/examples/docker.yaml
<a href="https://github.com/lima-vm/lima/blob/master/examples/docker.yaml">https://github.com/lima-vm/lima/blob/master/examples/docker.yaml</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://github.com/lima-vm/lima/raw/master/examples/docker.yaml
</span></span></code></pre></div><h2 id="dockeryamlを修正">docker.yamlを修正</h2>
<h3 id="イメージを変更">イメージを変更</h3>
<p>Dockerしか使わないので、容量を少なくするためにubuntuからDebianに変更</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">images</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">location</span>: <span style="color:#e6db74">&#34;https://cloud.debian.org/images/cloud/bullseye/20230124-1270/debian-11-generic-amd64-20230124-1270.qcow2&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">arch</span>: <span style="color:#e6db74">&#34;x86_64&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">digest</span>: <span style="color:#e6db74">&#34;sha512:fa152c6159dcb73adb1b573da3631937068c6a465ce7565a16dcce7aebd27c9a62ad783296d408300b99616cad89b8c0092e11df0fc2aa423334d741ac83b1a2&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">location</span>: <span style="color:#e6db74">&#34;https://cloud.debian.org/images/cloud/bullseye/20230124-1270/debian-11-generic-arm64-20230124-1270.qcow2&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">arch</span>: <span style="color:#e6db74">&#34;aarch64&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">digest</span>: <span style="color:#e6db74">&#34;sha512:d714ed2b70322bb2c4adc588f96671192a5ca67f70e20c3fb51c89d55b6a9646f00a6e6f0e5da241b7017916bb19b65a5703a1e3b3869a89c0da7047ac6c4e53&#34;</span>
</span></span></code></pre></div><h3 id="リソースを変更">リソースを変更</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">cpus</span>: <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;8GiB&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">disk</span>: <span style="color:#e6db74">&#34;100GiB&#34;</span>
</span></span></code></pre></div><h3 id="書き込み権限">書き込み権限</h3>
<p>ドキュメントフォルダだけ書き込めるようにしてます</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">mounts</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">location</span>: <span style="color:#e6db74">&#34;~&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">mountPoint</span>: <span style="color:#66d9ef">null</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">writable</span>: <span style="color:#66d9ef">null</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">location</span>: <span style="color:#e6db74">&#34;~/Documents&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">writable</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>個人で使う時は、ユーザー全て書き込める様にしてます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>- <span style="color:#f92672">location</span>: <span style="color:#e6db74">&#34;~&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">writable</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>実際に使用するyamlは、<a href="https://gist.github.com/tama-jp/5759372d725a03bb79deb33d7d285bbd">こちら</a>。</p>
<h2 id="実行">実行</h2>
<p>以下を実行して構築。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>limactl start ./docker.yaml
</span></span><span style="display:flex;"><span><span style="color:#75715e"># --debugをつけると、エラーが発生した際に原因がわかりやすくなる</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># limactl start ./docker.yaml --debug</span>
</span></span></code></pre></div><h3 id="確認">確認</h3>
<p>構築出来ているか確認する</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>limactl ls
</span></span></code></pre></div><pre tabindex="0"><code>❯ limactl ls         
NAME      STATUS     SSH                VMTYPE    ARCH      CPUS    MEMORY    DISK      DIR
docker    Running    127.0.0.1:60006    qemu      x86_64    4       8GiB      100GiB    ~/.lima/docker
</code></pre><h3 id="仮想マシンに入る">仮想マシンに入る</h3>
<h4 id="limactl">limactl</h4>
<p>Dockerが構築されている仮想マシンに直接入るには、以下のコマンドを実行する。</p>
<p>入ったあとは<code>exit</code>で仮想マシンから出る。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>limactl shell docker
</span></span></code></pre></div><h2 id="docker_host-環境変数">DOCKER_HOST 環境変数</h2>
<p><code>.zshrc</code>や<code>.zprofile</code>（MacOSのバージョンによっては<code>.bash_profile</code>）に <code>DOCKER_HOST</code>環境変数を追記して、Dockerのベースをlimaの仮想マシンで使用するように変更する。（Limaのバージョンによっては内容が少々変わる可能性がある）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export DOCKER_HOST<span style="color:#f92672">=</span>unix:///<span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.lima/docker/sock/docker.sock
</span></span></code></pre></div><h3 id="シェル起動時にvm起動">シェル起動時にVM起動</h3>
<p>システムを再起動すると、作成した仮想環境はstopの状態になるので、先程の<code>.zshrc</code>に仮想環境を立ち上げるように追記する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>limactl start docker
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>HUGOでgistなどの埋め込みを実現させる</title><link>https://example.org/posts/hugo%E3%81%A7gist%E3%81%AA%E3%81%A9%E3%81%AE%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Wed, 15 Feb 2023 09:47:32 +0900</pubDate><guid>https://example.org/posts/hugo%E3%81%A7gist%E3%81%AA%E3%81%A9%E3%81%AE%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%95%E3%81%9B%E3%82%8B/</guid><description>&lt;p>大分久しぶりの更新&lt;/p>
&lt;p>ドキュメントの&lt;a href="https://gohugo.io/content-management/shortcodes/">ここ&lt;/a>に載ってますね。&lt;/p>
&lt;h3 id="gist">gist&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; gist [[ユーザー名]] [[コード]] &amp;gt;}}
&lt;/code>&lt;/pre>&lt;h4 id="例">例&lt;/h4>
&lt;p>&lt;a href="https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9">https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9&lt;/a>&lt;/p>
&lt;p>であれば、&lt;/p>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; gist tama-jp cfb018852412af5882428b19003c5ca9 &amp;gt;}}
&lt;/code>&lt;/pre>&lt;p>表示&lt;/p>
&lt;script src="https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9.js">&lt;/script>
&lt;h3 id="tweet">Tweet&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; gist [[ユーザー名]] [[コード]] &amp;gt;}}
&lt;/code>&lt;/pre>&lt;h4 id="例-1">例&lt;/h4>
&lt;p>&lt;a href="https://twitter.com/pain_ame/status/1625641271137292288?s=20&amp;amp;t=GHSkw_zCyhNgjm1zBytAiw">https://twitter.com/pain_ame/status/1625641271137292288?s=20&amp;amp;t=GHSkw_zCyhNgjm1zBytAiw&lt;/a>&lt;/p>
&lt;p>であれば、&lt;/p></description><content:encoded><![CDATA[
              <p>大分久しぶりの更新</p>
<p>ドキュメントの<a href="https://gohugo.io/content-management/shortcodes/">ここ</a>に載ってますね。</p>
<h3 id="gist">gist</h3>
<pre tabindex="0"><code>{{&lt; gist [[ユーザー名]] [[コード]] &gt;}}
</code></pre><h4 id="例">例</h4>
<p><a href="https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9">https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9</a></p>
<p>であれば、</p>
<pre tabindex="0"><code>{{&lt; gist tama-jp cfb018852412af5882428b19003c5ca9 &gt;}}
</code></pre><p>表示</p>
<script src="https://gist.github.com/tama-jp/cfb018852412af5882428b19003c5ca9.js"></script>

<h3 id="tweet">Tweet</h3>
<pre tabindex="0"><code>{{&lt; gist [[ユーザー名]] [[コード]] &gt;}}
</code></pre><h4 id="例-1">例</h4>
<p><a href="https://twitter.com/pain_ame/status/1625641271137292288?s=20&amp;t=GHSkw_zCyhNgjm1zBytAiw">https://twitter.com/pain_ame/status/1625641271137292288?s=20&amp;t=GHSkw_zCyhNgjm1zBytAiw</a></p>
<p>であれば、</p>
<pre tabindex="0"><code>{{&lt; tweet user=&#34;pain_ame&#34; id=&#34;1453110110599868418&#34; &gt;}}
</code></pre><p>表示</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">みなさーん、おパよーございまーっす( ´▽｀)ﾉｼ</p>&mdash; パインアメの【パイン株式会社】（公式）🍍 (@pain_ame) <a href="https://twitter.com/pain_ame/status/1625641271137292288?ref_src=twsrc%5Etfw">February 14, 2023</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3 id="youtube動画">YouTube動画</h3>
<pre tabindex="0"><code>{{&lt; youtube [[コード]] &gt;}}
</code></pre><h4 id="例-2">例</h4>
<p><a href="https://www.youtube.com/watch?v=mXwUKQh8SbU">https://www.youtube.com/watch?v=mXwUKQh8SbU</a></p>
<p>であれば、</p>
<pre tabindex="0"><code>{{&lt; youtube id=&#34;mXwUKQh8SbU&#34; autoplay=&#34;true&#34; &gt;}}
</code></pre><p>表示</p>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mXwUKQh8SbU?autoplay=1&controls=1&end=0&loop=0&mute=1&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>


              ]]></content:encoded></item><item><title>CakePHPの規約ワードメーカー</title><link>https://example.org/posts/cakephp%E3%81%AE%E8%A6%8F%E7%B4%84%E3%83%AF%E3%83%BC%E3%83%89%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC/</link><pubDate>Thu, 01 Dec 2022 20:39:35 +0900</pubDate><guid>https://example.org/posts/cakephp%E3%81%AE%E8%A6%8F%E7%B4%84%E3%83%AF%E3%83%BC%E3%83%89%E3%83%A1%E3%83%BC%E3%82%AB%E3%83%BC/</guid><description>&lt;p>CakePHP 規約ワードメーカーがサイトなくなったと思ってたら、
本家がそのままやっとるじゃん。。。。&lt;/p>
&lt;p>ここ。&lt;/p>
&lt;p>&lt;a href="https://inflector.cakephp.org/">https://inflector.cakephp.org/&lt;/a>&lt;/p></description><content:encoded><![CDATA[
              <p>CakePHP 規約ワードメーカーがサイトなくなったと思ってたら、
本家がそのままやっとるじゃん。。。。</p>
<p>ここ。</p>
<p><a href="https://inflector.cakephp.org/">https://inflector.cakephp.org/</a></p>

              ]]></content:encoded></item><item><title>xcodeインストールのxcodebuildの確認でエラーがでたときの対処法</title><link>https://example.org/posts/xcode%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AExcodebuild%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E3%81%A7%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Thu, 04 Aug 2022 00:29:09 +0900</pubDate><guid>https://example.org/posts/xcode%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AExcodebuild%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E3%81%A7%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description>&lt;p>こう言うのがでた場合。。。。。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ xcodebuild -version
error: tool &amp;#39;xcodebuild&amp;#39; requires Xcode, but active developer directory &amp;#39;/Library/Developer/CommandLineTools&amp;#39; is a command line tools instance
&lt;/code>&lt;/pre>&lt;p>これたたいてみたら、、、、、&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
&lt;/code>&lt;/pre>&lt;p>なおった。。。。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ xcodebuild -version
Xcode 13.4.1
Build version 13F100
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[
              <p>こう言うのがでた場合。。。。。</p>
<pre tabindex="0"><code>$ xcodebuild -version
error: tool &#39;xcodebuild&#39; requires Xcode, but active developer directory &#39;/Library/Developer/CommandLineTools&#39; is a command line tools instance
</code></pre><p>これたたいてみたら、、、、、</p>
<pre tabindex="0"><code>$ sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
</code></pre><p>なおった。。。。</p>
<pre tabindex="0"><code>$ xcodebuild -version
Xcode 13.4.1
Build version 13F100
</code></pre>
              ]]></content:encoded></item><item><title>Vite + Svelte + Tailwind CSS + daisyUI + TypeScript の環境設定</title><link>https://example.org/posts/vite-+-svelte-+-tailwind-css-+-daisyui-+-typescript-%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</link><pubDate>Fri, 29 Jul 2022 16:43:35 +0900</pubDate><guid>https://example.org/posts/vite-+-svelte-+-tailwind-css-+-daisyui-+-typescript-%E3%81%AE%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</guid><description>&lt;p>パパッとコマンドなどだけですが、こんな感じで。。。。。。&lt;/p>
&lt;pre tabindex="0">&lt;code>npm create vite@latest kodawari -- --template svelte-ts
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>cd kodawari
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>npm i -D tailwindcss
npm i -D daisyui
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>npm install
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>npx tailwindcss init -p
&lt;/code>&lt;/pre>&lt;p>./src/app.css に追加&lt;/p>
&lt;pre tabindex="0">&lt;code>@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code>&lt;/pre>&lt;p>./tailwind.config.cjs を更新&lt;/p>
&lt;pre tabindex="0">&lt;code>/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */
module.exports = {
content: [],
theme: {
extend: {},
},
plugins: [],
}
&lt;/code>&lt;/pre>&lt;p>↓&lt;/p></description><content:encoded><![CDATA[
              <p>パパッとコマンドなどだけですが、こんな感じで。。。。。。</p>
<pre tabindex="0"><code>npm create vite@latest kodawari -- --template svelte-ts
</code></pre><pre tabindex="0"><code>cd kodawari
</code></pre><pre tabindex="0"><code>npm i -D tailwindcss
npm i -D daisyui
</code></pre><pre tabindex="0"><code>npm install
</code></pre><pre tabindex="0"><code>npx tailwindcss init -p
</code></pre><p>./src/app.css に追加</p>
<pre tabindex="0"><code>@tailwind base;
@tailwind components;
@tailwind utilities;
</code></pre><p>./tailwind.config.cjs を更新</p>
<pre tabindex="0"><code>/** @type {import(&#39;tailwindcss&#39;).Config} */
module.exports = {
  content: [],
  theme: {
    extend: {},
  },
  plugins: [],
}
</code></pre><p>↓</p>
<pre tabindex="0"><code>/** @type {import(&#39;tailwindcss&#39;).Config} */
module.exports = {
  content: [&#39;./src/**/*.{svelte,js,ts}&#39;],
  theme: {
    extend: {},
  },
  plugins: [require(&#39;daisyui&#39;)],
}
</code></pre><p>./src/App.savelet を更新</p>
<pre tabindex="0"><code>&lt;script lang=&#34;ts&#34;&gt;
    import Counter from &#39;./lib/Counter.svelte&#39;
    import Collapse from &#39;./lib/Collapse.svelte&#39;
    import Modal from &#39;./lib/Modal.svelte&#39;
&lt;/script&gt;

&lt;main&gt;
    &lt;button class=&#34;btn btn-secondary&#34;&gt;Hello daisyui&lt;/button&gt;
    
    &lt;button class=&#34;btn btn-ghost&#34;&gt;Button&lt;/button&gt;
    &lt;button class=&#34;btn btn-link&#34;&gt;Button&lt;/button&gt;

    &lt;div class=&#34;mockup-code&#34;&gt;
        &lt;pre data-prefix=&#34;1&#34;&gt;&lt;code&gt;npm i daisyui&lt;/code&gt;&lt;/pre&gt;
        &lt;pre data-prefix=&#34;2&#34;&gt;&lt;code&gt;installing...&lt;/code&gt;&lt;/pre&gt;
        &lt;pre data-prefix=&#34;3&#34; class=&#34;bg-warning text-warning-content&#34;&gt;&lt;code&gt;Error!&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&#34;card&#34;&gt;
        &lt;Counter/&gt;
    &lt;/div&gt;
        &lt;Modal/&gt;
    &lt;Collapse/&gt;

&lt;/main&gt;
</code></pre><p>./lib/Collapse.svelte を追加</p>
<pre tabindex="0"><code>&lt;div class=&#34;collapse&#34;&gt;
    &lt;input type=&#34;checkbox&#34; /&gt;
    &lt;div class=&#34;collapse-title text-xl font-medium&#34;&gt;
        Click me to show/hide content
    &lt;/div&gt;
    &lt;div class=&#34;collapse-content&#34;&gt;
        &lt;p&gt;hello&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>./lib/Modal.svelte を追加</p>
<pre tabindex="0"><code>
&lt;!-- The button to open modal --&gt;
&lt;label for=&#34;my-modal&#34; class=&#34;btn modal-button&#34;&gt;open modal&lt;/label&gt;

&lt;!-- Put this part before &lt;/body&gt; tag --&gt;
&lt;input type=&#34;checkbox&#34; id=&#34;my-modal&#34; class=&#34;modal-toggle&#34; /&gt;
&lt;div class=&#34;modal&#34;&gt;
    &lt;div class=&#34;modal-box&#34;&gt;
        &lt;h3 class=&#34;font-bold text-lg&#34;&gt;Congratulations random Internet user!&lt;/h3&gt;
        &lt;p class=&#34;py-4&#34;&gt;You&#39;ve been selected for a chance to get one year of subscription to use Wikipedia for free!&lt;/p&gt;
        &lt;div class=&#34;modal-action&#34;&gt;
            &lt;label for=&#34;my-modal&#34; class=&#34;btn&#34;&gt;Yay!&lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>これで、テストしてみる。</p>
<pre tabindex="0"><code>npm run dev
</code></pre><p>こんな感じで表示されます。(^O^)</p>
<p><img src="../img/ViteSvelteTSlocalhost.png" alt="画面"></p>
<p>参考：</p>
<p><a href="https://tailwindcss.com/docs/installation">https://tailwindcss.com/docs/installation</a>
<a href="https://daisyui.com/">https://daisyui.com/</a>
<a href="https://ja.vitejs.dev/guide/#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88">https://ja.vitejs.dev/guide/#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88</a></p>

              ]]></content:encoded></item><item><title>cuiをMacでアプリ化する為のファイル構成</title><link>https://example.org/posts/cui%E3%82%92mac%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E5%8C%96%E3%81%99%E3%82%8B%E7%82%BA%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90/</link><pubDate>Wed, 27 Jul 2022 14:54:26 +0900</pubDate><guid>https://example.org/posts/cui%E3%82%92mac%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E5%8C%96%E3%81%99%E3%82%8B%E7%82%BA%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90/</guid><description>&lt;p>&lt;a href="http://kameya-z.way-nifty.com/blog/">亀屋BLOG&lt;/a>さんの&lt;a href="http://kameya-z.way-nifty.com/blog/2021/10/post-1bd017.html">PC-98えみゅ&lt;/a>でCUI版PC98エミュの紹介がされていたのでコンパイルして見たら、動いた！！&lt;/p>
&lt;p>それで、これいちいち動かすのにコマンドラインからたたくのも面倒だと思い、アプリ化する方法を調べてたのでまとめておく。&lt;/p>
&lt;h2 id="フォルダ構成">フォルダ構成&lt;/h2>
&lt;p>フォルダ構成はこんな感じ&lt;/p></description><content:encoded><![CDATA[
              <p><a href="http://kameya-z.way-nifty.com/blog/">亀屋BLOG</a>さんの<a href="http://kameya-z.way-nifty.com/blog/2021/10/post-1bd017.html">PC-98えみゅ</a>でCUI版PC98エミュの紹介がされていたのでコンパイルして見たら、動いた！！</p>
<p>それで、これいちいち動かすのにコマンドラインからたたくのも面倒だと思い、アプリ化する方法を調べてたのでまとめておく。</p>
<h2 id="フォルダ構成">フォルダ構成</h2>
<p>フォルダ構成はこんな感じ</p>
<pre tabindex="0"><code>np2
└── Contents
├── Info.plist
├── MacOS
│   └── sdlnp21kai &lt;- バイナリ
└── Resources
	└── np2.icns --- アイコン48×48
</code></pre><h2 id="file">File</h2>
<h3 id="infoplist">Info.plist</h3>
<pre tabindex="0"><code>&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;
&lt;plist version=&#34;1.0&#34;&gt;
&lt;dict&gt;
	&lt;key&gt;CFBundleSignature&lt;/key&gt;
	&lt;string&gt;????&lt;/string&gt;
	&lt;key&gt;CFBundlePackageType&lt;/key&gt;
	&lt;string&gt;APPL&lt;/string&gt;
	&lt;key&gt;CFBundleVersion&lt;/key&gt;
	&lt;string&gt;1.0&lt;/string&gt;
	&lt;key&gt;CFBundleExecutable&lt;/key&gt;
	&lt;string&gt;sdlnp21kai&lt;/string&gt;
	&lt;key&gt;CFBundleDisplayName&lt;/key&gt;
	&lt;string&gt;np2&lt;/string&gt;
	&lt;key&gt;CFBundleName&lt;/key&gt;
	&lt;string&gt;np2&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre><h4 id="一覧">一覧</h4>
<table>
  <thead>
      <tr>
          <th style="text-align: left">キー</th>
          <th style="text-align: left">型</th>
          <th style="text-align: left">概要</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">CFBundleSignature</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドルのクリエータを識別する四文字コードです</td>
      </tr>
      <tr>
          <td style="text-align: left">CFBundlePackageType</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドルのタイプを識別する、四文字のコードです。</td>
      </tr>
      <tr>
          <td style="text-align: left">CFBundleVersion</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドルのためのビルドバージョン番号です。</td>
      </tr>
      <tr>
          <td style="text-align: left">CFBundleExecutable</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドル実行可能ファイルの名前です。</td>
      </tr>
      <tr>
          <td style="text-align: left">CFBundleDisplayName</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドルの実際の名前です。</td>
      </tr>
      <tr>
          <td style="text-align: left">CFBundleName</td>
          <td style="text-align: left">String</td>
          <td style="text-align: left">バンドルの短縮表示名です。</td>
      </tr>
  </tbody>
</table>
<h4 id="詳細">詳細</h4>
<h5 id="cfbundlesignature">CFBundleSignature</h5>
<p>このキーは、バンドルのクリエータを識別し、Mac OS 9 のファイルクリエータコードと類似しています。このキーの値は、バンドルを指定する四文字のコードを含む文字列です。たとえば、テキストエディット アプリケーションのためのシグネチャは、ttxt です。</p>
<h5 id="cfbundlepackagetype">CFBundlePackageType</h5>
<p>このキーは、バンドルのタイプを識別し、Mac OS 9 のファイルタイプコードに類似しています。</p>
<p>このキーの値は四文字のコードから構成されています。アプリケーションに対するタイプコードは APPL、フレームワークは FMWK、読み込み可能バンドルは BNDL となります。読み込み可能バンドルについては、あなたが望むのであれば、 BNDL よりももっと具体的なタイプコードを選択することもできます。</p>
<h5 id="cfbundleversion">CFBundleVersion</h5>
<p>このキーは、バンドルの（リリースされた、またはリリースされていない）回数を識別する、バンドルのビルドバージョン番号【build version number】を指定します。【注：「CFBundleShortVersionString」の方は、「リリース」バージョン番号。】</p>
<p>これは、一つかそれ以上のピリオドで区切られた整数から構成される、単調増加文字列です。このキーは各国語化できません。</p>
<h5 id="cfbundleexecutable">CFBundleExecutable</h5>
<p>このキーはバンドルの主な実行可能ファイルの名前を識別します。</p>
<p>アプリケーションの場合、これはアプリケーション実行可能ファイルとなります。</p>
<p>読み込み可能バンドル【loadable bundle】の場合、これはバンドルによって動的に読み込まれるバイナリとなります。</p>
<p>フレームワークの場合、これはフレームワークのための共有ライブラリとなります。</p>
<p>Xcode は、このキーを自動的に、適切なプロジェクトのインフォメーションプロパティリスト ファイルへ追加します。</p>
<p>フレームワークの場合、このキーの値はフレームワーク名から .framework 拡張子を除いたものと同一にする必要があります。もしキーが同じでないと、目標のシステムは起動性能に関する理由のために、起動性能のペナルティを引き起こすことがあります。</p>
<p>値には、名前にいかなる拡張子も含めるべきではありません。</p>
<h5 id="cfbundledisplayname">CFBundleDisplayName</h5>
<p>このキーは、バンドルの表示名を指定します。もしあなたのバンドルの各国語化された名前に対応するのであれば、あなたのインフォメーションプロパティリスト ファイルと、あなたの言語サブディレクトリの InfoPlist.strings ファイルの両方にこのキーを含めてください。</p>
<p>もしあなたがこのキーを各国語化するのであれば、CFBundleName キー【バンドルの短縮名】の各国語化バージョンも含めるべきでしょう。</p>
<p>もし、あなたのバンドルを各国語化することを意図していなければ、このキーをあなたのInfo.plist ファイルに含めてはいけません。このキーを含むことは、バンドル名の表示には影響を与えませんが、このキーの各国語化されたバージョンを捜すための性能上のペナルティを引き起こします。</p>
<p>あなたのバンドルの各国語化された名前を表示する前に、Finder はこのキーの値を、ファイルシステムにおけるあなたのバンドルの実際の名前と比較します。</p>
<p>もし二つの名前が一致すれば、Finder はあなたのバンドルの適切な InfoPlist.strings ファイルからの各国語化された名前の表示を続行します。</p>
<p>もし一致しなければ【たとえばユーザの手によりアプリケーションバンドルの名前が変更された場合】、Finderはファイルシステムにおける名前を表示します。</p>
<h5 id="cfbundlename">CFBundleName</h5>
<p>このキーは、バンドルの短縮名を識別します。この名前は長さを16文字以下とし、メニューバーやアプリケーションの情報ウインドウにおける表示のために適切なものとする必要があります。</p>
<p>あなたは、このキーに対する各国語化された値を提供するために、適切な .lproj サブディレクトリの InfoPlist.strings ファイル内にこのキーを含めることができます。</p>
<p>もしこのキーを各国語化するのであれば、「CFBundleDisplayName」キー【バンドルの短縮していない名前】も含めるべきでしょう。</p>
<p>参考：
<a href="http://potting.syuriken.jp/potting_conv/BPRuntimeConfig_J/chapter1.html">http://potting.syuriken.jp/potting_conv/BPRuntimeConfig_J/chapter1.html</a></p>

              ]]></content:encoded></item><item><title>zshの初期設定</title><link>https://example.org/posts/zsh%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</link><pubDate>Wed, 27 Jul 2022 10:47:45 +0900</pubDate><guid>https://example.org/posts/zsh%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</guid><description>&lt;p>ちょっとしたashの設定です。&lt;/p>
&lt;h2 id="homebrewからインストール">Homebrewからインストール&lt;/h2>
&lt;pre tabindex="0">&lt;code>brew install zsh
&lt;/code>&lt;/pre>&lt;p>シェル一覧リストを追加&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo sh -c &amp;#34;echo &amp;#39;/usr/local/bin/zsh&amp;#39; &amp;gt;&amp;gt; /etc/shells&amp;#34;
&lt;/code>&lt;/pre>&lt;p>インストールしたzshに設定&lt;/p>
&lt;pre tabindex="0">&lt;code>chsh -s /usr/local/bin/zsh
Changing shell for ruedap.
Password for ruedap: パスワードを入力する
&lt;/code>&lt;/pre>&lt;h2 id="zsh-completionsのインストール">zsh-completionsのインストール&lt;/h2>
&lt;p>補完機能の強化&lt;/p></description><content:encoded><![CDATA[
              <p>ちょっとしたashの設定です。</p>
<h2 id="homebrewからインストール">Homebrewからインストール</h2>
<pre tabindex="0"><code>brew install zsh
</code></pre><p>シェル一覧リストを追加</p>
<pre tabindex="0"><code>sudo sh -c &#34;echo &#39;/usr/local/bin/zsh&#39; &gt;&gt; /etc/shells&#34;
</code></pre><p>インストールしたzshに設定</p>
<pre tabindex="0"><code>chsh -s /usr/local/bin/zsh
Changing shell for ruedap.
Password for ruedap: パスワードを入力する
</code></pre><h2 id="zsh-completionsのインストール">zsh-completionsのインストール</h2>
<p>補完機能の強化</p>
<pre tabindex="0"><code>brew install zsh-completions
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code># zsh-completions(補完機能)の設定
if type brew &amp;&gt;/dev/null; then
 FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

 autoload -Uz compinit
 compinit
fi
</code></pre><h2 id="zsh-syntax-highlighting-のインストール">zsh-syntax-highlighting のインストール</h2>
<p>コマンドにシンタックスハイライトをつける</p>
<pre tabindex="0"><code>brew install zsh-syntax-highlighting
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
</code></pre><h2 id="zsh-autosuggestions-のインストール">zsh-autosuggestions のインストール</h2>
<p>ターミナルのコマンド履歴に基づいてコマンド候補を表示、入力補完もしてくれる。</p>
<pre tabindex="0"><code>brew install zsh-autosuggestions
</code></pre><p>~./zshrc</p>
<pre tabindex="0"><code> source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
</code></pre><h2 id="色を使用出来るようにする">色を使用出来るようにする</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>autoload -Uz colors &amp;&amp; colors
</code></pre><h2 id="日本語ファイル名を表示可能にする">日本語ファイル名を表示可能にする</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt print_eight_bit
</code></pre><h2 id="cd-なしでもディレクトリ移動">cd なしでもディレクトリ移動</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_cd
</code></pre><h2 id="ビープ音の停止">ビープ音の停止</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt no_beep
</code></pre><h2 id="ビープ音の停止補完時">ビープ音の停止(補完時)</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt nolistbeep
</code></pre><h2 id="cd-tab-で以前移動したディレクトリを表示">cd [TAB] で以前移動したディレクトリを表示</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_pushd
</code></pre><h2 id="ヒストリ-履歴-を保存数を増やす">ヒストリ (履歴) を保存、数を増やす</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
</code></pre><h2 id="同時に起動した-zsh-の間でヒストリを共有する">同時に起動した zsh の間でヒストリを共有する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt share_history
</code></pre><h2 id="直前と同じコマンドの場合はヒストリに追加しない">直前と同じコマンドの場合はヒストリに追加しない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_dups
</code></pre><h2 id="同じコマンドをヒストリに残さない">同じコマンドをヒストリに残さない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_all_dups
</code></pre><h2 id="スペースから始まるコマンド行はヒストリに残さない">スペースから始まるコマンド行はヒストリに残さない</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_ignore_space
</code></pre><h2 id="ヒストリに保存するときに余分なスペースを削除する">ヒストリに保存するときに余分なスペースを削除する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt hist_reduce_blanks
</code></pre><h2 id="補完で小文字でも大文字にマッチさせる">補完で小文字でも大文字にマッチさせる</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>zstyle &#39;:completion:*&#39; matcher-list &#39;m:{a-z}={A-Z}&#39;
</code></pre><h2 id="パス名の補完候補時パス名を選択">パス名の補完候補時パス名を選択</h2>
<p>[TAB] でパス名の補完候補を表示したあと、
続けて [TAB] を押すと候補からパス名を選択できるようになる
候補を選ぶには [TAB] か Ctrl-N,B,F,P</p>
<p>~./zshrc</p>
<pre tabindex="0"><code>zstyle &#39;:completion:*:default&#39; menu select=1
</code></pre><h2 id="コマンドのスペルを訂正する">コマンドのスペルを訂正する</h2>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt correct
</code></pre><h2 id="cd-した先のディレクトリをディレクトリスタックに追加する">cd した先のディレクトリをディレクトリスタックに追加する</h2>
<p>cd [TAB] でディレクトリのヒストリが表示されるので、選択して移動できる
※ ディレクトリスタック: 今までに行ったディレクトリのヒストリのこと</p>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt auto_pushd
</code></pre><h1 id="pushd-したときディレクトリがすでにスタックに含まれていればスタックに追加しない">pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない</h1>
<p>~./zshrc</p>
<pre tabindex="0"><code>setopt pushd_ignore_dups
</code></pre><h2 id="拡張-glob-を有効にする">拡張 glob を有効にする</h2>
<p>拡張globを有効にする
拡張globを有効にすると # ~ ^ もパターンとして扱われる
glob: パス名にマッチするワイルドカードパターンのこと
※ たとえば mv hoge.* ~/dir というコマンドにおける * のこと
~./zshrc</p>
<pre tabindex="0"><code>setopt extended_glob
</code></pre><h2 id="単語の一部として扱われる文字のセットを指定する">単語の一部として扱われる文字のセットを指定する</h2>
<p>単語の一部として扱われる文字のセットを指定する
ここではデフォルトのセットから / を抜いたものにしている
※ たとえば Ctrl-W でカーソル前の1単語を削除したとき / までで削除が止まる
~./zshrc</p>
<pre tabindex="0"><code>WORDCHARS=&#39;*?_-.[]~=&amp;;!#$%^(){}&lt;&gt;&#39;
</code></pre><h2 id="コマンド実行結果のあとに空行を挿入する">コマンド実行結果のあとに空行を挿入する</h2>
<p>~/.zshrc</p>
<pre tabindex="0"><code>add_newline() {
  if [[ -z $PS1_NEWLINE_LOGIN ]]; then
    PS1_NEWLINE_LOGIN=true
  else
    printf &#39;\n&#39;
  fi
}
precmd() { add_newline }
</code></pre>
              ]]></content:encoded></item><item><title>PostgreSQLの自動採番をなおす</title><link>https://example.org/posts/postgresql%E3%81%AE%E8%87%AA%E5%8B%95%E6%8E%A1%E7%95%AA%E3%82%92%E3%81%AA%E3%81%8A%E3%81%99/</link><pubDate>Fri, 22 Jul 2022 19:01:53 +0900</pubDate><guid>https://example.org/posts/postgresql%E3%81%AE%E8%87%AA%E5%8B%95%E6%8E%A1%E7%95%AA%E3%82%92%E3%81%AA%E3%81%8A%E3%81%99/</guid><description>&lt;h2 id="シーケンスオブジェクトの値の更新">シーケンスオブジェクトの値の更新&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-postgresql" data-lang="postgresql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> MAX(id) &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> nextval(&lt;span style="color:#e6db74">&amp;#39;table_id_seq&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> setval(&lt;span style="color:#e6db74">&amp;#39;table_id_seq&amp;#39;&lt;/span>, (&lt;span style="color:#66d9ef">SELECT&lt;/span> MAX(id) &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[
              <h2 id="シーケンスオブジェクトの値の更新">シーケンスオブジェクトの値の更新</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-postgresql" data-lang="postgresql"><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> MAX(id) <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> nextval(<span style="color:#e6db74">&#39;table_id_seq&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> setval(<span style="color:#e6db74">&#39;table_id_seq&#39;</span>, (<span style="color:#66d9ef">SELECT</span> MAX(id) <span style="color:#66d9ef">FROM</span> <span style="color:#66d9ef">table</span>));
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>Nodebrewのインストールと使い方</title><link>https://example.org/posts/nodebrew%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Fri, 22 Jul 2022 11:14:09 +0900</pubDate><guid>https://example.org/posts/nodebrew%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>&lt;h2 id="nodebrewをインストールする">Nodebrewをインストールする&lt;/h2>
&lt;p>インストール&lt;/p>
&lt;pre tabindex="0">&lt;code>brew install nodebrew
&lt;/code>&lt;/pre>&lt;p>確認&lt;/p>
&lt;pre tabindex="0">&lt;code>nodebrew -v
&lt;/code>&lt;/pre>&lt;p>バージョンが表示されればOK。&lt;/p>
&lt;p>.zshrcなどに環境変数を追加
vi ~/.zshrc&lt;/p>
&lt;pre tabindex="0">&lt;code>export PATH=$HOME/.nodebrew/current/bin:$PATH
&lt;/code>&lt;/pre>&lt;p>初期化&lt;/p>
&lt;pre tabindex="0">&lt;code>nodebrew setup
&lt;/code>&lt;/pre>&lt;p>バージョン指定してnodeをインストールする
インストール可能なバージョンを確認&lt;/p></description><content:encoded><![CDATA[
              <h2 id="nodebrewをインストールする">Nodebrewをインストールする</h2>
<p>インストール</p>
<pre tabindex="0"><code>brew install nodebrew
</code></pre><p>確認</p>
<pre tabindex="0"><code>nodebrew -v
</code></pre><p>バージョンが表示されればOK。</p>
<p>.zshrcなどに環境変数を追加
vi ~/.zshrc</p>
<pre tabindex="0"><code>export PATH=$HOME/.nodebrew/current/bin:$PATH
</code></pre><p>初期化</p>
<pre tabindex="0"><code>nodebrew setup
</code></pre><p>バージョン指定してnodeをインストールする
インストール可能なバージョンを確認</p>
<pre tabindex="0"><code>nodebrew ls-remote
</code></pre><h2 id="nodeのインストール">nodeのインストール</h2>
<pre tabindex="0"><code>nodebrew install-binary &lt;version&gt;
</code></pre><p>例：</p>
<pre tabindex="0"><code>nodebrew install-binary v18.6.0
</code></pre><h2 id="インストールしたバージョンを確認">インストールしたバージョンを確認</h2>
<pre tabindex="0"><code>nodebrew ls
</code></pre><h2 id="使いたいバージョンを指定">使いたいバージョンを指定</h2>
<pre tabindex="0"><code>nodebrew use v18.6.0
</code></pre><h2 id="アンインストール">アンインストール</h2>
<pre tabindex="0"><code>nodebrew uninstall &lt;version&gt;
</code></pre><p>例：</p>
<pre tabindex="0"><code>nodebrew uninstall v18.6.0
</code></pre><h2 id="最終確認">最終確認</h2>
<p>もう一度nodebrew lsを叩いて、currentが指定されてればOK。
最後に node -vでバージョンが表示されれば万事完了！</p>

              ]]></content:encoded></item><item><title>Wails v2の初期設定</title><link>https://example.org/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</link><pubDate>Thu, 21 Jul 2022 22:43:00 +0900</pubDate><guid>https://example.org/posts/wails-v2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</guid><description>&lt;h2 id="wailsインストール">wailsインストール&lt;/h2>
&lt;pre tabindex="0">&lt;code>go install github.com/wailsapp/wails/v2/cmd/wails@latest
&lt;/code>&lt;/pre>&lt;h2 id="ツールのcheck">ツールのcheck&lt;/h2>
&lt;pre tabindex="0">&lt;code>wails doctor
&lt;/code>&lt;/pre>&lt;h2 id="初期設定">初期設定&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>wails init -n &lt;span style="color:#f92672">[&lt;/span>プロジェクトディレクトリ名&lt;span style="color:#f92672">]&lt;/span> -t &lt;span style="color:#f92672">[&lt;/span>テンプレート名または、url&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wails init -n tamatan -t svelte-ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>現在バグなのか、フロントエンドの初期化がうまく行かないので
yarnまたは、npm installを実行する。
(yarnの方がうまく行くような気がする。)&lt;/p></description><content:encoded><![CDATA[
              <h2 id="wailsインストール">wailsインストール</h2>
<pre tabindex="0"><code>go install github.com/wailsapp/wails/v2/cmd/wails@latest
</code></pre><h2 id="ツールのcheck">ツールのcheck</h2>
<pre tabindex="0"><code>wails doctor 
</code></pre><h2 id="初期設定">初期設定</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails init -n <span style="color:#f92672">[</span>プロジェクトディレクトリ名<span style="color:#f92672">]</span> -t <span style="color:#f92672">[</span>テンプレート名または、url<span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails init -n tamatan -t svelte-ts 
</span></span></code></pre></div><p>現在バグなのか、フロントエンドの初期化がうまく行かないので
yarnまたは、npm installを実行する。
(yarnの方がうまく行くような気がする。)</p>
<pre tabindex="0"><code>cd tamatan/frontend
yarn
</code></pre><p>テンプレートは、 リリースのv2.0.0-beta.35に書いてあった</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Lit + Vite</td>
          <td style="text-align: left">lit</td>
          <td style="text-align: left">Lit + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Lit + Vite (Typescript)</td>
          <td style="text-align: left">lit-ts</td>
          <td style="text-align: left">Lit + TS + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Preact + Vite</td>
          <td style="text-align: left">preact</td>
          <td style="text-align: left">Preact + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Preact + Vite (Typescript)</td>
          <td style="text-align: left">preact-ts</td>
          <td style="text-align: left">Preact + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">React + Vite</td>
          <td style="text-align: left">react</td>
          <td style="text-align: left">React + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">React + Vite (Typescript)</td>
          <td style="text-align: left">react-ts</td>
          <td style="text-align: left">React + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Svelte + Vite</td>
          <td style="text-align: left">svelte</td>
          <td style="text-align: left">Svelte + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Svelte + Vite (Typescript)</td>
          <td style="text-align: left">svelte-ts</td>
          <td style="text-align: left">Svelte + TS + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vanilla + Vite</td>
          <td style="text-align: left">vanilla</td>
          <td style="text-align: left">Vanilla + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vanilla + Vite (Typescript)</td>
          <td style="text-align: left">vanilla-ts</td>
          <td style="text-align: left">Vanilla + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vue + Vite</td>
          <td style="text-align: left">vue</td>
          <td style="text-align: left">Vue + Vite development server</td>
      </tr>
      <tr>
          <td style="text-align: left">Vue + Vite (Typescript)</td>
          <td style="text-align: left">vue-ts</td>
          <td style="text-align: left">Vue + Vite development server</td>
      </tr>
  </tbody>
</table>
<h3 id="vue">Vue</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">misitebao/wails-template-vue</td>
          <td style="text-align: left"><a href="https://github.com/misitebao/wails-template-vue">https://github.com/misitebao/wails-template-vue</a></td>
          <td style="text-align: left">A template using Vite,Vue and Vue-Router(Support both JavaScript and TypeScript)</td>
      </tr>
      <tr>
          <td style="text-align: left">wails-vite-vue-ts</td>
          <td style="text-align: left"><a href="https://github.com/codydbentley/wails-vite-vue-ts">https://github.com/codydbentley/wails-vite-vue-ts</a></td>
          <td style="text-align: left">Vue 3 TypeScript with Vite (and instructions to add features)</td>
      </tr>
      <tr>
          <td style="text-align: left">codydbentley/wails-vite-vue-the-works</td>
          <td style="text-align: left"><a href="https://github.com/codydbentley/wails-vite-vue-the-works">https://github.com/codydbentley/wails-vite-vue-the-works</a></td>
          <td style="text-align: left">Vue 3 TypeScript with Vite, Vuex, Vue Router, Sass, and ESLint + Prettier</td>
      </tr>
  </tbody>
</table>
<h3 id="angular">Angular</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">TAINCER / wails-angular-template</td>
          <td style="text-align: left"><a href="https://github.com/TAINCER/wails-angular-template">https://github.com/TAINCER/wails-angular-template</a></td>
          <td style="text-align: left">Angular with TypeScript, Sass, Hot-Reload, Code-Splitting and i18n</td>
      </tr>
  </tbody>
</table>
<h3 id="react">React</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">AlienRecall / wails-react-template</td>
          <td style="text-align: left"><a href="https://github.com/AlienRecall/wails-react-template">https://github.com/AlienRecall/wails-react-template</a></td>
          <td style="text-align: left">A template using reactjs</td>
      </tr>
      <tr>
          <td style="text-align: left">flin7 / wails-react-template</td>
          <td style="text-align: left"><a href="https://github.com/flin7/wails-react-template">https://github.com/flin7/wails-react-template</a></td>
          <td style="text-align: left">A minimal template for React that supports live development</td>
      </tr>
      <tr>
          <td style="text-align: left">LGiki / wails-template-nextjs</td>
          <td style="text-align: left"><a href="https://github.com/LGiki/wails-template-nextjs">https://github.com/LGiki/wails-template-nextjs</a></td>
          <td style="text-align: left">A template using Next.js and TypeScript</td>
      </tr>
  </tbody>
</table>
<h3 id="svelte">Svelte</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">raitonoberu / wails-svelte-template</td>
          <td style="text-align: left"><a href="https://github.com/raitonoberu/wails-svelte-template">https://github.com/raitonoberu/wails-svelte-template</a></td>
          <td style="text-align: left">Svelteを使用したテンプレート</td>
      </tr>
      <tr>
          <td style="text-align: left">BillBuilt / wails-vite-svelte-template</td>
          <td style="text-align: left"><a href="https://github.com/BillBuilt/wails-vite-svelte-template">https://github.com/BillBuilt/wails-vite-svelte-template</a></td>
          <td style="text-align: left">A template using Svelte and Vite</td>
      </tr>
      <tr>
          <td style="text-align: left">BillBuilt / wails-vite-svelte-tailwind-template</td>
          <td style="text-align: left"><a href="https://github.com/BillBuilt/wails-vite-svelte-tailwind-template">https://github.com/BillBuilt/wails-vite-svelte-tailwind-template</a></td>
          <td style="text-align: left">A template using Svelte and Vite with TailwindCSS v3</td>
      </tr>
  </tbody>
</table>
<h3 id="elm">Elm</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">SHORT NAME</th>
          <th style="text-align: left">TEMPLATE</th>
          <th style="text-align: left">DESCRIPTION</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">benjamin-thomas / wails-elm-template</td>
          <td style="text-align: left"><a href="https://github.com/benjamin-thomas/wails-elm-template">https://github.com/benjamin-thomas/wails-elm-template</a></td>
          <td style="text-align: left">Develop your GUI app with functional programming and a snappy hot-reload setup 🎉 🚀</td>
      </tr>
  </tbody>
</table>
<h2 id="テスト起動">テスト起動</h2>
<p>うまく行かないときは、
もう一度、yarn</p>
<pre tabindex="0"><code>wails dev
</code></pre><h2 id="ビルド">ビルド</h2>
<pre tabindex="0"><code>wails build 
</code></pre><pre tabindex="0"><code>wails build  -platform &lt;各プラットフォーム&gt;
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>wails build -platform darwin/universal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wails build -platform windows
</span></span></code></pre></div><table>
  <thead>
      <tr>
          <th style="text-align: left">Platform</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">darwin</td>
          <td style="text-align: left">MacOS + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/amd64</td>
          <td style="text-align: left">MacOS 10.13+ AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/arm64</td>
          <td style="text-align: left">MacOS 11.0+ ARM64</td>
      </tr>
      <tr>
          <td style="text-align: left">darwin/universal</td>
          <td style="text-align: left">MacOS AMD64+ARM64 universal application</td>
      </tr>
      <tr>
          <td style="text-align: left">windows</td>
          <td style="text-align: left">Windows 10/11 + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">windows/amd64</td>
          <td style="text-align: left">Windows 10/11 AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">windows/arm64</td>
          <td style="text-align: left">Windows 10/11 ARM64</td>
      </tr>
      <tr>
          <td style="text-align: left">linux</td>
          <td style="text-align: left">Linux + architecture of build machine</td>
      </tr>
      <tr>
          <td style="text-align: left">linux/amd64</td>
          <td style="text-align: left">Linux AMD64</td>
      </tr>
      <tr>
          <td style="text-align: left">linux/arm64</td>
          <td style="text-align: left">Linux ARM64</td>
      </tr>
  </tbody>
</table>
<p>こんな感じかな。</p>

              ]]></content:encoded></item><item><title>iOS(obj-c)の画面遷移</title><link>https://example.org/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</link><pubDate>Thu, 21 Jul 2022 22:16:58 +0900</pubDate><guid>https://example.org/posts/iosobj-c%E3%81%AE%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB/</guid><description>&lt;p>・コードでの遷移
・StoryBoardのsegueを使った遷移
・NavigationControllerを使った遷移&lt;/p>
&lt;h2 id="present">Present&lt;/h2>
&lt;pre tabindex="0">&lt;code>[self presentViewController:移動先ViewController animated:YES completion:nil];
&lt;/code>&lt;/pre>&lt;h2 id="segue">segue&lt;/h2>
&lt;pre tabindex="0">&lt;code>[self performSegueWithIdentifier:@&amp;#34;セグエのID&amp;#34; sender:self];
&lt;/code>&lt;/pre>&lt;h2 id="push">Push&lt;/h2>
&lt;pre tabindex="0">&lt;code>[self.navigationController pushViewController:移動先ViewController animated:YES];
&lt;/code>&lt;/pre>&lt;h2 id="pop">Pop&lt;/h2>
&lt;h3 id="指定ビューコントローラーへ">指定ビューコントローラーへ&lt;/h3>
&lt;pre tabindex="0">&lt;code>[self.navigationController popToViewController:viewController animated:YES];
&lt;/code>&lt;/pre>&lt;h3 id="前の画面に戻る">前の画面に戻る&lt;/h3>
&lt;pre tabindex="0">&lt;code>[self.navigationController popViewControllerAnimated:YES];
&lt;/code>&lt;/pre>&lt;h3 id="navigationcontrollerの１番目の画面に戻る">NavigationControllerの１番目の画面に戻る&lt;/h3>
&lt;pre tabindex="0">&lt;code>[self.navigationController popToRootViewControllerAnimated:YES];
&lt;/code>&lt;/pre>&lt;h2 id="storyboard">StoryBoard&lt;/h2>
&lt;h4 id="storyboard-id">・StoryBoard ID&lt;/h4>
&lt;p>※storyboardファイルで &amp;lsquo;identify → StoryBoard ID&amp;rsquo;の入力が必要&lt;/p></description><content:encoded><![CDATA[
              <p>・コードでの遷移
・StoryBoardのsegueを使った遷移
・NavigationControllerを使った遷移</p>
<h2 id="present">Present</h2>
<pre tabindex="0"><code>[self presentViewController:移動先ViewController animated:YES completion:nil];
</code></pre><h2 id="segue">segue</h2>
<pre tabindex="0"><code>[self performSegueWithIdentifier:@&#34;セグエのID&#34; sender:self];
</code></pre><h2 id="push">Push</h2>
<pre tabindex="0"><code>[self.navigationController pushViewController:移動先ViewController animated:YES];
</code></pre><h2 id="pop">Pop</h2>
<h3 id="指定ビューコントローラーへ">指定ビューコントローラーへ</h3>
<pre tabindex="0"><code>[self.navigationController popToViewController:viewController animated:YES];
</code></pre><h3 id="前の画面に戻る">前の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popViewControllerAnimated:YES];
</code></pre><h3 id="navigationcontrollerの１番目の画面に戻る">NavigationControllerの１番目の画面に戻る</h3>
<pre tabindex="0"><code>[self.navigationController popToRootViewControllerAnimated:YES];
</code></pre><h2 id="storyboard">StoryBoard</h2>
<h4 id="storyboard-id">・StoryBoard ID</h4>
<p>※storyboardファイルで &lsquo;identify → StoryBoard ID&rsquo;の入力が必要</p>
<pre tabindex="0"><code>UIStoryBoard* storyBoard = [UIStoryboard storyboardWithName:@&#34;ストーリボードID&#34; bundle:nil];
UIViewController* viewController = [storyboard instantiateInitialViewController];
</code></pre><h4 id="storyboard-initial-viewcontroller">・StoryBoard initial ViewController</h4>
<p>※storyboardファイルで &lsquo;is initial View Controller&rsquo;のチェックが必要</p>
<pre tabindex="0"><code>UINavigationController* rootNavigationController = [storyboard instantiateInitialViewController];
UIViewController* viewController = [[rootNavigationController viewControllers] lastObject];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)のセグエの戻り(push)</title><link>https://example.org/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</link><pubDate>Thu, 21 Jul 2022 22:14:45 +0900</pubDate><guid>https://example.org/posts/iosobj-c%E3%81%AE%E3%82%BB%E3%82%B0%E3%82%A8%E3%81%AE%E6%88%BB%E3%82%8Apush/</guid><description>&lt;h2 id="１つ前の画面に戻る">１つ前の画面に戻る&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[self.navigationController popViewControllerAnimated:YES];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ルート画面まで一気に戻る">ルート画面まで一気に戻る&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>[self.navigationController popToRootViewControllerAnimated:YES];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="任意の画面uiviewcontrollerまで戻る">任意の画面（UIViewController）まで戻る&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>[self.navigationController popToViewController:UIViewController animated:YES];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[
              <h2 id="１つ前の画面に戻る">１つ前の画面に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[self.navigationController popViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="ルート画面まで一気に戻る">ルート画面まで一気に戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToRootViewControllerAnimated:YES];
</span></span></code></pre></div><h2 id="任意の画面uiviewcontrollerまで戻る">任意の画面（UIViewController）まで戻る</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[self.navigationController popToViewController:UIViewController animated:YES];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>iOS(obj-c)で文字列結合</title><link>https://example.org/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</link><pubDate>Thu, 21 Jul 2022 22:12:09 +0900</pubDate><guid>https://example.org/posts/iosobj-c%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E7%B5%90%E5%90%88/</guid><description>&lt;pre tabindex="0">&lt;code class="language-ca" data-lang="ca"> NSString *urlString =[NSString stringWithFormat:@&amp;#34;%@/test.php&amp;#34;,dns];
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[
              <pre tabindex="0"><code class="language-ca" data-lang="ca">    NSString *urlString =[NSString stringWithFormat:@&#34;%@/test.php&#34;,dns];
</code></pre>
              ]]></content:encoded></item><item><title>iOS(obj-c)でgetとPOST</title><link>https://example.org/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</link><pubDate>Thu, 21 Jul 2022 22:09:00 +0900</pubDate><guid>https://example.org/posts/iosobj-c%E3%81%A7get%E3%81%A8post/</guid><description>&lt;h2 id="get">GET&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>NSString &lt;span style="color:#f92672">*&lt;/span>urlString &lt;span style="color:#f92672">=&lt;/span> [NSString stringWithFormat:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://xxxxx.co.jp/test?key1=%@&amp;#34;&lt;/span>,key1];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;urlString:%@&amp;#34;&lt;/span>, urlString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSURLSession &lt;span style="color:#f92672">*&lt;/span>urlSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSURLSessionConfiguration &lt;span style="color:#f92672">*&lt;/span>sessionConfig &lt;span style="color:#f92672">=&lt;/span> [NSURLSessionConfiguration defaultSessionConfiguration];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionConfig.timeoutIntervalForRequest &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionConfig.timeoutIntervalForResource &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> urlSession &lt;span style="color:#f92672">=&lt;/span> [NSURLSession sessionWithConfiguration:sessionConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delegate:nil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delegateQueue:nil];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NSLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;get start&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSMutableURLRequest &lt;span style="color:#f92672">*&lt;/span>request &lt;span style="color:#f92672">=&lt;/span> [NSMutableURLRequest new];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setURL:[NSURL URLWithString:urlString]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setValue:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;YKTHttpClient&amp;#34;&lt;/span> forHTTPHeaderField:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;User-Agent&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setHTTPMethod:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> NSURLSessionDataTask &lt;span style="color:#f92672">*&lt;/span>dataTask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> [urlSession dataTaskWithRequest:request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> completionHandler:&lt;span style="color:#f92672">^&lt;/span>(NSData &lt;span style="color:#f92672">*&lt;/span>data, NSURLResponse &lt;span style="color:#f92672">*&lt;/span>response, NSError &lt;span style="color:#f92672">*&lt;/span>error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSHTTPURLResponse &lt;span style="color:#f92672">*&lt;/span>httpUrlResponse &lt;span style="color:#f92672">=&lt;/span> (NSHTTPURLResponse &lt;span style="color:#f92672">*&lt;/span>) response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Status code: %ld&amp;#34;&lt;/span>, httpUrlResponse.statusCode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CFStringEncoding encoding &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding&lt;/span>((CFStringRef) [response textEncodingName]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSString &lt;span style="color:#f92672">*&lt;/span>body &lt;span style="color:#f92672">=&lt;/span> [[NSString alloc] initWithData:data encoding:&lt;span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding&lt;/span>(encoding)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSData &lt;span style="color:#f92672">*&lt;/span>restoreData &lt;span style="color:#f92672">=&lt;/span> [[NSData alloc] initWithBase64EncodedString:body options:&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSString &lt;span style="color:#f92672">*&lt;/span>restoreString &lt;span style="color:#f92672">=&lt;/span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch_async&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch_get_main_queue&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">^&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.textView.text &lt;span style="color:#f92672">=&lt;/span> restoreString;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [dataTask resume];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="post">POST&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C" data-lang="C">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NSString &lt;span style="color:#f92672">*&lt;/span>urlString &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://xxxx.co.jp/test&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSDictionary &lt;span style="color:#f92672">*&lt;/span>params &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> uuid,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;urlString:%@&amp;#34;&lt;/span>, urlString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 連想配列として与えられたパラメータをクエリ文字列に変換する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> NSData &lt;span style="color:#f92672">*&lt;/span>query &lt;span style="color:#f92672">=&lt;/span> [self buildQueryWithDictionary: params];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSURLSession &lt;span style="color:#f92672">*&lt;/span>urlSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSURLSessionConfiguration &lt;span style="color:#f92672">*&lt;/span>sessionConfig &lt;span style="color:#f92672">=&lt;/span> [NSURLSessionConfiguration defaultSessionConfiguration];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionConfig.timeoutIntervalForRequest &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionConfig.timeoutIntervalForResource &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> urlSession &lt;span style="color:#f92672">=&lt;/span> [NSURLSession sessionWithConfiguration:sessionConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delegate:nil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delegateQueue:nil];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">NSLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;get start&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSMutableURLRequest &lt;span style="color:#f92672">*&lt;/span>request &lt;span style="color:#f92672">=&lt;/span> [NSMutableURLRequest new];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setURL:[NSURL URLWithString:urlString]];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setCachePolicy:NSURLRequestUseProtocolCachePolicy];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setValue:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;iOS&amp;#34;&lt;/span> forHTTPHeaderField:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;User-Agent&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setHTTPMethod:&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setValue: &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span> forHTTPHeaderField: &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setValue: [NSString stringWithFormat: &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%lu&amp;#34;&lt;/span>, (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>)[query length]] forHTTPHeaderField: &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Content-Length&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [request setHTTPBody: query];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> NSURLSessionDataTask &lt;span style="color:#f92672">*&lt;/span>dataTask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> [urlSession dataTaskWithRequest:request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> completionHandler:&lt;span style="color:#f92672">^&lt;/span>(NSData &lt;span style="color:#f92672">*&lt;/span>data, NSURLResponse &lt;span style="color:#f92672">*&lt;/span>response, NSError &lt;span style="color:#f92672">*&lt;/span>error) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSHTTPURLResponse &lt;span style="color:#f92672">*&lt;/span>httpUrlResponse &lt;span style="color:#f92672">=&lt;/span> (NSHTTPURLResponse &lt;span style="color:#f92672">*&lt;/span>) response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DLog&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Status code: %ld&amp;#34;&lt;/span>, httpUrlResponse.statusCode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CFStringEncoding encoding &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding&lt;/span>((CFStringRef) [response textEncodingName]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSString &lt;span style="color:#f92672">*&lt;/span>body &lt;span style="color:#f92672">=&lt;/span> [[NSString alloc] initWithData:data encoding:&lt;span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding&lt;/span>(encoding)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSData &lt;span style="color:#f92672">*&lt;/span>restoreData &lt;span style="color:#f92672">=&lt;/span> [[NSData alloc] initWithBase64EncodedString:body options:&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NSString &lt;span style="color:#f92672">*&lt;/span>restoreString &lt;span style="color:#f92672">=&lt;/span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch_async&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dispatch_get_main_queue&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">^&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [dataTask resume];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description><content:encoded><![CDATA[
              <h2 id="get">GET</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxxx.co.jp/test?key1=%@&#34;</span>,key1];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NSLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;YKTHttpClient&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;GET&#34;</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> <span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding</span>((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:<span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding</span>(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">dispatch_async</span>(
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">dispatch_get_main_queue</span>(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                            self.textView.text <span style="color:#f92672">=</span> restoreString;
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div><h2 id="post">POST</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NSString <span style="color:#f92672">*</span>urlString <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;https://xxxx.co.jp/test&#34;</span>;
</span></span><span style="display:flex;"><span>    NSDictionary <span style="color:#f92672">*</span>params <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> name,
</span></span><span style="display:flex;"><span>        <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;uuid&#34;</span><span style="color:#f92672">:</span> uuid,
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;urlString:%@&#34;</span>, urlString)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 連想配列として与えられたパラメータをクエリ文字列に変換する
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSData <span style="color:#f92672">*</span>query <span style="color:#f92672">=</span> [self buildQueryWithDictionary: params];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    NSURLSession <span style="color:#f92672">*</span>urlSession;
</span></span><span style="display:flex;"><span>    NSURLSessionConfiguration <span style="color:#f92672">*</span>sessionConfig <span style="color:#f92672">=</span> [NSURLSessionConfiguration defaultSessionConfiguration];
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForRequest <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    sessionConfig.timeoutIntervalForResource <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 処理を単純化させるためにdelegateは使用しませんでした。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// UI関連の処理を想定していないため、delegateQueueは独自に作成しました。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    urlSession <span style="color:#f92672">=</span> [NSURLSession sessionWithConfiguration:sessionConfig
</span></span><span style="display:flex;"><span>                                               delegate:nil
</span></span><span style="display:flex;"><span>                                          delegateQueue:nil];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NSLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;get start&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest new];
</span></span><span style="display:flex;"><span>    [request setURL:[NSURL URLWithString:urlString]];
</span></span><span style="display:flex;"><span>    [request setCachePolicy:NSURLRequestUseProtocolCachePolicy];
</span></span><span style="display:flex;"><span>    [request setValue:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;iOS&#34;</span> forHTTPHeaderField:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;User-Agent&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPMethod:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;POST&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;application/x-www-form-urlencoded&#34;</span>  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Type&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setValue: [NSString stringWithFormat: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%lu&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)[query length]]  forHTTPHeaderField: <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Content-Length&#34;</span>];
</span></span><span style="display:flex;"><span>    [request setHTTPBody: query];
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 取得するデータサイズが小さいのでtaskはNSURLSessionDataTaskを使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NSURLSessionDataTask <span style="color:#f92672">*</span>dataTask
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">=</span> [urlSession dataTaskWithRequest:request
</span></span><span style="display:flex;"><span>                            completionHandler:<span style="color:#f92672">^</span>(NSData <span style="color:#f92672">*</span>data, NSURLResponse <span style="color:#f92672">*</span>response, NSError <span style="color:#f92672">*</span>error) {
</span></span><span style="display:flex;"><span>                                NSHTTPURLResponse <span style="color:#f92672">*</span>httpUrlResponse <span style="color:#f92672">=</span> (NSHTTPURLResponse <span style="color:#f92672">*</span>) response;
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">DLog</span>(<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Status code: %ld&#34;</span>, httpUrlResponse.statusCode);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                CFStringEncoding encoding <span style="color:#f92672">=</span> <span style="color:#a6e22e">CFStringConvertIANACharSetNameToEncoding</span>((CFStringRef) [response textEncodingName]);
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [[NSString alloc] initWithData:data encoding:<span style="color:#a6e22e">CFStringConvertEncodingToNSStringEncoding</span>(encoding)];
</span></span><span style="display:flex;"><span>                                NSData <span style="color:#f92672">*</span>restoreData <span style="color:#f92672">=</span> [[NSData alloc] initWithBase64EncodedString:body options:<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                NSString <span style="color:#f92672">*</span>restoreString <span style="color:#f92672">=</span> [[NSString alloc] initWithData:restoreData encoding:NSUTF8StringEncoding];
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">dispatch_async</span>(
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">dispatch_get_main_queue</span>(),
</span></span><span style="display:flex;"><span>                                        <span style="color:#f92672">^</span>{
</span></span><span style="display:flex;"><span>                                        }
</span></span><span style="display:flex;"><span>                                );
</span></span><span style="display:flex;"><span>                            }];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    [dataTask resume];
</span></span></code></pre></div>
              ]]></content:encoded></item><item><title>AndroidでgetとPOST</title><link>https://example.org/posts/android%E3%81%A7get%E3%81%A8post/</link><pubDate>Thu, 21 Jul 2022 22:04:39 +0900</pubDate><guid>https://example.org/posts/android%E3%81%A7get%E3%81%A8post/</guid><description>&lt;p>こんな感じ&lt;/p>
&lt;h2 id="get">GET&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-aidl" data-lang="aidl"> public String getHistoryData(String key1) {
HttpURLConnection urlConnection = null;
InputStream inputStream = null;
String result = &amp;#34;&amp;#34;;
String str = &amp;#34;&amp;#34;;
try {
URL url = new URL(&amp;#34;https://xxxxx.co.jp/test?key1=&amp;#34; + key1);
// 接続先URLへのコネクションを開く．まだ接続されていない
urlConnection = (HttpURLConnection) url.openConnection();
// 接続タイムアウトを設定
urlConnection.setConnectTimeout(10000);
// レスポンスデータの読み取りタイムアウトを設定
urlConnection.setReadTimeout(10000);
// ヘッダーにUser-Agentを設定
urlConnection.addRequestProperty(&amp;#34;User-Agent&amp;#34;, &amp;#34;Android&amp;#34;);
// ヘッダーにAccept-Languageを設定
urlConnection.addRequestProperty(&amp;#34;Accept-Language&amp;#34;, Locale.getDefault().toString());
// HTTPメソッドを指定
urlConnection.setRequestMethod(&amp;#34;GET&amp;#34;);
//リクエストボディの送信を許可しない
urlConnection.setDoOutput(false);
//レスポンスボディの受信を許可する
urlConnection.setDoInput(true);
// 通信開始
urlConnection.connect();
// レスポンスコードを取得
int statusCode = urlConnection.getResponseCode();
// レスポンスコード200は通信に成功したことを表す
if (statusCode == 200) {
inputStream = urlConnection.getInputStream();
BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, &amp;#34;utf-8&amp;#34;));
// 1行ずつレスポンス結果を取得しstrに追記
result = bufferedReader.readLine();
while (result != null) {
str += result;
result = bufferedReader.readLine();
}
bufferedReader.close();
}
} catch (MalformedURLException e) {
e.printStackTrace();
} catch (IOException e) {
e.printStackTrace();
}
// レスポンス結果のJSONをString型で返す
return str;
}
&lt;/code>&lt;/pre>&lt;h2 id="post">POST&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-aidl" data-lang="aidl">public String PostUserName(String key1, String key2) {
HttpURLConnection urlConnection = null;
InputStream inputStream = null;
String result = &amp;#34;&amp;#34;;
String str = &amp;#34;&amp;#34;;
try {
URL url = new URL(&amp;#34;http://hpph;e.cp.jp&amp;#34;&amp;#34;);
// 接続先URLへのコネクションを開く．まだ接続されていない
urlConnection = (HttpURLConnection) url.openConnection();
// 接続タイムアウトを設定
urlConnection.setConnectTimeout(10000);
// レスポンスデータの読み取りタイムアウトを設定
urlConnection.setReadTimeout(10000);
// ヘッダーにUser-Agentを設定
urlConnection.addRequestProperty(&amp;#34;User-Agent&amp;#34;, &amp;#34;Android&amp;#34;);
// ヘッダーにAccept-Languageを設定
urlConnection.addRequestProperty(&amp;#34;Accept-Language&amp;#34;, Locale.getDefault().toString());
//ヘッダーにContent-Typeを設定する
urlConnection.addRequestProperty(&amp;#34;Content-Type&amp;#34;, &amp;#34;application/x-www-form-urlencoded&amp;#34;);
// HTTPメソッドを指定
urlConnection.setRequestMethod(&amp;#34;POST&amp;#34;);
urlConnection.setUseCaches(false);
//リクエストボディの送信を許可しない
urlConnection.setDoOutput(true);
//レスポンスボディの受信を許可する
urlConnection.setDoInput(true);
// 通信開始
urlConnection.connect();
//ステップ5:リクエストボディの書き出しを行う。
OutputStream outputStream = urlConnection.getOutputStream();
Map&amp;lt;String, String&amp;gt; keyValues = new HashMap&amp;lt;&amp;gt;();
keyValues.put(&amp;#34;key1&amp;#34;, key1);
keyValues.put(&amp;#34;key2&amp;#34;, key2);
if (keyValues.size() &amp;gt; 0) {
Uri.Builder builder = new Uri.Builder();
//HashMapを[key=value]形式の文字列に変換する
for (String key : keyValues.keySet()) {
//[key=value]形式の文字列に変換する。
builder.appendQueryParameter(key, keyValues.get(key));
}
//[key=value&amp;amp;key=value…]形式の文字列に変換する。
String join = builder.build().getEncodedQuery();
PrintStream ps = new PrintStream(outputStream);
ps.print(join);
ps.close();
}
outputStream.close();
// レスポンスコードを取得
int statusCode = urlConnection.getResponseCode();
// レスポンスコード200は通信に成功したことを表す
if (statusCode == 200) {
inputStream = urlConnection.getInputStream();
BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
// 1行ずつレスポンス結果を取得しstrに追記
result = bufferedReader.readLine();
while (result != null) {
str += result;
result = bufferedReader.readLine();
}
bufferedReader.close();
}
} catch (MalformedURLException e) {
e.printStackTrace();
} catch (IOException e) {
e.printStackTrace();
}
// レスポンス結果のJSONをString型で返す
return str;
}
&lt;/code>&lt;/pre></description><content:encoded><![CDATA[
              <p>こんな感じ</p>
<h2 id="get">GET</h2>
<pre tabindex="0"><code class="language-aidl" data-lang="aidl"> public String getHistoryData(String key1) {
        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        String result = &#34;&#34;;
        String str = &#34;&#34;;
        try {
            URL url = new URL(&#34;https://xxxxx.co.jp/test?key1=&#34; + key1);
            // 接続先URLへのコネクションを開く．まだ接続されていない
            urlConnection = (HttpURLConnection) url.openConnection();
            // 接続タイムアウトを設定
            urlConnection.setConnectTimeout(10000);
            // レスポンスデータの読み取りタイムアウトを設定
            urlConnection.setReadTimeout(10000);
            // ヘッダーにUser-Agentを設定
            urlConnection.addRequestProperty(&#34;User-Agent&#34;, &#34;Android&#34;);
            // ヘッダーにAccept-Languageを設定
            urlConnection.addRequestProperty(&#34;Accept-Language&#34;, Locale.getDefault().toString());
            // HTTPメソッドを指定
            urlConnection.setRequestMethod(&#34;GET&#34;);
            //リクエストボディの送信を許可しない
            urlConnection.setDoOutput(false);
            //レスポンスボディの受信を許可する
            urlConnection.setDoInput(true);
            // 通信開始
            urlConnection.connect();
            // レスポンスコードを取得
            int statusCode = urlConnection.getResponseCode();
            // レスポンスコード200は通信に成功したことを表す
            if (statusCode == 200) {
                inputStream = urlConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, &#34;utf-8&#34;));
                // 1行ずつレスポンス結果を取得しstrに追記
                result = bufferedReader.readLine();
                while (result != null) {
                    str += result;
                    result = bufferedReader.readLine();
                }
                bufferedReader.close();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // レスポンス結果のJSONをString型で返す
        return str;
    }
</code></pre><h2 id="post">POST</h2>
<pre tabindex="0"><code class="language-aidl" data-lang="aidl">public String PostUserName(String key1, String key2) {
        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        String result = &#34;&#34;;
        String str = &#34;&#34;;

        try {
            URL url = new URL(&#34;http://hpph;e.cp.jp&#34;&#34;);
            // 接続先URLへのコネクションを開く．まだ接続されていない
            urlConnection = (HttpURLConnection) url.openConnection();
            // 接続タイムアウトを設定
            urlConnection.setConnectTimeout(10000);
            // レスポンスデータの読み取りタイムアウトを設定
            urlConnection.setReadTimeout(10000);
            // ヘッダーにUser-Agentを設定
            urlConnection.addRequestProperty(&#34;User-Agent&#34;, &#34;Android&#34;);
            // ヘッダーにAccept-Languageを設定
            urlConnection.addRequestProperty(&#34;Accept-Language&#34;, Locale.getDefault().toString());
            //ヘッダーにContent-Typeを設定する
            urlConnection.addRequestProperty(&#34;Content-Type&#34;, &#34;application/x-www-form-urlencoded&#34;);
            // HTTPメソッドを指定
            urlConnection.setRequestMethod(&#34;POST&#34;);

            urlConnection.setUseCaches(false);
            //リクエストボディの送信を許可しない
            urlConnection.setDoOutput(true);
            //レスポンスボディの受信を許可する
            urlConnection.setDoInput(true);
            // 通信開始
            urlConnection.connect();


            //ステップ5:リクエストボディの書き出しを行う。
            OutputStream outputStream = urlConnection.getOutputStream();
            Map&lt;String, String&gt; keyValues = new HashMap&lt;&gt;();

            keyValues.put(&#34;key1&#34;, key1);
            keyValues.put(&#34;key2&#34;, key2);


            if (keyValues.size() &gt; 0) {
                Uri.Builder builder = new Uri.Builder();
                //HashMapを[key=value]形式の文字列に変換する
                for (String key : keyValues.keySet()) {
                    //[key=value]形式の文字列に変換する。
                    builder.appendQueryParameter(key, keyValues.get(key));
                }
                //[key=value&amp;key=value…]形式の文字列に変換する。
                String join = builder.build().getEncodedQuery();
                PrintStream ps = new PrintStream(outputStream);
                ps.print(join);
                ps.close();
            }
            outputStream.close();

            // レスポンスコードを取得
            int statusCode = urlConnection.getResponseCode();
            // レスポンスコード200は通信に成功したことを表す
            if (statusCode == 200) {
                inputStream = urlConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
                // 1行ずつレスポンス結果を取得しstrに追記
                result = bufferedReader.readLine();
                while (result != null) {
                    str += result;
                    result = bufferedReader.readLine();
                }
                bufferedReader.close();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // レスポンス結果のJSONをString型で返す
        return str;
    }
</code></pre>
              ]]></content:encoded></item><item><title>Wails v2のテンプレート</title><link>https://example.org/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</link><pubDate>Thu, 21 Jul 2022 22:00:39 +0900</pubDate><guid>https://example.org/posts/wails-v2%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/</guid><description>&lt;p>テンプレートの一覧どこにあるんやと思ったら&lt;/p>
&lt;p>ここにあった（；^ω^）&lt;/p>
&lt;p>&lt;a href="https://wails.io/docs/community/templates/">https://wails.io/docs/community/templates/&lt;/a>&lt;/p></description><content:encoded><![CDATA[
              <p>テンプレートの一覧どこにあるんやと思ったら</p>
<p>ここにあった（；^ω^）</p>
<p><a href="https://wails.io/docs/community/templates/">https://wails.io/docs/community/templates/</a></p>

              ]]></content:encoded></item><item><title>PC-8801のエミュレータ、「quasi88」のSDL2対応版</title><link>https://example.org/posts/pc-8801%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFquasi88%E3%81%AEsdl2%E5%AF%BE%E5%BF%9C%E7%89%88/</link><pubDate>Tue, 12 Jul 2022 17:12:30 +0900</pubDate><guid>https://example.org/posts/pc-8801%E3%81%AE%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFquasi88%E3%81%AEsdl2%E5%AF%BE%E5%BF%9C%E7%89%88/</guid><description>&lt;p>Mac用PC88のエミュレータが欲しいと思ってたら、
こんなところに！！&lt;/p>
&lt;p>HomeBrewのインストーラーだと、SDL1なのでワーニングがでるけど、
SDL2対応だから、これならでない！！&lt;/p></description><content:encoded><![CDATA[
              <p>Mac用PC88のエミュレータが欲しいと思ってたら、
こんなところに！！</p>
<p>HomeBrewのインストーラーだと、SDL1なのでワーニングがでるけど、
SDL2対応だから、これならでない！！</p>
<p><a href="http://kameya-z.way-nifty.com/blog/2021/08/post-bf1e89.html">http://kameya-z.way-nifty.com/blog/2021/08/post-bf1e89.html</a></p>
<p><img src="../img/icon20220712.png" alt="icon20220712">
コンパイルしたら出てきた。</p>
<p><img src="../img/JESUS-pic1.png" alt="icon20220712">
JESUSを動かしてみたらこんな感じ♪</p>

              ]]></content:encoded></item><item><title>pemファイルに含まれる証明書の確認方法</title><link>https://example.org/posts/pem%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 12 Jul 2022 14:07:34 +0900</pubDate><guid>https://example.org/posts/pem%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AB%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95/</guid><description>&lt;p>以下で、内容が見られます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>openssl x509 -text -fingerprint -noout -in &lt;span style="color:#e6db74">&amp;#34;ファイル名.pem&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際には、こんな感じです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ openssl x509 -text -fingerprint -noout -in &lt;span style="color:#e6db74">&amp;#39;*.xxxxxxxx.xxx.cer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Certificate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Version: &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0x2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Serial Number:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 26:8c:4f:db:b0:ba:d7:43:45:1b:43:f2:5d:84:9b:85
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Signature Algorithm: sha384WithRSAEncryption
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Issuer: C &lt;span style="color:#f92672">=&lt;/span> AT, O &lt;span style="color:#f92672">=&lt;/span> ZeroSSL, CN &lt;span style="color:#f92672">=&lt;/span> ZeroSSL RSA Domain Secure Site CA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Validity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Not Before: May &lt;span style="color:#ae81ff">5&lt;/span> 00:00:00 &lt;span style="color:#ae81ff">2022&lt;/span> GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Not After : Aug &lt;span style="color:#ae81ff">3&lt;/span> 23:59:59 &lt;span style="color:#ae81ff">2022&lt;/span> GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subject: CN &lt;span style="color:#f92672">=&lt;/span> *.tama-tan.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Subject Public Key Info:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Public Key Algorithm: rsaEncryption
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RSA Public-Key: &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2048&lt;/span> bit&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Modulus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 00:c5:bb:31:b4:41:96:66:e6:ed:47:9e:74:2f:58:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 7a:af:fe:a0:d8:09:06:25:36:99:4f:69:79:71:55:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --- 省略 ----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記で、Validityの覧を見ると有効期限がわかります。&lt;/p></description><content:encoded><![CDATA[
              <p>以下で、内容が見られます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>openssl x509 -text -fingerprint -noout -in <span style="color:#e6db74">&#34;ファイル名.pem&#34;</span>
</span></span></code></pre></div><p>実際には、こんな感じです。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ openssl x509 -text -fingerprint -noout -in  <span style="color:#e6db74">&#39;*.xxxxxxxx.xxx.cer&#39;</span>
</span></span><span style="display:flex;"><span>Certificate:
</span></span><span style="display:flex;"><span>    Data:
</span></span><span style="display:flex;"><span>        Version: <span style="color:#ae81ff">3</span> <span style="color:#f92672">(</span>0x2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>        Serial Number:
</span></span><span style="display:flex;"><span>            26:8c:4f:db:b0:ba:d7:43:45:1b:43:f2:5d:84:9b:85
</span></span><span style="display:flex;"><span>        Signature Algorithm: sha384WithRSAEncryption
</span></span><span style="display:flex;"><span>        Issuer: C <span style="color:#f92672">=</span> AT, O <span style="color:#f92672">=</span> ZeroSSL, CN <span style="color:#f92672">=</span> ZeroSSL RSA Domain Secure Site CA
</span></span><span style="display:flex;"><span>        Validity
</span></span><span style="display:flex;"><span>            Not Before: May  <span style="color:#ae81ff">5</span> 00:00:00 <span style="color:#ae81ff">2022</span> GMT
</span></span><span style="display:flex;"><span>            Not After : Aug  <span style="color:#ae81ff">3</span> 23:59:59 <span style="color:#ae81ff">2022</span> GMT
</span></span><span style="display:flex;"><span>        Subject: CN <span style="color:#f92672">=</span> *.tama-tan.com
</span></span><span style="display:flex;"><span>        Subject Public Key Info:
</span></span><span style="display:flex;"><span>            Public Key Algorithm: rsaEncryption
</span></span><span style="display:flex;"><span>                RSA Public-Key: <span style="color:#f92672">(</span><span style="color:#ae81ff">2048</span> bit<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                Modulus:
</span></span><span style="display:flex;"><span>                    00:c5:bb:31:b4:41:96:66:e6:ed:47:9e:74:2f:58:
</span></span><span style="display:flex;"><span>                    7a:af:fe:a0:d8:09:06:25:36:99:4f:69:79:71:55:
</span></span><span style="display:flex;"><span>                    --- 省略 ----
</span></span></code></pre></div><p>上記で、Validityの覧を見ると有効期限がわかります。</p>

              ]]></content:encoded></item><item><title>Golangでホットリロードする方法</title><link>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 05 Jul 2022 13:00:04 +0900</pubDate><guid>https://example.org/posts/golang%E3%81%A7%E3%83%9B%E3%83%83%E3%83%88%E3%83%AA%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>今回、Go言語で開発を行うことがありました。&lt;/p>
&lt;p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>今回、Go言語で開発を行うことがありました。</p>
<p>go言語は、PHPやRubyなどの言語とは異なり、ビルドをしないとソースは反映されません。</p>
<p>そのため、開発中は、毎回ソース変更してはコンパイルをして起動。。。。。。</p>
<p>Vue.JSやDjangoようにホットリロードに対応していません。
めんどくさいですよね。</p>
<p>でも、goには、それを解消してくれるツールがあります。</p>
<p>それが、<a href="https://github.com/cosmtrek/air">Air</a> です。</p>
<p>今回は、標準ライブラリでWebを起動しJsonを返す簡単なサンプルを用意しました。</p>
<h2 id="環境用意">環境用意</h2>
<p>Macで作成しているのでWindowsでするときは、Bashは、適当に置き換えてください。</p>
<p>用意するもの、</p>
<ul>
<li>エディタ</li>
<li>Dockerデスクトップ</li>
</ul>
<p>これだけで動作します。</p>
<h2 id="作成手順">作成手順</h2>
<h3 id="1-フォルダを作成">1) フォルダを作成</h3>
<pre tabindex="0"><code>mkdir -p air_sample &amp;&amp; cd air_sample
</code></pre><h3 id="2--goのファイルを作成">2)  goのファイルを作成</h3>
<p>go.mod</p>
<pre tabindex="0"><code>module air_sample

go 1.17
</code></pre><p>main.go</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;log&#34;
	&#34;net/http&#34;
)

type Response struct {
	Status      int       `json:&#34;status&#34;`
	Message   string    `json:&#34;message&#34;`
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	var buf bytes.Buffer

	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}

	enc := json.NewEncoder(&amp;buf)
	if err := enc.Encode(&amp;response); err != nil {
		log.Fatal(err)
	}
	fmt.Println(buf.String())

	_, err := fmt.Fprint(w, buf.String())
	if err != nil {
		return
	}
}

func main() {
	http.HandleFunc(&#34;/&#34;, rootHandler)
	log.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))
}
</code></pre><h3 id="3--airの設定ファイルの取得">3)  airの設定ファイルの取得</h3>
<pre tabindex="0"><code>wget https://raw.githubusercontent.com/cosmtrek/air/master/air_example.toml
mv air_example.toml .air.toml
</code></pre><h3 id="4--docker関連のファイル作成">4)  Docker関連のファイル作成</h3>
<p>Dockerfile</p>
<pre tabindex="0"><code>FROM golang:1.17-buster

# Time zone
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime

RUN apt-get update
RUN apt-get -y install libonig-dev

COPY . /go/src

# Move to project root
WORKDIR /go/src

RUN go mod download

# Install Air (For binary execution)
RUN go get -u github.com/cosmtrek/air

# Start golang app with livereload
CMD [&#34;air&#34;, &#34;-c&#34;, &#34;.air.toml&#34;]

EXPOSE 8080
</code></pre><p>docker-compose.yml</p>
<pre tabindex="0"><code>version: &#34;3&#34;

services:
# ---------------------------------------------------
# gin
# ---------------------------------------------------
  web:
    build:
      context: .
    container_name: web
    volumes:
      - .:/go/src
    ports:
      - 8080:8080
    tty: true
    environment:
      TZ: Asia/Tokyo
</code></pre><h3 id="5--起動用のバッチファイル作成">5)  起動用のバッチファイル作成</h3>
<p>start.sh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>docker-compose stop
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;refresh&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    docker-compose down
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker-compose up --build
</span></span></code></pre></div><h2 id="実行">実行</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sh start.sh
</span></span></code></pre></div><p>以下のようになります。</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.06.56.png" alt="スクリーンショット 2021-12-13 午後4.06.56.png"></p>
<h2 id="テスト">テスト</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p>これで実行できます。</p>
<p>実行結果</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.07.28.png" alt="スクリーンショット 2021-12-13 午後4.07.28.png"></p>
<p>ちゃんと動いてます。
そして、以下のように表示されてます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JSON" data-lang="JSON"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;status&#34;</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;こんにちわ、世界&#34;</span>}
</span></span></code></pre></div><p>ようやくここから本題。</p>
<p>今回用意したファイルは、ややこしいことしてますが、フォルダ内の「main.go」をDockerComposeで見るように工夫しています。
ですので、「main.go」を書き換えると勝手に再コンパイルがされ実行環境に反映されます。</p>
<p>例えば、JSONの戻り値を</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界&#34;,
	}
</code></pre><p>から</p>
<pre tabindex="0"><code>	response :=Response{
		Status: 0,
		Message: &#34;こんにちわ、世界,Hallo&#34;,
	}
</code></pre><p>と書き込んでみます。そうすると！！</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.25.png" alt="スクリーンショット 2021-12-13 午後4.08.25.png"></p>
<p>となり再コンパイルされてます。</p>
<p>本当に再コンパイルされているかどうか見て見ましょう。</p>
<p>もう一度curlで実行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#34;http://localhost:8080&#34;</span>
</span></span></code></pre></div><p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88-2021-12-13-%E5%8D%88%E5%BE%8C4.08.40.png" alt="スクリーンショット 2021-12-13 午後4.08.40.png"></p>
<p>戻り値が変わってますね。
本番環境では、Wireは使うとダメですが、開発環境では重宝しそうです。
Goを使用することがあれば一度やってみませんか</p>
<p>明日は @ya-yamamoto さん、よろしくお願いします！！</p>

              ]]></content:encoded></item><item><title>APIの死活監視をRocketChatに送信する</title><link>https://example.org/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link><pubDate>Tue, 05 Jul 2022 12:15:06 +0900</pubDate><guid>https://example.org/posts/api%E3%81%AE%E6%AD%BB%E6%B4%BB%E7%9B%A3%E8%A6%96%E3%82%92rocketchat%E3%81%AB%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>サーバ監視ツールを作成しようというお話をします。&lt;/p>
&lt;p>サーバが本当に動いているかどうかを少し前までは、メールで送信が多かったのですが、
最近は、Slack等のチャットに連絡するような方法が多くなってきているようです。&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>サーバ監視ツールを作成しようというお話をします。</p>
<p>サーバが本当に動いているかどうかを少し前までは、メールで送信が多かったのですが、
最近は、Slack等のチャットに連絡するような方法が多くなってきているようです。</p>
<p>そこで、RocketChatを使ってサーバが死んでいるときにメッセージを送るツールをGo言語で作ってみようと思います。</p>
<p>Go言語には、サードパーティー製のパッケージ（Golangがあらかじめ用意していないソースのこと）などを
使用せずともある程度組めるようにはなっております。
ですので、1ファイルでコンパイルできプラットフォーム依存のないソースを作成します。
今回もそういう感じで作ったので、WindowsでもMacでもLinuxでも動作すると思います。
(すみません、プロクシは設定しておりません。。。。)</p>
<p>基礎知識は、英語ですが、<a href="https://golang.org/">本家</a>を見て頂くか
<a href="https://go-tour-jp.appspot.com/welcome/1">A Tour of Go</a>や<a href="https://qiita.com/tenntenn/items/0e33a4959250d1a55045">Go言語の初心者が見ると幸せになれる場所</a>を見ていくとわかりやすいです。</p>
<p>※ 時間の関係上細かいところまで説明しておりませんご了承ください。</p>
<h2 id="前準備サーバーの仕様">前準備（サーバーの仕様）</h2>
<p>サーバは簡易的にGo言語で用意します。（解説は面倒なので抜き）</p>
<p>HTTPステータスが正常(200)、異常(500)と、
Jsonのステータスが正常(0),異常(1)を返すものを4種類のAPIを作成しておき、
それによってどう動作するかを確認します。</p>
<p>以下の仕様です</p>
<ul>
<li>http://localhost:3000</li>
<li>引数なしのPOST</li>
<li>response
JSONで以下のように返す</li>
</ul>
<pre tabindex="0"><code>{
  &#34;comment&#34;: コメント,
  &#34;status&#34;: ステータス(0 or -1)
}
</code></pre><ul>
<li>URLは、以下を用意</li>
</ul>
<table>
  <thead>
      <tr>
          <th style="text-align: left">URI</th>
          <th style="text-align: left">内容</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ok</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス正常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ng</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス異常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ng_json_status_ng</td>
          <td style="text-align: left">HTTPステータス 異常・Jsonステータス正常</td>
      </tr>
      <tr>
          <td style="text-align: left">/test_status_ok_json_status_ok_long_time</td>
          <td style="text-align: left">HTTPステータス 正常・Jsonステータス正常（responseが遅い）</td>
      </tr>
  </tbody>
</table>
<p>以下がサンプルソースです。</p>
<pre tabindex="0"><code>package main

import (
	&#34;bytes&#34;
	&#34;encoding/json&#34;
	&#34;fmt&#34;
	&#34;io&#34;
	&#34;log&#34;
	&#34;net/http&#34;
	&#34;time&#34;
)

type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

const rotationTime = 10 * time.Second

const urlTestStatusOkJsonStatusOk = &#34;/test_status_ok_json_status_ok&#34;
const testStatusOkJsonStatusNg = &#34;/test_status_ok_json_status_ng&#34;
const testStatusNgJsonStatusNg = &#34;/test_status_ng_json_status_ng&#34;
const urlTestStatusOkJsonStatusOkLongTime = &#34;/test_status_ok_json_status_ok_long_time&#34;

func commonHandler(w http.ResponseWriter, r *http.Request, resJSON ResponseJSON) {
	body := r.Body
	defer body.Close()

	buf := new(bytes.Buffer)
	io.Copy(buf, body)

	// jsonエンコード
	outputJson, err := json.Marshal(resJSON)

	if err != nil {
		panic(err)
	}

	// jsonヘッダーを出力
	w.Header().Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	// jsonデータを出力
	_, _ = fmt.Fprint(w, string(outputJson))
}

func urlTestStatusOkJsonStatusOkLongTimeHandler(w http.ResponseWriter, r *http.Request) {
	time.Sleep(20 * time.Second)
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok LongTime&#34;,
		Status:  0,
	}
	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusOkHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)

	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus Ok&#34;,
		Status:  0,
	}

	commonHandler(w, r, resJSON)
}

func testStatusOkJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	resJSON := ResponseJSON{
		Comment: &#34;Status Ok JsonStatus NG&#34;,
		Status:  -1,
	}

	commonHandler(w, r, resJSON)

}

func testStatusNgJsonStatusNgHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusInternalServerError)
	resJSON := ResponseJSON{
		Comment: &#34;Status NG JsonStatus NG&#34;,
		Status:  -1,
	}
	commonHandler(w, r, resJSON)
}

func serverSample() {
	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(urlTestStatusOkJsonStatusOk, testStatusOkJsonStatusOkHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ng
	http.HandleFunc(testStatusOkJsonStatusNg, testStatusOkJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ng_json_status_ng
	http.HandleFunc(testStatusNgJsonStatusNg, testStatusNgJsonStatusNgHandler)

	// curl -i http://localhost:3000/test_status_ok_json_status_ok_long_time
	http.HandleFunc(urlTestStatusOkJsonStatusOkLongTime, urlTestStatusOkJsonStatusOkLongTimeHandler)

	go func() {
		log.Fatal(http.ListenAndServe(&#34;:3000&#34;, nil))
	}()

}

func main() {
	// サンプルサーバー
	serverSample()

	for range time.Tick(rotationTime) {
	}

}
</code></pre><h2 id="ステータス監視">ステータス監視</h2>
<p>前準備で、サーバーを用意しました。
死活監視として何を見るかというと</p>
<ol>
<li>HTTPステータス異常ではないか</li>
<li>レスポンスが異常ではないか</li>
<li>レスポンス応答が遅くないか
この3つを監視します。</li>
</ol>
<h3 id="httpステータスとレスポンスの取得">HTTPステータスとレスポンスの取得</h3>
<p>今回はメッチャ簡単に「http」パッケージを用いて、HTTPステータスとレスポンスを取得します
HTTPステータスが200以外の場合は、エラーを返します。
また、通信で異常があった場合もエラーを返します。
正常の場合のみ、レスポンスを返すようにします。</p>
<p>レスポンス(JSON)の中身は、DataStoreとして構造体に入れてわかりやすく中身を管理します。
「encoding/json」パッケージで簡単に構造体に入れてくれます。</p>
<pre tabindex="0"><code>type ResponseJSON struct {
	Comment string `json:&#34;comment&#34;`
	Status  int    `json:&#34;status&#34;`
}

func validationAPI(urlAddress string, res *ResponseJSON) (int, error) {

	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress,
		nil,
	)

	if err != nil {
		return -1, err
	}

	client := &amp;http.Client{}
	resp, err := client.Do(req)

	// ネットワークエラー
	if err != nil {
		return -1, err
	}

	statusCode := resp.StatusCode

	// httpステータスが正常でなければエラーとする
	if statusCode != 200 {
		return statusCode, errors.New(&#34;ステータスエラー&#34;)
	}

	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)
	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return statusCode, nil
}
</code></pre><h3 id="各ステータスとレスポンス時間を取得">各ステータスとレスポンス時間を取得</h3>
<p>上記で作成した「validationAPI」メソッドは、ステータスやサーバ異常は、エラーと返しますが、
レスポンス中身は、確認していません。また、レスポンス時間なども確認してません。
そういったものを確認するためのルーチンを以下で制御し、エラーであった場合RocketChatに投げます。</p>
<pre tabindex="0"><code>// ステータスチェック
func statusCheck(urlAddress string) {

	responseJSONData := new(ResponseJSON)
    
	// 通信開始時刻取得
	_now := time.Now()
	// 通信開始
	statusCode, err := validationAPI(urlAddress, responseJSONData)
	// 通信終了

	// 開始時刻からの時間を取得
	_duration := (time.Now()).Sub(_now)
		・・・ 省略・・・ 
	_second := _millisecond / 1000

	var message string
	message = urlAddress + &#34;\n&#34;

	if err != nil {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if _second &gt; responseTime {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else if responseJSONData.Status !=0 {
		message = message + &#34;--- 問題あり ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
		err = RocketChatMessagePush(message)
	} else {
		message = message + &#34;--- 問題なし ---&#34; + &#34;\n&#34;
		・・・ 省略・・・ 
	}
}
</code></pre><p>ここまでをポーリングでまわせば死活監視できます。
さて、エラーをRocketChatに送信する方法です。</p>
<h2 id="rocketchatの送信">RocketChatの送信</h2>
<p>ターゲットのチャットルーム（プライベートユーザー）送信するにはどうしたらいいのか
RocketChatは、APIがきっちり用意されていてすごく簡単です。</p>
<p>メッセージを送信するAPIの仕様 <a href="https://rocket.chat/docs/developer-guides/rest-api/chat/postmessage/">Post a chat message</a>
を見ると
最初の行に「URL」「Requires Auth」「HTTP Method」が表にのっています。
「URL」把握背するところとわかり、「HTTP Method」は、POSTで送信しろと書いており、
「Requires Auth」が必要というようなことが書いております。
つまり、ログインしてる情報をひっつけてこのURLでPOSTすればいいことがわかります。</p>
<p>どうやってポストをするのか。パラメータがいっぱい書いてますけど良くわかりませんよね？（；^ω^）
こういうときはサンプルがどっかに書いてあることが多いです。
「Example Call」と「Example Result」を見ます。
前者は、POSTの仕方が書いてあり、後者はそのresponseですね。
前者の「Example Call」を見ると、
curlでのコマンドが書いてあり、「-H」と「-d」とURLが引数となっています。
「-H」は、送信するヘッダのことで、「X-Auth-Token」と「X-User-Id」と、「Content-type:application/json」と言うのがあります。
「Content-type:application/json」は、送信方法をJSONで送ると言う意味で、
残りの、「X-Auth-Token」と「X-User-Id」は、たぶん、名前の通りで行くと認証の文字列でしょう。
おそらく、どこかで取得したものをここに設定するのだと思います。</p>
<p>っということは、もしかしたらログインの時にこのデータを作成しているのではないかなと推測します。
なので、REST APIで、認証で、ログインで入れるAPIの仕様を見てみましょう。
「<a href="https://rocket.chat/docs/developer-guides/rest-api/authentication/login/">rest-api/authentication/login/</a>」をこれを見ると「Result」の項目を見ると！！
「authToken」というのと「userId」てのがありますね。そう、これが、先ほどの「X-Auth-Token」と「X-User-Id」に入ります。</p>
<p>細かいことは端折りますが、</p>
<ol>
<li>ログインで、「ユーザー」「パスワード」を入れて、POSTする。</li>
<li>レスポンスで、「authToken」と「userId」を取得</li>
<li>Post a chat messageで先ほどの「authToken」と「userId」をヘッダに、書き込むチャンネルと文言を一緒に送信する</li>
<li>メッセージが書き込まれる。</li>
</ol>
<p>てな具合です。簡単でしょ？</p>
<p>「HTTPステータスとレスポンスの取得」で作成した「validationAPI」に、
パラメータとヘッダーの設定し、送信するれば良いだけです。</p>
<p>これで、大体の作り方がわかったはずです。</p>
<pre tabindex="0"><code>
/*
	RocketChatログイン
*/
func RocketChatLogin(urlAddress string, userName string, password string, res *RocketChatLoginResponse) error {
	jsonParam := RocketChatLoginParam{
		User:     userName,
		Password: password,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/login&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	byteArray, _ := ioutil.ReadAll(resp.Body)

	responseJsonStr := string(byteArray)

	_ = json.Unmarshal([]byte(responseJsonStr), res)

	return nil
}

/*
	RocketChatログイン
*/
func RocketChatPostMessage(urlAddress string, authToken string, userId string, chatRoom string, message string) error {
	jsonParam := RocketChatPostMessageParam{
		Channel: chatRoom,
		Message: message,
	}

	bytesData, err := json.Marshal(&amp;jsonParam)

	if err != nil {
		return err
	}

	jsonStr := string(bytesData)
	req, err := http.NewRequest(
		&#34;POST&#34;,
		urlAddress+&#34;/api/v1/chat.postMessage&#34;,
		bytes.NewBuffer([]byte(jsonStr)),
	)
	if err != nil {
		return err
	}

	// Content-Type 設定
	req.Header.Set(&#34;Content-Type&#34;, &#34;application/json&#34;)
	req.Header.Set(&#34;X-User-Id&#34;, userId)
	req.Header.Set(&#34;X-Auth-Token&#34;, authToken)

	client := &amp;http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return nil
}
</code></pre><h2 id="最後に">最後に</h2>
<p>なんか説明してなく、ソースをあげているだけのような気がしていてしょうがないですが、(;￣ー￣A アセアセ・・・
よしとしてください。。。。
あと、Go言語好きな人集まりが出来たら良いなぁって最近は思ってます。。。。。</p>
<p>※ 端折って書いたりしておりますので実際のサンプルサーバと監視ツールを合体したソースを<a href="https://gist.github.com/tama-jp/175aa45d0d129568329168504a9e228f">Gist</a>にあげておきます。</p>

              ]]></content:encoded></item><item><title>Google画像をスクレイピングしてみよう！！</title><link>https://example.org/posts/google%E7%94%BB%E5%83%8F%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/</link><pubDate>Tue, 05 Jul 2022 12:07:08 +0900</pubDate><guid>https://example.org/posts/google%E7%94%BB%E5%83%8F%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86/</guid><description>&lt;p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。&lt;/p>
&lt;p>すみっコぐらしをめっちゃ好きでLineスタンプはすべてコンプリートしています*.⋆( ˘̴͈́ ॢ꒵ॢ ˘̴͈̀ )⋆.*
それは置いといて。。。。 ＼(･&lt;em>＼)ｿﾉﾊﾅｼﾊ (／&lt;/em>･)／ｺｯﾁﾆｵｲﾄｲﾃ&lt;/p></description><content:encoded><![CDATA[
              <p>※ 過去に書いた記事を載せています。今動作するかは不明。。。。</p>
<p>すみっコぐらしをめっちゃ好きでLineスタンプはすべてコンプリートしています*.⋆( ˘̴͈́ ॢ꒵ॢ ˘̴͈̀ )⋆.*
それは置いといて。。。。 ＼(･<em>＼)ｿﾉﾊﾅｼﾊ (／</em>･)／ｺｯﾁﾆｵｲﾄｲﾃ</p>
<p>PCに自動的に壁紙にするのも良いよなー、でもわざわざ探すのも面倒だしなーってことで、
画像スクレイピングで、すみっコぐらしを取得しよう！！っと思い紹介。</p>
<p>さて、はじめに、画像を取るにしても元ネタを探さなければなりません。
こういうときには、Google先生がいるではありませんか！！</p>
<p>そこから、画像を抜き出していけば、《《《《♪♪(<em>´▽｀</em>)ノ゛うふふ〜</p>
<p>それじゃ、初めてみましょうか。</p>
<p>まず、Google画像検索を開いて。</p>
<pre tabindex="0"><code>https://www.google.co.jp/imghp?hl=ja
</code></pre><p>に、キーワード「すみっコぐらし」を入れて見る</p>
<p>以下のようなアドレスが出て、Bodyには画像がいっぱい。</p>
<pre tabindex="0"><code>https://www.google.co.jp/search?hl=ja&amp;tbm=isch&amp;source=hp&amp;biw=1588&amp;bih=906&amp;ei=k31FW5m7DMW90gTgjIzQCA&amp;q=%E3%81%99%E3%81%BF%E3%81%A3%E3%82%B3%E3%81%90%E3%82%89%E3%81%97&amp;oq=%E3%81%99%E3%81%BF%E3%81%A3%E3%82%B3%E3%81%90%E3%82%89%E3%81%97&amp;gs_l=img.3..0i4k1j0j0i4k1l8.28705.29989.0.30812.5.5.0.0.0.0.172.596.2j3.5.0....0...1ac.1j4.64.img..1.4.510....0.FRb11i-VRo8
</code></pre><p>引数がいっぱいあるけど、必要でなさそうなのは削除してみる。。。。</p>
<p>以下を、たたいてみても問題なく取得できそう。</p>
<pre tabindex="0"><code>https://www.google.co.jp/search?hl=ja&amp;tbm=isch&amp;q=%E3%81%99%E3%81%BF%E3%81%A3%E3%82%B3%E3%81%90%E3%82%89%E3%81%97
</code></pre><p>ちなみに、これをURLデコードすると</p>
<pre tabindex="0"><code>https://www.google.co.jp/search?tbm=isch&amp;q=すみっコぐらし
</code></pre><p>となる</p>
<p>これをたたいてHTMLを取得します。
取得できるものをChromeやFireFoxでHTMLの中を見ると以下のようになっていると思います。</p>
<p><img src="../img/%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0.png" alt="スクレイピング.png"></p>
<p>classタグの「rg_meta notranslate」てのがありますね。
たぶんこれがでサイトの細かいデータのようです。</p>
<p>これを一部取りだして見てみましょう。。。。</p>
<pre tabindex="0"><code>{&#34;id&#34;:&#34;wWMIkItAEKJTEM:&#34;,&#34;isu&#34;:&#34;books.rakuten.co.jp&#34;,&#34;itg&#34;:0,&#34;ity&#34;:&#34;jpg&#34;,&#34;oh&#34;:640,&#34;ou&#34;:&#34;https://shop.r10s.jp/book/cabinet/5768/9784092895768.jpg&#34;,&#34;ow&#34;:435,&#34;pt&#34;:&#34;楽天ブックス: すみっコぐらしストーリーズ - ひみつのすみっコ生活 ...&#34;,&#34;rh&#34;:&#34;books.rakuten.co.jp&#34;,&#34;rid&#34;:&#34;2AQKjtQM7vPpdM&#34;,&#34;rt&#34;:0,&#34;ru&#34;:&#34;https://books.rakuten.co.jp/rb/13222030/&#34;,&#34;s&#34;:&#34;すみっコぐらしストーリーズ[せきちさと]&#34;,&#34;sc&#34;:1,&#34;st&#34;:&#34;楽天ブックス - 楽天市場&#34;,&#34;th&#34;:272,&#34;tu&#34;:&#34;https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcQBWnTHJQlhwZRDvPN4jRhT5KxV6QkCjgPner8OwAmEj0fV7E8t&#34;,&#34;tw&#34;:185}
</code></pre><p>んん？JSONですね。整形してみると。。。。</p>
<pre tabindex="0"><code>{
  &#34;id&#34; : &#34;wWMIkItAEKJTEM:&#34;,
  &#34;isu&#34; : &#34;books.rakuten.co.jp&#34;,
  &#34;itg&#34; : 0,
  &#34;ity&#34; : &#34;jpg&#34;,
  &#34;oh&#34; : 640,
  &#34;ou&#34; : &#34;https://shop.r10s.jp/book/cabinet/5768/9784092895768.jpg&#34;,
  &#34;ow&#34; : 435,
  &#34;pt&#34; : &#34;楽天ブックス: すみっコぐらしストーリーズ - ひみつのすみっコ生活 ...&#34;,
  &#34;rh&#34; : &#34;books.rakuten.co.jp&#34;,
  &#34;rid&#34; : &#34;2AQKjtQM7vPpdM&#34;,
  &#34;rt&#34; : 0,
  &#34;ru&#34; : &#34;https://books.rakuten.co.jp/rb/13222030/&#34;,
  &#34;s&#34; : &#34;すみっコぐらしストーリーズ[せきちさと]&#34;,
  &#34;sc&#34; : 1,
  &#34;st&#34; : &#34;楽天ブックス - 楽天市場&#34;,
  &#34;th&#34; : 272,
  &#34;tu&#34; : &#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBWnTHJQlhwZRDvPN4jRhT5KxV6QkCjgPner8OwAmEj0fV7E8t&#34;,
  &#34;tw&#34; : 185
}
</code></pre><p>URLが入っているのは、「ou」、「ru」、「tu」かな？</p>
<p>「tu」は、</p>
<pre tabindex="0"><code>https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBWnTHJQlhwZRDvPN4jRhT5KxV6QkCjgPner8OwAmEj0fV7E8t
</code></pre><p>googleさんがつくったサムネイル画像みたいですね。</p>
<p>「ru」は、</p>
<pre tabindex="0"><code>https://books.rakuten.co.jp/rb/13222030/
</code></pre><p>置いている元サイトかな？画像じゃないね。</p>
<p>「ou」は、</p>
<pre tabindex="0"><code>https://shop.r10s.jp/book/cabinet/5768/9784092895768.jpg
</code></pre><p>たぶんこれが、画像ですね。！！</p>
<p>これをダウンロードすればいいです。</p>
<p>それで、手順を簡単に書くと</p>
<ol>
<li><a href="https://www.google.co.jp/imghp">google画像検索</a>にキーワードを入れてアクセスする</li>
<li>取得できたHTMLで、classタグの「rg_meta notranslate」を配列で抜き出す。</li>
<li>そこから、「ou」というタグを見つけてその中のURLを取得</li>
<li>画像を保存</li>
</ol>
<p>これだけの、かーんたーんなお・し・ご・と！！（⌒^⌒)ｂうふっ</p>
<p>実際に、Python3でこれを組んでみました。
一度ためしてみてください。
走り書きで書いたのでフォーマットぐちゃぐちゃです。ごめんなさいｍ（＿＿）ｍ</p>
<pre tabindex="0"><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Created on 2018/07/13.

import os
from urllib import request as req
from urllib import error
from urllib import parse
import bs4
# pip3 install bs4
from datetime import datetime

import re

keyword =&#39;すみっコぐらし&#39;
subPath = &#34;./&#34;

print(&#34;--- Start ---&#34;)
print(&#34;--- &#34; + keyword + &#34;画像ダウンロード&#34; + &#34; ---&#34;)
print(datetime.now().strftime(&#34;%Y/%m/%d %H:%M:%S&#34;))

print(&#34;--- ディレクトリ作成 ---&#34;)
keywordPath=subPath + keyword

if not os.path.exists(subPath):
	os.mkdir(subPath)

if not os.path.exists(keywordPath):
	os.mkdir(keywordPath)

print(&#34;--- google画像情報サイト取得 ---&#34;)

urlKeyword = parse.quote(keyword)
url = &#39;https://www.google.co.jp/search?tbm=isch&amp;q=&#39; + urlKeyword + &#39;&#39;

headers = {&#34;User-Agent&#34;: &#34;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0&#34;,}
request = req.Request(url=url, headers=headers)
page = req.urlopen(request)

print(&#34;--- データパース ---&#34;)
html = page.read().decode(&#39;utf-8&#39;)
html = bs4.BeautifulSoup(html, &#34;html.parser&#34;)
elems = html.select(&#39;.rg_meta.notranslate&#39;)

print(&#34;--- 画像取得 ---&#34;)

counter = 0
for ele in elems:
	ele = ele.contents[0].replace(&#39;&#34;&#39;,&#39;&#39;).split(&#39;,&#39;)
	eledict = dict()

	# ou:のついているものが画像本体なのでそれを取り出す
	for e in ele:
		num = e.find(&#39;:&#39;)
		eledict[e[0:num]] = e[num+1:]
	imageURL = eledict[&#39;ou&#39;]
	
	pal = &#39;jpg&#39;
	if &#39;.jpg&#39; in imageURL:
		pal = &#39;.jpg&#39;
	elif &#39;.JPG&#39; in imageURL:
		pal = &#39;.jpg&#39;
	elif &#39;.png&#39; in imageURL:
		pal = &#39;.png&#39;
	elif &#39;.gif&#39; in imageURL:
		pal = &#39;.gif&#39;
	elif &#39;.jpeg&#39; in imageURL:
		pal = &#39;.jpeg&#39;
	else:
		pal = &#39;.jpg&#39;

	counter += 1
	fileName=keywordPath+ &#39;/&#39; + keyword + str(counter)+pal

	try:
		# 画像取得
		img = req.urlopen(imageURL)
		localfile = open(fileName, &#39;wb&#39;)
		localfile.write(img.read())
		img.close()
		localfile.close()
	except :
		#エラーの場合は次のデータを取得
		continue
		
print(datetime.now().strftime(&#34;%Y/%m/%d %H:%M:%S&#34;))
print(&#34;--- End ---&#34;)
</code></pre><p>今回は短いですけどこんなんでw</p>

              ]]></content:encoded></item></channel></rss>